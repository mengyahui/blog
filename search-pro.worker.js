const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":167,\"nextId\":167,\"documentIds\":{\"0\":\"v-016b8834\",\"1\":\"v-016b8834#_1-单体应用架构存在的问题\",\"2\":\"v-016b8834#_2-什么是微服务\",\"3\":\"v-016b8834#_3-微服务架构面临的挑战\",\"4\":\"v-016b8834#_4-微服务架构的相关概念\",\"5\":\"v-016b8834#_4-1-服务治理\",\"6\":\"v-016b8834#_4-2-服务调用\",\"7\":\"v-016b8834#_4-3-服务网关\",\"8\":\"v-016b8834#_4-4-服务容错\",\"9\":\"v-016b8834#_4-5-链路追踪\",\"10\":\"v-016b8834#_5-springcloud\",\"11\":\"v-224359e9\",\"12\":\"v-224359e9#_1-技术选型\",\"13\":\"v-224359e9#_2-数据库设计\",\"14\":\"v-224359e9#_2-2-1-用户服务\",\"15\":\"v-224359e9#_2-2-2-商品服务\",\"16\":\"v-224359e9#_2-2-3-订单服务\",\"17\":\"v-224359e9#_3-创建服务\",\"18\":\"v-224359e9#_2-3-1-聚合服务-mall\",\"19\":\"v-224359e9#_2-3-2-服务调用模块-mall-api\",\"20\":\"v-224359e9#_2-3-2-公共模块-mall-common\",\"21\":\"v-224359e9#_2-3-3-实体模块-mall-model\",\"22\":\"v-224359e9#_2-3-4-服务模块-mall-services\",\"23\":\"v-7770cb00\",\"24\":\"v-7770cb00#_1-nacos-概述\",\"25\":\"v-7770cb00#_2-nacos-的下载与安装\",\"26\":\"v-7770cb00#_3-nacos-注册中心\",\"27\":\"v-7770cb00#_3-1-服务注册中心介绍\",\"28\":\"v-7770cb00#_3-2-搭建-nacos-注册中心\",\"29\":\"v-7770cb00#_3-2-1-导入坐标\",\"30\":\"v-7770cb00#_3-2-2-nacos-服务发现配置\",\"31\":\"v-7770cb00#_3-3-nacos-领域模型\",\"32\":\"v-7770cb00#_3-2-1-服务\",\"33\":\"v-7770cb00#_3-2-2-集群\",\"34\":\"v-7770cb00#_3-2-3-实例\",\"35\":\"v-7770cb00#_3-4-nacos-数据模型\",\"36\":\"v-7770cb00#_3-4-1-namespace\",\"37\":\"v-7770cb00#_3-4-2-group\",\"38\":\"v-7770cb00#_4-nacos-集群\",\"39\":\"v-7770cb00#_4-1-nacos-集群架构\",\"40\":\"v-7770cb00#_4-2-数据持久化配置\",\"41\":\"v-7770cb00#_4-3-搭建-nacos-集群\",\"42\":\"v-7770cb00#_4-3-1-nacos-集群配置\",\"43\":\"v-7770cb00#_4-3-2-nginx-配置\",\"44\":\"v-7770cb00#_4-4-权重策略\",\"45\":\"v-7770cb00#_4-5-临时-持久化实例\",\"46\":\"v-7770cb00#_4-6-保护阈值\",\"47\":\"v-7770cb00#_5-nacos-配置中心\",\"48\":\"v-7770cb00#_5-1-服务配置中心介绍\",\"49\":\"v-7770cb00#_5-2-搭建-nacos-配置中心\",\"50\":\"v-7770cb00#_5-2-1-导入坐标\",\"51\":\"v-7770cb00#_5-2-2-nacos-配置中心配置\",\"52\":\"v-7770cb00#_5-2-3-在-nacos-中添加配置信息\",\"53\":\"v-7770cb00#_5-2-4-配置热更新\",\"54\":\"v-7770cb00#_5-2-5-多个服务共享配置\",\"55\":\"v-082f22b6\",\"56\":\"v-082f22b6#_1-什么是-springboot\",\"57\":\"v-082f22b6#_2-springboot-的特性\",\"58\":\"v-082f22b6#_3-springboot-starter\",\"59\":\"v-082f22b6#_4-什么是-约定优于配置\",\"60\":\"v-ade3bda0\",\"61\":\"v-ade3bda0#_1-helloworld-创建\",\"62\":\"v-ade3bda0#_2-项目的入口-引导类\",\"63\":\"v-ade3bda0#_2-1-springbootapplication\",\"64\":\"v-ade3bda0#_2-2-enableautoconfiguration\",\"65\":\"v-ade3bda0#_2-3-autoconfigurationpackage\",\"66\":\"v-ade3bda0#_2-4-autoconfigurationimportselector\",\"67\":\"v-ade3bda0#_3-版本管理-spring-boot-starter-parent\",\"68\":\"v-ade3bda0#_4-辅助功能-内嵌-tomcat\",\"69\":\"v-ef432644\",\"70\":\"v-ef432644#_1-配置随机值\",\"71\":\"v-ef432644#_2-配置文件优先级\",\"72\":\"v-ef432644#_3-如何从配置文件中取值\",\"73\":\"v-ef432644#_3-1-configurationproperties\",\"74\":\"v-ef432644#_3-2-value\",\"75\":\"v-ef432644#_4-如何从自定义配置文件中取值\",\"76\":\"v-22092faa\",\"77\":\"v-22092faa#_1-开发一个接口\",\"78\":\"v-22092faa#_2-spring-mvc-配置接口\",\"79\":\"v-22092faa#_3-json格式化\",\"80\":\"v-22092faa#_3-1-日期格式化\",\"81\":\"v-22092faa#_3-2-拓展消息转换器\",\"82\":\"v-22092faa#_4-处理静态资源\",\"83\":\"v-22092faa#_4-1-默认的静态资源目录\",\"84\":\"v-22092faa#_4-2-webjars-映射\",\"85\":\"v-22092faa#_4-3-自定义静态资源映射\",\"86\":\"v-22092faa#_4-拦截器、过滤器、监听器\",\"87\":\"v-22092faa#_4-1-拦截器\",\"88\":\"v-22092faa#_4-1-1-拦截器的功能\",\"89\":\"v-22092faa#_4-1-2-springboot-实现拦截器\",\"90\":\"v-22092faa#_4-1-3-token-令牌校验\",\"91\":\"v-22092faa#_4-2-过滤器\",\"92\":\"v-22092faa#_4-1-1-什么是过滤器\",\"93\":\"v-22092faa#_4-1-2-springboot-实现过滤器\",\"94\":\"v-22092faa#_4-3-监听器\",\"95\":\"v-22092faa#_4-3-1-什么是监听器\",\"96\":\"v-22092faa#_4-3-2-实现-servlet-的-listener\",\"97\":\"v-22092faa#_4-4-springboot-的-lisenter\",\"98\":\"v-22092faa#_4-4-1-listener-执行流程\",\"99\":\"v-22092faa#_4-4-2-实现-listener\",\"100\":\"v-66480b83\",\"101\":\"v-66480b83#_1-为什么要用日志\",\"102\":\"v-66480b83#_2-springboot默认日志管理\",\"103\":\"v-66480b83#_2-1-日志分类\",\"104\":\"v-66480b83#_2-2-日志级别\",\"105\":\"v-66480b83#_2-3-打印日志\",\"106\":\"v-66480b83#_2-4-自定义日志格式\",\"107\":\"v-66480b83#_2-5-持久化日志\",\"108\":\"v-66480b83#_3-logback日志文件\",\"109\":\"v-63b3cbee\",\"110\":\"v-63b3cbee#_1-关于异常的理解\",\"111\":\"v-63b3cbee#_2-springboot默认异常处理机制\",\"112\":\"v-63b3cbee#_3-统一异常处理\",\"113\":\"v-63b3cbee#_3-1-exceptionhandler\",\"114\":\"v-63b3cbee#_3-2-controlleradvice\",\"115\":\"v-63b3cbee#_4-全局异常处理器\",\"116\":\"v-63b3cbee#_4-1-统一响应格式\",\"117\":\"v-63b3cbee#_4-2-全局异常处理器\",\"118\":\"v-63b3cbee#_4-3-自定义异常\",\"119\":\"v-63b3cbee#_5-使用assert替换throw-exception\",\"120\":\"v-fedd21d8\",\"121\":\"v-fedd21d8#_1-何时用到多数据源\",\"122\":\"v-fedd21d8#_2-单一数据源的整合\",\"123\":\"v-fedd21d8#_3-abstractroutingdatasource\",\"124\":\"v-fedd21d8#_3-1-determinetargetdatasource\",\"125\":\"v-fedd21d8#_3-2-afterpropertiesset\",\"126\":\"v-fedd21d8#_4-实现动态数据源\",\"127\":\"v-fedd21d8#_4-1-环境准备\",\"128\":\"v-fedd21d8#_4-2-数据源切换如何保证线程隔离\",\"129\":\"v-fedd21d8#_4-3-创建动态数据源\",\"130\":\"v-fedd21d8#_4-4-初始化动态数据源\",\"131\":\"v-fedd21d8#_4-5-整合mybatis\",\"132\":\"v-fedd21d8#_4-6-自定义注解切换数据源\",\"133\":\"v-fedd21d8#_4-7-配置事务管理器\",\"134\":\"v-51d053f0\",\"135\":\"v-51d053f0#_1-为什么要进行参数校验\",\"136\":\"v-51d053f0#_2-spring-validation\",\"137\":\"v-51d053f0#_3-常用校验注解\",\"138\":\"v-51d053f0#_4-异常说明\",\"139\":\"v-51d053f0#_5-异常处理\",\"140\":\"v-51d053f0#_6-validated-valid\",\"141\":\"v-51d053f0#_6-1-分组校验\",\"142\":\"v-51d053f0#_6-2-嵌套校验\",\"143\":\"v-e2fb665a\",\"144\":\"v-e2fb665a#一、滚动条的组成\",\"145\":\"v-e2fb665a#二、css-伪类\",\"146\":\"v-e2fb665a#三、修改\",\"147\":\"v-2bf70440\",\"148\":\"v-2bf70440#一、后端返回下载地址\",\"149\":\"v-2bf70440#_1-1-location-herf\",\"150\":\"v-2bf70440#_1-2-动态添加-a-标签\",\"151\":\"v-2bf70440#_1-3-window-open\",\"152\":\"v-2bf70440#二、后端返回二进制文件流\",\"153\":\"v-2bf70440#_2-1-content-disposition\",\"154\":\"v-2bf70440#_2-2-content-disposition-中文件名中文乱码\",\"155\":\"v-2bf70440#_2-3-content-disposition-跨域\",\"156\":\"v-6878f74b\",\"157\":\"v-6878f74b#一、什么是-vue\",\"158\":\"v-6878f74b#二、理解-mvvm\",\"159\":\"v-6878f74b#三、安装-vue\",\"160\":\"v-9e837194\",\"161\":\"v-145598cf\",\"162\":\"v-4746fd3e\",\"163\":\"v-8bcc1b2a\",\"164\":\"v-7e25fb5f\",\"165\":\"v-0600f047\",\"166\":\"v-8bbac970\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2],\"1\":[2,71],\"2\":[3,32],\"3\":[2,27],\"4\":[2,2],\"5\":[3,8],\"6\":[3,31],\"7\":[3,29],\"8\":[2,13],\"9\":[3,15],\"10\":[2,53],\"11\":[2,9],\"12\":[2,11],\"13\":[2,6],\"14\":[3,53],\"15\":[2,44],\"16\":[3,63],\"17\":[2,20],\"18\":[5,124],\"19\":[5,62],\"20\":[5,58],\"21\":[5,79],\"22\":[6,89],\"23\":[2],\"24\":[3,38],\"25\":[3,53],\"26\":[3],\"27\":[3,40],\"28\":[5],\"29\":[4,22],\"30\":[4,41],\"31\":[3,11],\"32\":[4,15],\"33\":[3,31],\"34\":[3,21],\"35\":[4,33],\"36\":[4,51],\"37\":[4,33],\"38\":[3,14],\"39\":[4,18],\"40\":[3,58],\"41\":[5],\"42\":[5,46],\"43\":[5,66],\"44\":[2,64],\"45\":[4,51],\"46\":[3,48],\"47\":[3],\"48\":[3,51],\"49\":[5],\"50\":[4,34],\"51\":[4,58],\"52\":[6,89],\"53\":[4,74],\"54\":[3,44],\"55\":[2],\"56\":[4,88],\"57\":[3,28],\"58\":[3,40],\"59\":[4,32],\"60\":[2,30],\"61\":[3,85],\"62\":[3],\"63\":[3,21],\"64\":[2,28],\"65\":[3,41],\"66\":[3,44],\"67\":[6,35],\"68\":[4,107],\"69\":[2,67],\"70\":[2,34],\"71\":[2,62],\"72\":[3,5],\"73\":[3,76],\"74\":[3,16],\"75\":[3,109],\"76\":[2,28],\"77\":[2,57],\"78\":[4,92],\"79\":[2,26],\"80\":[3,33],\"81\":[3,114],\"82\":[2],\"83\":[3,43],\"84\":[4,57],\"85\":[3,46],\"86\":[4],\"87\":[3,9],\"88\":[3,19],\"89\":[5,28],\"90\":[5,99],\"91\":[3],\"92\":[4,40],\"93\":[5,72],\"94\":[3],\"95\":[5,45],\"96\":[7,157],\"97\":[4,31],\"98\":[4,5],\"99\":[4,56],\"100\":[2],\"101\":[3,17],\"102\":[2],\"103\":[3,55],\"104\":[2,61],\"105\":[3,33],\"106\":[3,56],\"107\":[3,30],\"108\":[2,158],\"109\":[2],\"110\":[2,20],\"111\":[2,49],\"112\":[2,15],\"113\":[3,57],\"114\":[3,15],\"115\":[2],\"116\":[3,116],\"117\":[3,58],\"118\":[3,51],\"119\":[3,58],\"120\":[2],\"121\":[3,23],\"122\":[2,88],\"123\":[2,45],\"124\":[4,46],\"125\":[4,65],\"126\":[2],\"127\":[3,57],\"128\":[4,46],\"129\":[3,30],\"130\":[2,35],\"131\":[3,146],\"132\":[3,86],\"133\":[3,32],\"134\":[2],\"135\":[3,25],\"136\":[3,65],\"137\":[2,64],\"138\":[2,57],\"139\":[2,42],\"140\":[3,14],\"141\":[3,61],\"142\":[3,69],\"143\":[2,4],\"144\":[2,12],\"145\":[3,23],\"146\":[2,26],\"147\":[2,11],\"148\":[2],\"149\":[3,13],\"150\":[6,40],\"151\":[4,10],\"152\":[2,73],\"153\":[4,39],\"154\":[4,44],\"155\":[5,40],\"156\":[2],\"157\":[4,19],\"158\":[3,51],\"159\":[3,68],\"160\":[1],\"161\":[1],\"162\":[1],\"163\":[1],\"164\":[1],\"165\":[1],\"166\":[1]},\"averageFieldLength\":[3.059880239520957,45.80725384889849],\"storedFields\":{\"0\":{\"h\":\"001-微服务与SpringCloud\"},\"1\":{\"h\":\"1-单体应用架构存在的问题\",\"t\":[\"一个归档包（比如war包）包含的所有功能的应用程序。在项目中我们通常将需求分为三个主要部分：数据库、服务端处理、前端展现。在业务发展初期，由于所有的业务逻辑在一个应用中，开发、测试、部署都还比较容易且方便。这种通常称为单体应用。\",\"单体应用比较容易部署、测试，在项目初期，单体应用可以很好地稳定运行。然而，一般项目都会随着需求而不断的变化以及增加，越来越多的人加入到项目的开发团队，代码库也在飞速地膨胀。慢慢地，单体应用变得越来越臃肿，可维护性、灵活性逐渐降低，维护成本越来越高。\",\"下面是对单体应用所面临问题的总结：\",\"复杂性高\",\"在大型单体应用中一般会包含的模块非常多、模块的边界也非常模糊、依赖关系不清晰、代码质量参差不齐、混乱地堆砌在一起，这些将导致整个项目非常复杂。每次修改代码都心惊胆战，甚至添加一个简单的功能，或者修改一个 Bug 都会带来隐藏的缺陷。\",\"开发速度缓慢\",\"随着单体应用功能的增多，项目变得异常臃肿且庞大，每一次的编译构建、运行和测试，都需要花费大量时间，即使你可能只要修改某一个参数，你也得把上面整个流程走一遍，相当于每一次的修改都是牵一发而动全身的操作。\",\"不易拓展\",\"项目中不同模块对计算机的性能要求不一样，例如使用 Redis 来保存了大量的热点数据，那么我们希望服务器的内存非常大，另外有一个模块涉及到了图片处理，我们又希望服务器的 CPU 非常强，如果是单体应用部署的话，那么这些条件服务器都要满足。\",\"技术栈不易扩展\",\"单体应用还有一个劣势就是技术栈不易扩展，一旦你选定了某一个技术栈来开发项目，以后很难在技术栈上做切换。有的时候，有一个服务需要处理高并发，你很想用 Go 语言来做，可是做不到，没法引入其他语言。\"]},\"2\":{\"h\":\"2-什么是微服务？\",\"t\":[\"微服务架构（Microservice Architecture）是一种架构理念，业界没有严格统一的定义，但是作为微服务这名词的发明人，Martin Fowler 对微服务的定义似乎更具有权威性和指导意义：\",\"微服务架构风格是一种将一个单体应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制（通常用 HTTP 资源 API）。这些服务围绕业务能力构建摒弃人可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。\",\"微服务架构应具备如下特性：\",\"每个微服务可独立运行在自己的进程里；\",\"一系列独立运行的微服务共同构建起整个系统；\",\"每个服务作为一个独立的业务进行开发，只关注某个特定的功能；\",\"微服务之间通过一些轻量级的的通信机制进行通信，例如通过 RESTful API 进行调用；\",\"不同的微服务可以使用不同的语言和数据存储技术；\",\"全自动的部署机制。\"]},\"3\":{\"h\":\"3-微服务架构面临的挑战\",\"t\":[\"相对单体应用架构来说，微服务架构有着显著的优点。但微服务并非是完美的，至少存在如下挑战：\",\"运维要求较高：更多的服务意味着更多的运维投入。在单体架构中，只需要保证一个应用的正常运行。而在微服务中，需要保证几十甚至几百个服务的正常运行与协作；\",\"分布式固有的复杂性：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延迟、分布式事务等都会带来巨大挑战；\",\"接口调整成本高：微服务之间通过接口进行通信。如果修改某一个微服务的 API，可能使用了该 API 的微服务都需要做调整。\",\"重复劳动：很多服务可能都会使用到相同的功能，但这个功能并没有达到分解成一个微服务的程度，从而导致代码重复。\"]},\"4\":{\"h\":\"4-微服务架构的相关概念\",\"t\":[\"下面是微服务架构针对需要解决的问题提出的一些相关概念。\"]},\"5\":{\"h\":\"4.1 服务治理\",\"t\":[\"服务治理就是通过注册中心进行服务的自动化管理，其核心是服务的注册与发现。其中服务实例将自身服务信息注册到注册中心就叫做服务注册，而服务实例通过注册中心获取到其中的实例的服务信息，并通过这些信息去请求相关服务的过程就是服务发现。此外，注册中心还应该具备剔除出现问题的服务的功能。\"]},\"6\":{\"h\":\"4.2 服务调用\",\"t\":[\"在微服务架构中，通常存在多个服务之间的远程调用需求。目前主流的远程调用技术有基于 HTTP 请求的 RESTFul接口及基于 TCP 的 RPC 协议。\",\"REST(Representational State Transfer)：这是一种 HTTP 调用的格式，更标准，更通用，无论哪种语言都支持HTTP 协议。\",\"RPC（Remote Promote Call）：一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC 框架的主要目标就是让远程服务调用更简单、透明。RPC 框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。\"]},\"7\":{\"h\":\"4.3 服务网关\",\"t\":[\"随着服务的不断增多，不同的服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能会出现如下问题：\",\"客户端再不同的场景下需要调用不同的 URL 地址，为服务的调用增加了难度。\",\"在一定的场景下，可能会出现跨域请求的问题。\",\"每个服务都需要进行单独的身份认证。\",\"为了解决这些问题，API 网关应运而生。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后，各个 API 服务提供团队可以专注于自己的的业务逻辑处理，而 API 网关更专注于安全、流量、路由等问题。\"]},\"8\":{\"h\":\"4.4 服务容错\",\"t\":[\"在微服务架构中，一个请求通常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。\",\"虽然我们无法预防雪崩效应的发生，但我们应该尽可能地做好服务容错，服务容错的三个核心思想是：\",\"不被外界环境影响。\",\"不被上游请求压垮。\",\"不被下游请求拖垮。\"]},\"9\":{\"h\":\"4.5 链路追踪\",\"t\":[\"随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录。\",\"所谓链路追踪，就是对一次请求涉及的很多个服务链路进行日志记录、性能监控。\"]},\"10\":{\"h\":\"5-SpringCloud\",\"t\":[\"SpringCloud 和微服务有什么关系？\",\"微服务仅仅是一种架构思想，而 SpringCloud 是微服务架构的一站式解决方案，基于 SpringBoot 风格的封装，屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、容易部署的分布式系统开发工具包。\",\"SpringCloud 并没有重复造轮子，而是对现有的技术进行封装和维护，包括 spring-cloud-config、spring-cloud-bus 等近 20 个子项目，其中包含了服务注册与发现、配置中心、服务网关、网关路由、负载均衡、断路器、监控跟踪、分布式消息队列等解决方案。\",\"SpringCloud Alibaba 是阿里研发的一套微服务架构的落地技术方案，可以很好的兼容 SpringCloud，目前已经列入了 SpringCloud 的子项目，使得微服务架构有了更多的选择。\",\"SpringCloud Alibaba 的 Github 地址已经给出了详细的 SpringBoot、SpringCloud、SpringCloud Alibaba 及其组件版本的参考。\",\"下面给出了一组本人常用的版本参考：\",\"SpringBoot\",\"SpringCloud\",\"SpringCloud Alibaba\",\"Sentinel\",\"Nacos\",\"RocketMQ\",\"Seata\",\"2.6.3\",\"2021.0.1\",\"2021.0.1.0\",\"1.8.3\",\"1.4.2\",\"4.9.2\",\"1.4.2\"]},\"11\":{\"h\":\"002-SpringCloud案例项目搭建\",\"t\":[\"为了方便 SpringCloud 的学习，这里以电商项目的三个核心模块：用户模块、商品模块和订单模块为例，来学习 SpringCloud 组件。\"]},\"12\":{\"h\":\"1-技术选型\",\"t\":[\"数据库：MySQL8.0.11\",\"持久层：MyBatis-Plus\",\"Maven：3.8.4\"]},\"13\":{\"h\":\"2-数据库设计\",\"t\":[\"微服务架构下的不同微服务之间可以使用不同的语言和存储技术，这里使用 MySQL 数据库进行存储，为每个独立的模块创建自己的数据库。\"]},\"14\":{\"h\":\"2.2.1 用户服务\",\"t\":[\"用户服务的数据库名设计为 mall_ums，仅仅创建一张用户表 ums_user，表结构如下：\",\"CREATE TABLE ums_user( id bigint NOT NULL auto_increment comment '自增主键', username varchar(64) NOT NULL comment '用户名', password varchar(64) NOT NULL comment '密码', nickname varchar(64) NULL DEFAULT NULL comment '昵称', mobile varchar(20) NULL DEFAULT NULL comment '手机号码', email varchar(64) NULL DEFAULT NULL comment '邮箱', avatar varchar(500) NULL DEFAULT NULL comment '头像', status tinyint(4) NOT NULL DEFAULT 1 comment '启用状态[1-启用,0-禁用]', create_time datetime NULL DEFAULT NULL comment '注册时间', is_deleted tinyint(4) NOT NULL DEFAULT 1 comment '删除标志[1-未删除,0-已删除]', PRIMARY KEY (id) ); \"]},\"15\":{\"h\":\"2.2.2 商品服务\",\"t\":[\"商品服务的数据库名设计为 mall_pms，为了方便学习这里仅仅创建一张商品表 pms_product，表结构如下：\",\"CREATE TABLE pms_product( id bigint NOT NULL auto_increment comment '自增主键', name varchar(64) NOT NULL comment '商品名称', price varchar(20) NOT NULL comment '商品价格', status tinyint(4) NOT NULL DEFAULT 1 comment '上架状态[1-已上架,0-下架]', goods_desc varchar(100) NULL DEFAULT NULL comment '商品详情', is_deleted tinyint(4) NOT NULL DEFAULT 1 comment '删除标志[1-未删除,0-已删除]', PRIMARY KEY (id) ); \"]},\"16\":{\"h\":\"2.2.3 订单服务\",\"t\":[\"订单模块的数据库名设计为 mall_order，为了方便学习，订单状态也只设计了 2 种状态：已创建、已完成，表结构如下：\",\"CREATE TABLE oms_order( id bigint(20) NOT NULL auto_increment comment '自增主键', user_id bigint(20) NULL DEFAULT NULL COMMENT '用户id', order_no char(32) NULL DEFAULT NULL COMMENT '订单号', create_time datetime NULL DEFAULT NULL COMMENT '订单创建时间', total_amount varchar(20) NULL DEFAULT NULL COMMENT '订单总额', note varchar(500) NULL DEFAULT NULL COMMENT '订单备注', receiver_name varchar(100) NULL DEFAULT NULL COMMENT '收货人姓名', receiver_phone varchar(32) NULL DEFAULT NULL COMMENT '收货人电话', status tinyint(4) NULL DEFAULT NULL COMMENT '订单状态[1-已发货,3-已完成]', is_deleted tinyint(4) NOT NULL DEFAULT 1 comment '删除标志[1-未删除,0-已删除]', PRIMARY KEY (id) ); \"]},\"17\":{\"h\":\"3-创建服务\",\"t\":[\"案例项目的目录结构如下：\",\"mall # 聚合服务 ├─mall-api # 服务调用模块 ├─mall-common # 公共模块 ├─mall-model # 实体模块 ├─mall-services # 服务模块 ├─mall-order-server # 订单服务 ├─mall-product-server # 商品服务 ├─mall-user-server # 用户服务 \"]},\"18\":{\"h\":\"2.3.1 聚合服务 mall\",\"t\":[\"聚合服务 mall 主要对所有项目的依赖坐标进行管理，其 pom 文件如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>com.mall</groupId> <artifactId>mall</artifactId> <version>1.0.0}</version> <packaging>pom</packaging> <modules> <module>mall-common</module> <module>mall-model</module> <module>mall-services</module> <module>mall-api</module> </modules> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.6.3</version> </parent> <properties> <maven.compiler.source>11</maven.compiler.source> <maven.compiler.target>11</maven.compiler.target> <spring_boot_version>2.6.3</spring_boot_version> <spring_cloud-alibaba_version>2021.0.1.0</spring_cloud-alibaba_version> <spring_cloud_version>2021.0.1</spring_cloud_version> <mybatis_plus_version>3.5.2</mybatis_plus_version> <mysql_version>8.0.29</mysql_version> <lombok_version>1.18.24</lombok_version> <mall_version>1.0.0</mall_version> </properties> <dependencyManagement> <dependencies> <!--SpringCloud 依赖--> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring_cloud_version}</version> <scope>import</scope> <type>pom</type> </dependency> <!--SpringCloud Alibaba依赖--> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>${spring_cloud-alibaba_version}</version> <scope>import</scope> <type>pom</type> </dependency> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> <version>${mybatis_plus_version}</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>${mysql_version}</version> </dependency> <!--内部依赖包--> <dependency> <groupId>com.mall</groupId> <artifactId>mall-model</artifactId> <version>${mall_version}</version> </dependency> <dependency> <groupId>com.mall</groupId> <artifactId>mall-api</artifactId> <version>${mall_version}</version> </dependency> <dependency> <groupId>com.mall</groupId> <artifactId>mall-common</artifactId> <version>${mall_version}</version> </dependency> </dependencies> </dependencyManagement> </project> \"]},\"19\":{\"h\":\"2.3.2 服务调用模块 mall-api\",\"t\":[\"服务调用模块，管理了各个微服务的远程调用 API，其 pom 文件如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>com.mall</groupId> <artifactId>mall</artifactId> <version>1.0.0</version> </parent> <artifactId>mall-api</artifactId> <properties> <maven.compiler.source>11</maven.compiler.source> <maven.compiler.target>11</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> </project> \"]},\"20\":{\"h\":\"2.3.2 公共模块 mall-common\",\"t\":[\"公共模块 mall-common，用于集中管理各个微服务公共的配置，其 pom 文件如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <artifactId>mall-common</artifactId> <parent> <groupId>com.mall</groupId> <artifactId>mall</artifactId> <version>1.0.0</version> </parent> <properties> <maven.compiler.source>11</maven.compiler.source> <maven.compiler.target>11</maven.compiler.target> </properties> </project> \"]},\"21\":{\"h\":\"2.3.3 实体模块 mall-model\",\"t\":[\"实体模块 mall-model 主要对服务需要使用的pojo、vo、dto 进行管理，其 pom 文件如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>com.mall</groupId> <artifactId>mall</artifactId> <version>1.0.0</version> </parent> <artifactId>mall-model</artifactId> <properties> <maven.compiler.source>11</maven.compiler.source> <maven.compiler.target>11</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <dependency> <groupId>com.baomidou</groupId> <artifactId>mybatis-plus-boot-starter</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency> </dependencies> </project> \"]},\"22\":{\"h\":\"2.3.4 服务模块 mall-services\",\"t\":[\"该模块下管理着用户服务、商品服务和订单服务三个微服务，其 pom 文件如下：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>com.mall</groupId> <artifactId>mall</artifactId> <version>1.0.0</version> </parent> <groupId>com.mall.service</groupId> <artifactId>mall-services</artifactId> <packaging>pom</packaging> <modules> <module>mall-user-server</module> <module>mall-order-server</module> <module>mall-product-server</module> </modules> <properties> <maven.compiler.source>11</maven.compiler.source> <maven.compiler.target>11</maven.compiler.target> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> </properties> <dependencies> <!--内部依赖--> <dependency> <groupId>com.mall</groupId> <artifactId>mall-model</artifactId> </dependency> <dependency> <groupId>com.mall</groupId> <artifactId>mall-common</artifactId> </dependency> <dependency> <groupId>com.mall</groupId> <artifactId>mall-api</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> </dependency> </dependencies> </project> \"]},\"23\":{\"h\":\"003-Nacos服务注册与配置中心\"},\"24\":{\"h\":\"1-Nacos 概述\",\"t\":[\"官网地址：https://nacos.io\",\"GitHub地址：https://github.com/alibaba/nacos\",\"以下的 Nacos 介绍来自 Nacos 官网：\",\"Nacos /nɑ:kəʊs/ 是 Dynamic Naming and Configuration Service 的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\",\"Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\",\"Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\"]},\"25\":{\"h\":\"2-Nacos 的下载与安装\",\"t\":[\"SpringCloud Alibaba 对应的 Nacos 版本可以在 SpringCloud Aibaba 的 Github 地址 查看，我这里下载的是 1.4.2 版本的 Nacos，下载地址为：https://github.com/alibaba/nacos/releases。\",\"下载完成后在本地解压即可，解压后的 bin 目录里存放的是 Nacos 的启动脚本，在不同的系统下执行相应的启动脚本即可启动 Nacos，例如，在 Windows 系统下双击执行 startup.cmd 文件，就可以启动 Nacos，但此时会报错，这是因为 Nacos 默认的启动模式是集群，可以通过如下命令，以单例模式启动 Nacos。\",\"startup.cmd -m standalone \",\"启动后，在浏览器访问 http://localhost:8848/nacos 即可进入 Nacos 的控制台的登陆界面，默认的用户名和密码都是 nacos。\",\"image-20230609164217967\"]},\"26\":{\"h\":\"3-Nacos 注册中心\"},\"27\":{\"h\":\"3.1 服务注册中心介绍\",\"t\":[\"在微服务架构中，一个系统通常被拆分为多个模块 / 服务，在服务是单实例情况下，可以采用点对点的 HTTP 直接调用，即 IP + Port + 接口的形式。但模块 / 服务通常都是多实例集群部署，用以减轻服务器的压力。\",\"在多实例集群部署服务时，我们不得不考虑如下几个问题：\",\"调用方如何知晓调用哪个实例？\",\"当实例运行失败后，如何转移到别的实例上去处理请求？\",\"服务注册中心便是为了解决上述问题，将所有的服务统一的、动态的管理起来。所有的服务都与注册中心发生连接，由注册中心统一配置管理，不再由实例自身直接调用。\",\"服务管理的过程大致如下：\",\"服务提供者启动时，将服务提供者的信息主动提交到服务注册中心进行服务注册。\",\"服务调用者启动时，将服务提供者信息从注册中心下载到调用者本地，调用者从本地的服务提供者列表中，基于某种负载均衡策略选择一台服务实例发起远程调用，这是一个点到点调用的方式。\",\"服务注册中心能够感知服务提供者某个实例下线，同时将该实例服务提供者信息从注册中心清除，并通知服务调用者集群中的每一个实例，告知服务调用者不再调用本实例，以免调用失败。\"]},\"28\":{\"h\":\"3.2 搭建 Nacos 注册中心\"},\"29\":{\"h\":\"3.2.1 导入坐标\",\"t\":[\"所有的服务都需要注册到 Nacos 注册中心，这里将 Nacos 服务发现与注册的坐标导入 mall-services 模块中：\",\"<dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \"]},\"30\":{\"h\":\"3.2.2 Nacos 服务发现配置\",\"t\":[\"这里以 mall-user-server 服务为例，在 application.yml 中配置的 Nacos 服务发现的具体信息为：\",\"spring: application: name: mall-user-server cloud: nacos: server-addr: 127.0.0.1:8848 # Nacos 服务地址 discovery: # 服务注册的名称，默认是:spring.application.name service: ${spring.application.name} # 服务注册的地址，默认是:spring.cloud.nacos.server-addr server-addr: ${spring.cloud.nacos.server-addr} \",\"此时，只需要在各个服务的启动类或配置类上加上 @EnableDiscoveryClient 注解用于开启服务注册与发现的支持，服务就可以注册到 Nacos，但经过实际测试不加 @EnableDiscoveryClient 注解，服务也能注册到 Nacos。\",\"提示\",\"在配置 spring.application.name 和 spring.cloud.nacos.server-addr 的前提下，可以不配置 spring.cloud.nacos.service 和 spring.cloud.nacos.discovery。\"]},\"31\":{\"h\":\"3.3 Nacos 领域模型\",\"t\":[\"Nacos 领域模型描述了服务与实例之间的边界和层级关系。Nacos 的服务领域模型是以服务为维度构建起来的，这个服务并不是指集群中的单个服务器，而是指微服务的服务名。服务是 Nacos 中位于最上层的概念，在服务之下，还有集群和实例的概念。\",\"image-20230609205457741\"]},\"32\":{\"h\":\"3.2.1 服务\",\"t\":[\"在服务这个层级上可以配置元数据和服务保护阈值等信息。服务阈值是一个 0~1 之间的 数字，当服务的健康实例数与总实例的比例小于这个阈值的时候，说明能提供服务的机器已经 没多少了。这时候 Nacos 会开启服务保护模式，不再主动剔除服务实例，同时还会将不健康 的实例也返回给消费者。\"]},\"33\":{\"h\":\"3.2.2 集群\",\"t\":[\"一个服务由很多服务实例组成，在每个服务实例启动的时候，可以设置它所属的集群，在集群这个层级上，也可以配置元数据。除此之外，还可以为持久化节点设置健康检查模式。\",\"所谓持久化节点，是一种会保存到 Nacos 服务端的节点，即便该节点的客户端进程没有在运行，节点也不会被服务端删除，只不过 Nacos 会将这个持久化节点的状态标记为不健康， Nacos 可以采用一种“主动探活”的方式来对持久化节点做健康检查。\",\"除了持久化节点以外，大部分服务节点在 Nacos 中以 “临时节点” 的方式存在，它是默认的服务注册方式，从名字中就可以看出，这种节点不会被持久化保存在 Nacos 服务器，临时节点通过主动发送 heartbeat 请求向服务器报送自己的状态。\"]},\"34\":{\"h\":\"3.2.3 实例\",\"t\":[\"这里所说的实例就是指服务节点，可以在 Nacos 控制台查看每个实例的 IP 地址和端口、 编辑实例的元数据信息、修改它的上线 / 下线状态或者配置路由权重等等。\",\"在这三个层级上都有 “元数据” 这一数据结构，可以把它理解为一组包含了服务描述信息（如服务版本等）和自定义标签的数据集合。Client 端通过服务发现技术可以获取到 每个服务实例的元数据，可以将自定义的属性加入到元数据并在 Client 端实现某些定制化的业务场景。\"]},\"35\":{\"h\":\"3.4 Nacos 数据模型\",\"t\":[\"Nacos 的数据模型有三个层次结构，分别是 Namespace、Group 和 Service/DataId。\",\"Namespace：即命名空间，它是最顶层的数据结构，可以用它来区分开发环境、生产环境等不同环境。默认情况下，所有服务都部署到一个叫做 “public” 的公共命名空间；\",\"Group：在命名空间之下有一个分组结构，默认情况下所有微服务都属于 “DEFAULT_GROUP” 这个分组，不同分组间的微服务是相互隔离的；\",\"Service/DataID：在 Group 分组之下，就是具体的微服务了，比如订单服务、商品服务等等。\",\"image-20230609210818177\",\"通过 Namespace + Group + Service/DataID，就可以精准定位到一个具体的微服务\"]},\"36\":{\"h\":\"3.4.1 Namespace\",\"t\":[\"不同的命名空间逻辑上是隔离的，不特殊设置的情况下，服务不会跨命名空间请求，命名空间主要的作用是区分服务使用的范围，比如开发、测试、生产可以分别设置三个命名空间来互相隔离。在不设置的情况下，只有一个保留空间 public。\",\"设置命名空间也很简单，首先在 nacos 控制台新建命名空间，如下图所示：\",\"image-20230609211316753\",\"在创建命名空间时，我们不必填写命名空间 ID，系统会自动生成，可以在控制台查看命名空间的 ID。接下来就可以在 Nacos 的注册配置中将服务注册到此命名空间下，例如这里将 mall-user 服务注册到此命名空间下，代码如下：\",\"spring: application: name: mall-user cloud: nacos: server-addr: 127.0.0.1:8848 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} namespace: 4331959a-47d7-48d1-8995-1e606968dfe1 # Nacos 控制台生成的命名空间ID \"]},\"37\":{\"h\":\"3.4.2 Group\",\"t\":[\"Group 可以在 Namespace 基础上进行更加细致的隔离，Group 具体的使用场景主要有如下几个方面：\",\"配置分组\",\"Group 的最常用的场景就是配置分组，一个命名空间下的一些服务都用到了一些相同的配置，就可以将这些服务分配到同一个组中，再将这些服务都用到的配置信息，抽取为改分组下的一个配置文件，这样只有在该分组的服务才能使用这个配置文件。\",\"服务分类\",\"在企业级应用系统中，通常会有多个服务同时运行，可能包含了不同功能、不同频率和不同负载的服务。使用 Nacos 的 Group 功能可以将这些服务按照自定义的规则进行分类，以便更好地区分和管理。\",\"灰度发布\",\"灰度发布是基于服务的，在 Nacos 中服务的 Group 就是实现灰度发布的关键，在灰度发布中，通常将新版本的服务和旧版本的服务同时运行一段时间，然后再逐步将新版本的服务全部投入使用。可以将新版本的服务和旧版本的服务归类到不同的组中，通过不断调节不同组的服务权重来实现灰度发布。\"]},\"38\":{\"h\":\"4 Nacos 集群\",\"t\":[\"Nacos 支持两种部署模式：单机模式和集群模式。在开发中，我们习惯用单机模式快速构建一个 Nacos 开发/测试环境，而在生产中，出于高可用的考虑，一定需要使用 Nacos 集群部署模式。Nacos 为高可用做了非常多的特性支持，而这些高可用特性大多数都依赖于集群部署模式。\"]},\"39\":{\"h\":\"4.1 Nacos 集群架构\",\"t\":[\"下图是 Nacos 官方文档给出的 Nacos 集群部署架构图，其中的 SLB 表示负载均衡，外部服务向 Nacos 发起注册时，首先会经过 SLB，通常使用 Nginx，为了保证高可用 Nginx 也可以做集群，通过 Nginx 来分发到具体的 Nacos 服务器上面。\",\"deployDnsVipMode\"]},\"40\":{\"h\":\"4.2 数据持久化配置\",\"t\":[\"Nacos 默认数据存储在内嵌数据库 Derby 中，不属于生产可用的数据库。官方推荐的最佳实践是使用带有主从的高可用数据库集群，这里以单点的外部数据库 MySQL 为例。可以使用 Docker 在虚拟机上安装 MySQL，命令如下：\",\"docker run \\\\ -p 3306:3306 \\\\ --name mysql \\\\ -v /docker/mysql/logs:/logs \\\\ -v /docker/mysql/data:/var/lib/mysql \\\\ -v /docker/mysql/conf:/etc/mysql/conf.d \\\\ -e MYSQL_ROOT_PASSWORD=root \\\\ -d mysql:8.0.17 \",\"首先，在 nacos 安装目录的 conf 目录下找到 nacos-mysql.sql 文件，需要在名为 nacos_config 的数据库中执行这个文件。\",\"接着，在 nacos 安装目录的 conf 目录下找到 application.properties 文件，修改其中的数据库配置，除了下面的数据库平台配置和数据库数量配置外，还要保证连接的数据库地址的正确性。\",\"spring.datasource.platform=mysql # 使用mysql数据库 db.num=1 # 数据库的数量 \"]},\"41\":{\"h\":\"4.3 搭建 Nacos 集群\"},\"42\":{\"h\":\"4.3.1 Nacos 集群配置\",\"t\":[\"在做好 Nacos 持久化之后，需要在 Nacos 安装目录的 conf 目录下，将 cluster.conf.example 文件重命名为 cluster.conf，然后打开这个文件，添加需要集群 Nacos 的 IP 信息。\",\"这里采用在本地机器上启动三个 Nacos 实例为例，来说明 Nacos 的集群部署。需要在 cluster.conf 集群配置文件中添加本地及其不同端口的三个 Nacos IP 信息，这里需要保证保证端口不连续，否则会出现集群异常。下面是我本地配置的三台 Nacos IP 信息：\",\"Nacos 服务\",\"IP\",\"nacos server 8848\",\"192.168.0.107:8848\",\"nacos server 8858\",\"192.168.0.107:8858\",\"nacos server 8868\",\"192.168.0.107:8868\",\"然后，将 Nacos 安装目录复制三份，分别命名为 nacos-8848、nacos-8858、nacos-8868。\",\"最后，需要分别修改这三个 Nacos 的 application.properties 中配置的 Nacos 端口，需要和 Nacos 的 IP 信息 一一对应。\"]},\"43\":{\"h\":\"4.3.2 Nginx 配置\",\"t\":[\"这里以 Windows 版的 Nginx 为例，修改其 conf 目录下的 nginx.conf 文件：\",\"upstream nacos-cluster { server 192.168.0.107:8848; server 192.168.0.107:8858; server 192.168.0.107:8868; } server { listen 80; server_name localhost; location /nacos { proxy_pass http://nacos-cluster; } } \",\"这里的 192.168.0.107 为本机电脑的 IPv4 地址。如果使用 127.0.0.1，Nacos 集群启动后，不仅会注册 127.0.0.1 相应的集群，也会注册 192.168.0.107 相应的集群。\",\"启动 Nginx 后，即可访问 http://localhost:80/nacos 来检查是否代理成功：\",\"image-20230707094529973\",\"可以通过如下配置将服务注册到搭建的 Nacos 集群上：\",\"server: port: 7000 spring: application: name: mall-user cloud: nacos: server-addr: 192.168.0.107:80 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} cluster-name: Shanghai # 集群名字，可以用地区命名,默认的集群名字为 DEFAULT \"]},\"44\":{\"h\":\"4.4 权重策略\",\"t\":[\"在项目的实际部署过程中，不同机器之间存在性能差异，我们希望性能好的机器承担更多的用户请求，但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器性能问题。\",\"SpringCloud Alibaba Nacos 默认提供了名为 NacosLoadBalancer 的负载均衡规则，其负载均衡规则首先会选择同一个集群下的服务，然后再根据服务的权重进行选择。\",\"默认情况下，Nacos 的权重选择是关闭的，仅仅使用轮询策略，可使用如下配置来开启 Nacos 的权重策略：\",\"spring: cloud: loadbalancer: nacos: enabled: true \",\"Nacos 的权重配置可以在 Nacos 控制台进行配置，其值介于 0~1 之间，权重越大则访问频率越高，权重为 0 的 Nacos 实例永远不会被访问。\",\"如果未给服务器设置权重，建议不要使用基于权重的策略，因为如果微服务的权重都相同，相当于随机\",\"我们可以在本地再启动一份 mall-user-server，配置如下：\",\"server: port: 7001 spring: application: name: mall-user-server cloud: nacos: server-addr: 192.168.0.107:80 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} cluster-name: Shanghai \",\"现在就可以在 Nacos 的 Shanghai 集群里看到两个 mall-user-server 实例了\",\"image-20230707100922402\"]},\"45\":{\"h\":\"4.5 临时/持久化实例\",\"t\":[\"注册到 Nacos 的服务实例默认都是临时实例，临时实例每隔一段时间想 Nacos 发送一个心跳请求来告诉 Nacos 自己还活着，和 Eureka 一样，如果心跳停止，则 Nacos 会将其从服务列表中剔除。\",\"对于持久化实例 Nacos 会主动发送请求询问其是否活着，若是死了，则会等待其恢复健康，而并不是剔除。可以通过如下配置将服务注册为持久化实例：\",\"spring: application: name: mall-user cloud: nacos: server-addr: 192.168.0.107:80 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} cluster-name: Shanghai namespace: f354ee02-7bd3-4743-bcd1-b5683b5050a7 ephemeral: false # 注册持久化实例 \",\"这里新建了一个命名空间，这是因为 public 命名空间下的服务是无法被注册为持久化实例的。\"]},\"46\":{\"h\":\"4.6 保护阈值\",\"t\":[\"Nacos 设计了临时实例和持久化实两种服务注册模式，这与 Nacos 的保护阈值息息相关。本质上，保护阈值是⼀个⽐例值（当前服务健康实例数/当前服务总实例数）。\",\"服务消费者从 Nacos 拉去服务时，获取的实例有健康可不健康之分，Nacos 在返回实例时，只会返回健康实例。\",\"但在⾼并发、⼤流量场景会存在⼀定的问题。比如，服务 A 有 100 个实例，其中 98 个实例都处于不健康状态，如果 Nacos 只返回其中的两个健康实例的话。流量洪峰的到来可能会直接打垮这两个服务，进一步产生雪崩效应。\",\"若（当前服务健康实例数/当前服务总实例数）< 保护阈值时，Nacos 会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好。牺牲了⼀些请求，保证了整个系统的可⽤。\",\"所以，对于永久实例来说，即使它们挂掉了，状态为不健康的，但当触发保护阈值时，还是可以起到分流的作用，这就是 Nacos 设计两种服务注册模式的意义。\"]},\"47\":{\"h\":\"5-Nacos 配置中心\"},\"48\":{\"h\":\"5.1 服务配置中心介绍\",\"t\":[\"顾名思义，配置中心就是一个统一存放配置的地方。为什么我们会需要配置中心？\",\"在没有配置中心之前，项目的配置存在如下问题：\",\"采用本地静态配置，无法保证实时性：修改配置不灵活且需要经过较长的测试发布周期，无法尽快通知到客户端，还有些配置对实时性要求很高，比方说主备切换配置或者碰上故障需要修改配置，这时通过传统的静态配置或者重新发布的方式去配置，那么响应速度是非常慢的，业务风险非常大；\",\"易引发生产事故：比如在发布的时候，容易将测试环境的配置带到生产上，引发生产事故；\",\"配置散乱且格式不标准：有的用 properties 格式，有的用 xml 格式，还有的存储在数据库中；\",\"配置缺乏安全审计、版本控制、配置权限控制功能：谁？在什么时间？修改了什么配置？无从追溯，出了问题也无法及时回滚到上一个版本；无法对配置的变更发布进行认证授权，所有人都能修改和发布配置。\",\"而配置中心区别于传统的配置信息分散到系统各个角落的方式，对系统中的配置文件进行集中统一管理，而不需要逐一对单个的服务器进行管理。那这样做有什么好处呢？\",\"通过配置中心，可以使得配置标准化、格式统一化；\",\"当配置信息发生变动时，修改实时生效，无需要重新重启服务器，就能够自动感知相应的变化，并将新的变化统一发送到相应程序上，快速响应变化。\",\"将配置和发布包解藕进一步提升发布的成功率，并为运维的细力度管控、应急处理等提供强有力的支持。\"]},\"49\":{\"h\":\"5.2 搭建 Nacos 配置中心\"},\"50\":{\"h\":\"5.2.1 导入坐标\",\"t\":[\"每个服务都需要使用 Nacos 配置中心，将其坐标导入 mall-services 模块下：\",\"<dependencies> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bootstrap</artifactId> </dependency> </dependencies> \",\"从 SpringCloud 2020 版本后不再默认加载 bootstrap 文件，如果需要加载 bootstrap 文件，则需要手动添加依赖。\"]},\"51\":{\"h\":\"5.2.2 Nacos 配置中心配置\",\"t\":[\"搭建 Nacos 配置中心时，需要将 Nacos 的配置中心信息放到 bootstrap.yml 文件中？\",\"微服务要拉取 Nacos 中管理的配置，并且与本地的 application.yml 配置合并，才能完成项目启动，但本地尚未读取 application.yml 又如何获取 Nacos 配置中心地址呢？\",\"除了 application.yml 配置文件外，SpringBoot 还提供了另一种配置文件 bootstrap.yml 文件，会在 application.yml 之前被读取，而且发生在拉取 Nacos 配置中心信息之前。\",\"以 mall-user-server 服务为例，搭建 Nacos 的配置中心，可以在其 bootstrap.yml 中配置如下信息：\",\"spring: cloud: nacos: server-addr: 192.168.0.107:8848 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} config: server-addr: ${spring.cloud.nacos.server-addr} # nacos 配置中心地址 file-extension: yml # nacos 配置文件格式 prefix: ${spring.application.name} # nacos 配置中心名字 profiles: active: dev application: name: mall-user-server \"]},\"52\":{\"h\":\"5.2.3 在 Nacos 中添加配置信息\",\"t\":[\"点击 Nacos 控制台配置列表右上角的 “+” 号，即可进入新建配置页面，不同服务的配置是通过 Data ID 来区分的，其命名规则为：${prefix}-${spring.profiles.active}.${file-extension}\",\"prefix 默认为 spring.application.name 的值，也可以通过 spring.cloud.nacos.config.prefix 来指定；\",\"spring.profiles.active 即为当前环境对应的 profile，当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}\",\"file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。\",\"如果我们要为 mall-user-server 添加配置信息，则其 Data ID 为：mall-user-server-dev.yml。\",\"既然服务需要拉取 Nacos 配置中心管理的配置再与本地的 application.yml 中的配置进行合并，那么我们就可以只在本地保存 Nacos 拉取和注册需要的配置信息，将其它的配置信息都放到 Nacos，下面是 mall-user-server 的具体配置。\",\"bootstrap.yml\",\"server: port: 7000 spring: application: name: mall-user-server cloud: nacos: server-addr: 192.168.0.107:8848 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} config: server-addr: ${spring.cloud.nacos.server-addr} file-extension: yml prefix: ${spring.application.name} profiles: active: dev \",\"Nacos 配置中心配置\",\"spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc://mysql:localhost:3306/mall_ums username: root password: root \"]},\"53\":{\"h\":\"5.2.4 配置热更新\",\"t\":[\"Nacos 也是支持配置的热更新的，下面以阿里云短信服务来介绍两种 Nacos 热更新的使用方式。\",\"首先，在 mall-user-server 的 Nacos 配置中心上添加阿里云的短信服务配置：\",\"sms: accessKey: LTAI5tMGtKPbL2bCp6zSU4Bz accessKeySecret: baAdNzxAjnIMKU3wroxZLlpAACpy02 signName: gtzk templateCode: SMS_183195440 doMain: dysmsapi.aliyuncs.com regionId: cn-hangzhou \",\"方式一：在 @Value 注入的变量所在类上添加注解 @RefreshScope\",\"@RestController @RefreshScope public class AliSmsController { @Value(\\\"${sms.accessKey}\\\") private String accessKey; @Value(\\\"${sms.accessKeySecret}\\\") private String accessKeySecret; @Value(\\\"${sms.signName}\\\") private String signName; @Value(\\\"${sms.templateCode}\\\") private String templateCode; @GetMapping(\\\"method1\\\") public Map<String,String> method1() { Map<String,String> result = new HashMap<>(); result.put(\\\"accessKey\\\",accessKey); result.put(\\\"accessKeySecret\\\",accessKeySecret); result.put(\\\"signName\\\",signName); result.put(\\\"templateCode\\\",templateCode); return result; } } \",\"方式二：使用 @ConfigurationProperties 注解\",\"使用 @ConfigurationProperties 注解读取配置文件，不需要加 @RefreshScope 注解，就可以实现配置的热更新，一般也是使用这种方式。\",\"首先，使用 @ConfigurationProperties 注解定义 sms 的配置：\",\"@ConfigurationProperties(prefix = \\\"sms\\\") @Component @Data public class AliSmsProperties { private String accessKey; private String accessKeySecret; private String signName; private String templateCode; } \",\"接着使用 @Autowired 注解在使用处注入即可：\",\"@RestController public class UserController { @Autowired private AliSmsProperties aliSmsProperties; @GetMapping(\\\"method2\\\") public Map<String,String> method2() { Map<String,String> result = new HashMap<>(); result.put(\\\"accessKey\\\",aliSmsProperties.getAccessKey()); result.put(\\\"accessKeySecret\\\",aliSmsProperties.getAccessKeySecret()); result.put(\\\"signName\\\",aliSmsProperties.getSignName()); result.put(\\\"templateCode\\\",aliSmsProperties.getTemplateCode()); return result; } } \"]},\"54\":{\"h\":\"5.2.5 多个服务共享配置\",\"t\":[\"在实际开发过程中，如果遇到多个服务用到相同的配置，可以将重复的配置抽取出来，然后在每个服务中引用即可。例如，我们在 Nacos 配置中心新建了一个 common.yml 的配置文件，则可以使用如下方式在每个服务中引用：\",\"server: port: 7000 spring: application: name: mall-user-server cloud: nacos: server-addr: 192.168.0.110:8848 discovery: service: ${spring.application.name} server-addr: ${spring.cloud.nacos.server-addr} config: server-addr: ${spring.cloud.nacos.server-addr} file-extension: yml prefix: ${spring.application.name} shared-configs: # 共享配置列表 - data-id: common.yml profiles: active: dev \"]},\"55\":{\"h\":\"001-SpringBoot概述\"},\"56\":{\"h\":\"1-什么是 SpringBoot？\",\"t\":[\"在介绍 SpringBoot 之前，先来简单介绍下 Spring。\",\"Spring 是诞生于 2002 年的轻量级开源框架，它的出现使得开发者无须开发重量级的 Enterprise JavaBean(EJB)，而是通过控制反转(IOC) 和面向切面编程(AOP) 的思想进行更轻松的企业应用开发，取代了EJB 臃肿、低效的开发模式。可以说已经成为 Java 开发的标准。\",\"虽然 Spring 框架是轻量级的，但它的配置却是重量级的。Spring 的早期版本专注于 XML 配置，发一个程序需要配置各种 XML 配置文件。为了简化开发，在 Spring 2.x 版本开始引入少量的注解，如 @Component、@Service 等。由于支持的注解不是很多且功能尚不完善，所以只能辅助使用。\",\"到了 Spring4.x 版本基本可以脱离 XML 配置文件进行项目开发，多数开发者也逐渐感受到了基于注解开发的便利。与此同时，Pivotal 团队在原有 Spring 框架的基础上通过注解的方式进一步简化了 Spring 框架的使用，并基于Spring 框架开发了全新的 SpringBoot 框架，于 2014 年 4 月正式推出了 Spring Boot 1.0 版本，同时在 2018 年 3 月又推出了 Spring Boot 2.0 版本。Spring Boot 2.x 版本在 Spring Boot 1.x 版本的基础上进行了诸多功能的改进和扩展，同时进行了大量的代码重构，在学习时也是推荐优化后的 SpringBoot2.x。\",\"SpringBoot 框架本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用。\",\"SpringBoot 在设计时遵从约定优先配置的思想来摆脱 Spring 框架中各种复杂的手动配置，同时衍生出了JavaConfig 配置，取代传统 XML 配置文件的 Java 配置类。\",\"SpringBoot 的设计目的简单一句话：简化 Spring 应用的初始搭建以及开发过程。\"]},\"57\":{\"h\":\"2-SpringBoot 的特性\",\"t\":[\"SpringBoot 作为 Java 领域微服务架构的最优落地技术，具有如下特性：\",\"SpringBoot 有如下特性：\",\"快速创建并运行 Spring 应用；\",\"能够使用内嵌的 Web 容器（如 Tomcat、Jetty等）；\",\"提供定制化的启动器 Starter 简化第三方依赖配置，开箱即用；\",\"零代码生成和零 XML 配置，自动配置 Spring；\",\"提供可以直接在生产环境中使用的功能特性，如性能指标、健康检查、属性配置等。\"]},\"58\":{\"h\":\"3-SpringBoot Starter\",\"t\":[\"SpringBoot 在配置上相比 Spring 要简单许多, 其核心在于其 Starter 机制。\",\"SpringBoot 的 Starter 机制抛弃了以前繁杂的配置，将其统一集成进 Starter，使用的时候只需要在 maven 中引入对应的 Starter 依赖即可，SpringBoot 就能自动扫描到要加载的信息并启动相应的默认配置。\",\"SpringBoot 官方提供了很多当前流行的基础功能组件的封装，命名一般以 spring-boot-starter 开头，比如 spring-boot-starter-quartz 定时任务组件和 spring-boot-starter-thymeleaf页面模板引擎等。\",\"另外，由于 SpringBoot 的流行，很多第三方中间件也按照 SpringBoot 的规范提供了针对 SpringBoot 项目的 Starters（启动器），一般以组件名开头，比如 MyBatis 针对 Spring Boot 提供的组件包 mybatis-spring-boot-starter。\"]},\"59\":{\"h\":\"4-什么是\\\"约定优于配置\\\"？\",\"t\":[\"SpringBoot 的核心设计思想是“约定优于配置”，SpringBoot 提供的所有 Starter 都是遵循这一思想实现的。那么，究竟什么是“约定优于配置”呢？\",\"“约定优于配置”也被称作“按约定编程”，是一种软件设计范式，旨在减少软件开发者需要的配置项，这样既能使软件保持简单而又不失灵活性。\",\"约定优于配置是一个简单的概念。系统，类库，框架应该假定合理的默认值，而非要求提供不必要的配置。在大部分情况下，你会发现使用框架提供的默认值会让你的项目开发起来效率更快。\",\"例如在模型中存在一个名为 User 的类，那么对应到数据库会存在一个名为 user 的表，只有在偏离这个约定时才需要做相关的配置。简单来说就是假如你所期待的配置与约定的配置一致，那么就可以不做任何配置，约定不符合期待时才需要对约定进行替换配置。\"]},\"60\":{\"h\":\"002-HelloWorld解析\",\"t\":[\"对于创建 SpringBoot 项目，Spring 官方提供了 Spring Initializr，地址为：https://start.spring.io/ ，我们可以将从 Spring Initializr 创建的 SpringBoot 项目下载下来，导入到 IDEA 中。此外，IDEA 中也集成了 Spring Initializr，通常创建项目都是使用 IDEA 中的 Spring Initializr。\",\"除了使用 Spring Initializr 来创建 SpringBoot 项目，还可以创建一个 Maven 项目，然后手动导入 SpringBoot 项目所需的依赖。下面就以这种方式创建一个 HelloWorld 项目。\"]},\"61\":{\"h\":\"1-HelloWorld 创建\",\"t\":[\"首先，使用 IDEA 创建一个不使用模板的 Maven 项目\",\"image-20230712124721077\",\"然后，在创建的 HelloWorld 项目的 pom 文件中添加 SpringBoot 项目的默认父坐标和 Web 开发所需的 Starter\",\"<!--SpringBoot项目父坐标--> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.13</version> </parent> <!--Web 开发 Starter--> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> </dependencies> \",\"接着，需要为 HelloWorld 项目创建一个引导类，且该引导类需要和项目的最里层的包同级\",\"package com.boot; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class HelloWorldApplication { public static void main(String[] args) { SpringApplication.run(HelloWorldApplication.class,args); } } \",\"下面编写一个 Controller 测试一下吧\",\"package com.boot.controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HelloController { @GetMapping(\\\"/hello\\\") public String hello() { return \\\"Hello World\\\"; } } \",\"项目启动后，浏览器访问 http://localhost:8080/hello 即可看到效果，这里就不贴图了。\"]},\"62\":{\"h\":\"2-项目的入口：引导类\"},\"63\":{\"h\":\"2.1 @SpringBootApplication\",\"t\":[\"引导类作为 SpringBoot 工程的入口，需要被 @SpringBootApplication 注解标注，执行该注解所标注的类的 main 方法，就可以启动 Spring 容器。该注解是一个组合注解，主要由 @SpringBootConfiguration 和 @EnableAutoConfiguration 注解组成。\",\"...... @SpringBootConfiguration @EnableAutoConfiguration ...... public @interface SpringBootApplication {} \"]},\"64\":{\"h\":\"2.2 @EnableAutoConfiguration\",\"t\":[\"这里重点看一下 @EnableAutoConfiguration 注解，该注解表示开启自动配置功能，这个注解也是一个复合注解，主要由@AutoConfigurationPackage 和 @Import({AutoConfigurationImportSelector.class}) 注解组成。\",\"...... @AutoConfigurationPackage @Import({AutoConfigurationImportSelector.class}) public @interface EnableAutoConfiguration { String ENABLED_OVERRIDE_PROPERTY = \\\"spring.boot.enableautoconfiguration\\\"; Class<?>[] exclude() default {}; String[] excludeName() default {}; } \"]},\"65\":{\"h\":\"2.3 @AutoConfigurationPackage\",\"t\":[\"该注解的作用就是将启动类及其所在的 package 作为自动配置的 package 进行管理，也就是说当 SpringBoot应用启动时默认会将引导类所在的 package 作为自动配置的 package\",\"该注解底层使用 @Import({AutoConfigurationPackages.Registrar.class}) 注解向 Spring 容器中导入了 Registrar 类，其中的 registerBeanDefinitions() 方法，就是导入组件实例的具体实现，该方法内\",\"public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { AutoConfigurationPackages.register(registry, (String[])(new PackageImports(metadata)).getPackageNames().toArray(new String[0])); } \",\"其中，new PackageImports(metadata)).getPackageNames().toArray(new String[0]) 返回的就是 引导类所在的包路径，AutoConfigurationPackages.register 方法会将该包下的所有配置信息，都加载到 Spring容器中。这也是引导类为何需要与项目最内层包同级的原因。\"]},\"66\":{\"h\":\"2.4 AutoConfigurationImportSelector\",\"t\":[\"自动配置注解 @EnableAutoConfiguration ，除了有指定自动配置 package 外，还应该具有自动配置的功能，SpringBoot 自动配置的奥秘就藏在 AutoConfigurationImportSelector 类中。\",\"当 SpringBoot 项目启动时，最终会执行 AutoConfigurationImportSelector 中的 selectImports() 方法，该方法的作用有两个：\",\"加载 spring-boot-autoconfigure 下 META-INF/spring.factories 中定义的 SpringBoot 启动所需的必须配置类。\",\"加载spring-boot-autoconfigure 下META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports 中SpringBoot 为 J2EE 各个场景提供的默认配置类。\",\"提示\",\"在低版本的 SpringBoot 的 spring-boot-autoconfigure 的 META-INF 下，只有 spring.factories 文件，所有的自动配置类都在这个文件中。\"]},\"67\":{\"h\":\"3-版本管理：spring-boot-starter-parent\",\"t\":[\"在创建 SpringBoot 工程时需要在 pom.xml 中引入SpringBoot 的父项目。\",\"<parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.7.13</version> </parent> \",\"而 spring-boot-starter-parent 又继承了 spring-boot-dependencies，spring-boot-dependencies 管理着该 SpringBoot 项目的所有依赖版本。也就是说，我们在引入第三方框架坐标时，并不需要指定版本信息，SpringBoot 已经给出了一套最优的组合。\"]},\"68\":{\"h\":\"4-辅助功能：内嵌 Tomcat\",\"t\":[\"前面的 HelloWorld 并没有配置 Tomcat 居然启动了？\",\"这是因为 SpringBoot 的 Web 依赖 spring-boot-starter-web 已经内置了一个 Tomcat，其依赖的坐标 ，如下：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> <version>2.7.13</version> <scope>compile</scope> </dependency> \",\"点击去，可以看到 Tomcat 的内核坐标\",\"<dependency> <groupId>org.apache.tomcat.embed</groupId> <artifactId>tomcat-embed-core</artifactId> <version>9.0.76</version> <scope>compile</scope> <exclusions> <exclusion> <artifactId>tomcat-annotations-api</artifactId> <groupId>org.apache.tomcat</groupId> </exclusion> </exclusions> </dependency> \",\"在之前都是服务器启动起来，将写好的程序扔到服务器里；现在怎么是把服务器扔到程序里？\",\"可以这样理解：\",\"Tomcat 是一个 Java 程序，里面包含很多的 jar 包，其运行也是符合 Java 程序运行原理的，而 Java 程序是靠对象运行的，如果将 Tomcat 的执行过程抽取为一个对象，在交由 Spring 容器管理，就可以实现 \\\"将服务器扔到程序里\\\"\",\"既然 SpringBoot 应用可以内嵌 Tomcat 服务器，那是不是还可以使用其它服务器呢？答案是肯定的。SpringBoot 内置了如下三种服务器：\",\"tomcat（默认）：应用面广，负载了若干较重的组件。\",\"jetty：更轻量级，但负载性能远不及 Tomcat。\",\"undertow：负载性能比 Tomcat 略胜一筹。\",\"而更换默认的 Tomcat 服务器也很简单，只需要在 spring-boot-starter-web 中排除 Tomcat 的 Starter 坐标，在引入其他服务器的 Starter 坐标即可。\",\"下面是将 Tomcat 服务器更换为 Jetty 服务器的例子：\",\"<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> <exclusions> <!--排除Tomcat Starter--> <exclusion> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-tomcat</artifactId> </exclusion> </exclusions> </dependency> <!--引入Jetty Starter--> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jetty</artifactId> </dependency> </dependencies> \"]},\"69\":{\"h\":\"003-SpringBoot配置文件\",\"t\":[\"在使用 Spring Initializr 构建完 SpringBoot 项目后，会在 resources 目录下生成一个默认的全局配置文件 application.properties，在这个配置文件进行的修改，会影响 SpringBoot 底层的自动配置。\",\"SpringBoot 的配置文件名是固定的，必须是 application.properties，也可以是 application.yml，这两个配置文件的本质是一样的，只是语法不同。相对于 properties 来讲，YML 更加年轻，层级也更加分明。\",\"下面是 application.yml 配置文件语法的具体示例：\",\"user: age: 25 name: zhangsan active: true created-date: 2018/03/31 16:54:30 address: {k1: v1,k2: v2} hobbies: - one - two - three \",\"YML 是一种新式的格式，层级鲜明，个人比较喜欢使用的一种格式，注意如下：\",\"字符串可以不加引号，若加双引号则输出特殊字符，若不加或加单引号则转义特殊字符\",\"数组类型，短横线后面要有空格；对象类型，冒号后面要有空格\",\"YAML是以空格缩进的程度来控制层级关系，但不能用 tab 键代替空格，大小写敏感\"]},\"70\":{\"h\":\"1-配置随机值\",\"t\":[\"在⼀些情况下，有些参数我们需要希望它不是⼀个固定的值，⽐如密钥、服务端⼝等。SpringBoot 内部提供了一个 random.* 属性，专门用于生成随机值，可以通过 ${random.*} 来使用，下面是对应属性的描述：\",\"属性\",\"描述\",\"random.int\",\"随机产生正负的整数\",\"random.int(max)\",\"随机产生 [0, max) 区间的整数\",\"random.int(min,max)\",\"随机产生 [min, max) 区间的整数\",\"random.long\",\"随机产生正负的长整数\",\"random.long(max)\",\"随机产生 [0, max) 区间的长整数\",\"random.long(min,max)\",\"随机产生 [min, max) 区间的长整数\",\"random.uuid\",\"产生 UUID 字符串（含‘-‘字符）\",\"random.*\",\"* 表示除上面列举之外的其它字符，用于随机产生 32 位字符串\"]},\"71\":{\"h\":\"2-配置文件优先级\",\"t\":[\"理论上讲 SpringBoot 可以同时存在这两种格式的配置文件，但如果 properties 与 yml 配置文件中出现了相同的配置，那么会以 properties 配置文件中的配置为主。\",\"在实际业务中，通常只会采取一种统一的配置文件格式，这样可以更好的维护项目\",\"SpringBoot 项目在启动时，不仅仅加载 resources 目录下的配置文件，以下位置的配置也会被加载：\",\"路径\",\"说明\",\"优先级\",\"./config\",\"项目根目录下的config目录\",\"1\",\"./\",\"项目根目录\",\"2\",\"classpath:/config\",\"资源目录下的 config 目录\",\"3\",\"classpath:/\",\"资源目录的根目录\",\"4\",\"有的时候，配置信息是我们无法在开发时就能确定的，比如数据库配置，加密密钥配置等。这时候就需要把配置文件放到外边，让用户自定义配置部署。\",\"只需要将配置文件放到 SpringBoot 打包的 jar 同级目录下或 config 目录下，程序启动时就会自动读取该配置文件\",\"提示\",\"除了 application.xxx 类型的配置文件，SpringBoot 项目启动时还会加载名为 bootstrap.xxx 的配置文件。bootstarp 文件用于配置系统级别的参数，如：程序的端口号、配置中心地址等；而 application 文件则是用于配置应用级别的参数，如：日志级别、一些开关参数。\"]},\"72\":{\"h\":\"3-如何从配置文件中取值？\",\"t\":[\"一切的配置都是为了取值，SpringBoot 也是提供了几种取值的方式，下面一一介绍。\"]},\"73\":{\"h\":\"3.1 @ConfigurationProperties\",\"t\":[\"@ConfigurationProperties 注解标注在实体类上，用于读取一组配置，可使用其 prefix 属性指定配置文件中属性的前缀，如：\",\"@Component @Data @ConfigurationProperties(prefix = \\\"profile\\\") public class Profile { private String name; private String desc; } \",\"此时，IDEA 中应该会出现如下提示：\",\"image-20230715142231163\",\"什么意思呢？\",\"其实 SpringBoot 底层为各种场景的配置都提供了一个配置元数据文件，供 IDE 使用。在添加或修改 application.yml 配置文件属性时进行提示。\",\"而我们自定义的属性是不具备自动提示的功能的，如果你想使用此功能，可以在项目的 pom 文件中添加如下依赖坐标：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> <optional>true</optional> </dependency> \",\"这个依赖只是为了我们开发方便，和实际的业务无关，所以不需要出现在项目打包后的 jar 包中，因此，我们可以通过如下插件在项目打包时，排除掉这个依赖。\",\"<build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <configuration> <excludes> <exclude> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-configuration-processor</artifactId> </exclude> </excludes> </configuration> </plugin> </plugins> </build> \"]},\"74\":{\"h\":\"3.2 @Value\",\"t\":[\"@Value 注解可以读取单个配置项，示例代码如下\",\"@RestController public class HelloController { @Value(\\\"${profile.name}\\\") private String name; @GetMapping(\\\"/hello\\\") public String hello() { return name; } } \"]},\"75\":{\"h\":\"4-如何从自定义配置文件中取值？\",\"t\":[\"SpringBoot 在启动的时候会自动加载 application.xxx 和 bootsrap.xxx ，但是为了区分，有时候需要自定义一个配置文件，那么如何从自定义的配置文件中取值呢？此时就需要配合 @PropertySource 这个注解使用了\",\"只需要在配置类上标注 @PropertySource 并指定你自定义的配置文件即可完成.\",\"加入 resources 目录下有一个 java-info.properties 文件，内容如下：\",\"java.version=11 java.framework=SpringBoot \",\"在一个 JavaBean 中可以通过如下代码读取 user.properties 文件中的配置信息：\",\"@Component @Data @PropertySource(value = \\\"classpath:user.properties\\\",encoding = \\\"UTF-8\\\") public class JavaInfo { @Value(\\\"${java.version}\\\") private String version; @Value(\\\"${java.framework}\\\") private String framework; } \",\"@PropertySource 注解只是用于加载自定义配置文件的配置信息，读取配置信息还是需要配合 @Value 或 @ConfigurationProperties 注解来使用。\",\"此外，@PropertySource 注解是不支持加载 YML 文件的，怎么解决呢？\",\"@PropertySource 注解有一个属性 factory ，默认值是 PropertySourceFactory.class ，这个就是用来加载 properties 格式的配置文件，我们可以自定义一个用来加载 YML 格式的配置文件，如下：\",\"public class YMLPropertyFactory implements PropertySourceFactory { @Override public PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException { Properties propertiesFromYaml = loadYamlIntoProperties(resource); String sourceName = name != null ? name : resource.getResource().getFilename(); assert sourceName != null; return new PropertiesPropertySource(sourceName, propertiesFromYaml); } private Properties loadYamlIntoProperties(EncodedResource resource) throws FileNotFoundException { try { YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean(); factory.setResources(resource.getResource()); factory.afterPropertiesSet(); return factory.getObject(); } catch (IllegalStateException e) { // for ignoreResourceNotFound Throwable cause = e.getCause(); if (cause instanceof FileNotFoundException) throw (FileNotFoundException) e.getCause(); throw e; } } } \",\"此时，只需要将 factory 属性值指定为 YMLPropertyFactory 即可：\",\"@Component @Data @PropertySource(value = \\\"classpath:user.properties\\\",factory=YMLPropertyFactory.class) public class JavaInfo { @Value(\\\"${java.version}\\\") private String version; @Value(\\\"${java.framework}\\\") private String framework; } \"]},\"76\":{\"h\":\"004-SpringBoot开发Web入门\",\"t\":[\"SpringBoot 对应 Web 开发的 Starter 只有一个，上一篇创建 HelloWorld 项目时已经使用了：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> \",\"看似只是引入了一个依赖，但是在其实内部引入了 Spring、Spring MVC 的相关依赖，SpringBoot的启动器就是这么神奇！！！\"]},\"77\":{\"h\":\"1-开发一个接口\",\"t\":[\"假设这么一个需求，需要根据订单 ID，查询订单信息，该如何写接口呢？其实和 Spring MVC 的开发步骤一致，需要先定义一个 Controller，在使用 Spring MVC 提供的各种注解将 Controller 中的方法定义成接口，代码如下：\",\"@RestController @RequestMapping(\\\"/order\\\") public class OrderController { @GetMapping(\\\"{id}\\\") public Object getByOrderId(@PathVariable Long id) { Order order = new Order(); order.setId(id); order.setTitle(\\\"红米K50\\\"); order.setPrice(\\\"2999\\\"); order.setCreateTime(new Date()); return order; } } \",\"项目启动后，访问 http://localhost:8080/user/1 即可得到如下结果：\",\"{ \\\"id\\\": 1, \\\"title\\\": \\\"红米K50\\\", \\\"price\\\": \\\"2999\\\", \\\"createTime\\\": \\\"2023-07-12T10:02:19.548+00:00\\\" } \"]},\"78\":{\"h\":\"2-Spring MVC 配置接口\",\"t\":[\"在 SpringBoot 中配置 Spring MVC 有两种方法，第一种是实现 WebMvcConfigurer 接口，第二种是继承 WebMvcConfigurationSupport 类，那么这两种实现方式有什么区别呢？\",\"其实在 Spring 5.0 前，配置类需要继承 WebMvcConfigurerAdapter，如果加 @EnableWebMvc 注解，则为全面接管 Spring MVC，否则为自定义扩展配置。\",\"而在 Spring 5.0 之后，全面接管 Spring MVC，需要继承 WebMvcConfigurationSupport，而自定义扩展配置则需要实现WebMvcConfigurer接口。\",\"重写 WebMvcConfigurer接口中的不同方法可以实现对 Spring MVC 的个性化定制，下表展示了该接口中可以实现的方法及其功能。\",\"方法名称\",\"功能描述\",\"configurePathMatch\",\"配置请求的 url 和 handler 的映射关系\",\"configureContentNegotiation\",\"内容协商配置，可以实现同一URI指向的资源提供不同的展现形式\",\"configureAsyncSupport\",\"配置异步请求，可以设置超时时间和异步任务执行器\",\"configureDefaultServletHanding\",\"配置默认的静态资源处理器\",\"addResourceHandlers\",\"添加自定义静态资源处理\",\"addFormatters\",\"添加自定义的 Converter 和 Formatter\",\"addCorsMappings\",\"添加跨域相关参数\",\"addInterceptors\",\"添加自定义拦截器\",\"addViewControllers\",\"添加自定义视图控制器\",\"configureViewResolvers\",\"配置视图解析器\",\"addArgumentResolvers\",\"添加自定义方法参数处理器\",\"addReturnValueHandlers\",\"配置统一返回值的处理器\",\"configureMessageConverters\",\"配置消息转换器\",\"extendMessageConverters\",\"拓展消息转换器\",\"configureHandlerExceptionResolvers\",\"配置异常处理器\",\"extendHandlerExceptionResolvers\",\"拓展异常处理器\",\"为什么 实现 `WebMvcConfigurer` 接口 取代了 继承 `WebMvcConfigurerAdapter` 的方式？\",\"在 Java8 推出接口的 default 方法后，WebMvcConfigurerAdapter 中的空实现可以直接在 WebMvcConfigurer 中定义为 default 方法，从而实现 WebMvcConfigurer接口也能实现相同的功能。\"]},\"79\":{\"h\":\"3-JSON格式化\",\"t\":[\"在前后端分离的项目中大部分的接口基本都是返回 JSON 字符串，在某些特殊场景下需要对返回的 JSON 进一步的定制，如日期的格式、NULL 值是否返回等。\",\"SpringBoot 默认是使用 Jackson 对返回结果进行处理，在引入 Web 启动器的时候会引入相关的依赖，如下图：\",\"image-20230712190427623\",\"Jackson 的 自动配置类是 JacksonAutoConfiguration，我们可以选择在配置文件中修改 JackSon 的配置，也可以在配置类中修改。\"]},\"80\":{\"h\":\"3.1 日期格式化\",\"t\":[\"上面的例子中日期的返回结果其实是一个时间戳，那么我们需要返回格式为 yyyy-MM-dd HH:mm:ss，则可以在 application.yml 配置文件中进行如下配置：\",\"spring: jackson: date-format: yyyy-MM-dd HH:mm:ss #日期格式化 time-zone: GMT+8 #时区 \",\"也可以在实体属性上使用 @JsonFormat 注解来配置日期格式化，但这属于局部配置，仅仅在其标注的实体属性上生效：\",\"@JsonFormat(pattern = \\\"yyyy/MM/dd HH:mm:ss\\\",timezone = \\\"GMT+8\\\") private Date createTime; \"]},\"81\":{\"h\":\"3.2 拓展消息转换器\",\"t\":[\"在某些场景下 Spring MVC 的默认消息转换器并不能满足实际需求，如：\",\"在分布式场景下，数据库 id 都是采用雪花算法生成，那么在传输给前端的时候就会产生精度丢失的问题，前端并没有 Long 类型这一说法。\",\"JackSon 并不支持 Java8 推出的新的日期和时间 API 的转换。\",\"Spring MVC 中默认使用的消息转换器是 MappingJackson2HttpMessageConverter，我们可以对其功能进行拓展，代码如下：\",\"public class JacksonObjectMapper extends ObjectMapper { public static final String DEFAULT_DATE_FORMAT = \\\"yyyy-MM-dd\\\"; public static final String DEFAULT_DATE_TIME_FORMAT = \\\"yyyy-MM-dd HH:mm:ss\\\"; public static final String DEFAULT_TIME_FORMAT = \\\"HH:mm:ss\\\"; public static final String DEFAULT_TIME_ZONE = \\\"GMT+8\\\"; public JacksonObjectMapper() { super(); //收到未知属性时不报异常 this.configure(FAIL_ON_UNKNOWN_PROPERTIES, false); //反序列化时，属性不存在的兼容处理 this.getDeserializationConfig() .withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES); // 设置 Date 类型的 JSON 格式化 this.setTimeZone(TimeZone.getTimeZone(DEFAULT_TIME_ZONE)); this.setDateFormat(new SimpleDateFormat(DEFAULT_DATE_TIME_FORMAT)); SimpleModule simpleModule = new SimpleModule() .addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT))) .addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT))) .addDeserializer(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT))) .addSerializer(BigInteger.class, ToStringSerializer.instance) .addSerializer(Long.class, ToStringSerializer.instance) .addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT))) .addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT))) .addSerializer(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT))); //注册功能模块 例如，可以添加自定义序列化器和反序列化器 this.registerModule(simpleModule); } } \",\"接着需要在 Spring MVC 的配置文件中将上面创建的 JacksonObjectMapper 添加到 Spring MVC 的消息转换器中。\",\"@Configuration public class WebMvcConfig implements WebMvcConfigurer { @Override public void extendMessageConverters(List<HttpMessageConverter<?>> converters) { //创建消息转换器对象 MappingJackson2HttpMessageConverter messageConverter = new MappingJackson2HttpMessageConverter(); //设置对象转换器，底层使用Jackson将Java对象转为json messageConverter.setObjectMapper(new JacksonObjectMapper()); //将上面的消息转换器对象追加到mvc框架的转换器集合中 converters.add(0,messageConverter); } } \"]},\"82\":{\"h\":\"4-处理静态资源\"},\"83\":{\"h\":\"4.1 默认的静态资源目录\",\"t\":[\"SpringBoot 对 Web 开发的支持，主要是基于 Spring MVC 模块来实现的，而 Spring MVC 主要是利用ResourceHttpRequestHandler 来处理静态内容的，默认情况下，SpringBoot 会按照如下顺序将 / 下的所有资源访问映射到以下目录：\",\"classpath:/META-INF/resources/\",\"classpath:/resources/\",\"classpath/static/\",\"classpath/public/\",\"依据上面的规则可知，若在 /static/ 和 /public/ 目录下同时存在名为 img.png 的图片，则会优先加载 /static 下面的 img.png。\",\"对于默认的静态资源目录下的资源，我们可以直接通过 url 地址访问，例如 http://localhost:8080/static/img.png，类似于以前 web 项目中的 webapp 目录。\"]},\"84\":{\"h\":\"4.2 WebJars 映射\",\"t\":[\"为了让页面更加美观，让用户拥有更好的体验，Web 应用通常会使用大量的 JS 和 CSS，例如 jQuery、Bootstrap等等。对于 Java web 的项目来说，可以将这些前端资源放到 webapp 目录下进行管理，而对于 SpringBoot 项目来说并不存在 webapp 目录，如果将这些前端框架都放在默认的静态资源目录下难免造成管理的混乱，且很容易造成版本冲突，SpringBoot 提供了一种像后端依赖管理的方式 WebJars 来管理诸多的前端框架。\",\"顾名思义，我们只需要在 WebJars 官网找到所需前端框架对应的 pom 依赖，并将其导入项目即可，例如 jQuery的坐标如下：\",\"<dependency> <groupId>org.webjars</groupId> <artifactId>jquery</artifactId> <version>3.6.3</version> </dependency> \",\"在浏览器中输入 http://localhost:8080/webjars/jquery/3.6.3/jquery.js 即可访问 jQuery。在 HTML页面中也可以直接引用。\"]},\"85\":{\"h\":\"4.3 自定义静态资源映射\",\"t\":[\"除了将静态资源放到默认的资源目录下，SpringBoot 还支持自定义静态资源的存放路径。那么什么情况下需要自定义静态资源的存放路径呢？\",\"对于文件上传功能来说如果将上传的文件放到那些默认的资源目录下，当项目被打成 jar 时将文件上传到 jar 中的效率是非常低的。这时我们就可以自定义静态资源的存放位置，将静态资源的访问映射到磁盘的某个目录里。\",\"还是需要实现 WebMvcConfigurer 接口，并重写其中的 addResourceHandlers() 方法。\",\"如上图所示我在电脑的 D 盘的 root 目录下放了一张图片，实现的 WebMvcConfigurer 的如下：\",\"@Configuration public class WebMvcConfig implements WebMvcConfigurer { @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"/upload/**\\\") .addResourceLocations(\\\"file:D:/root/\\\"); } } \",\"此时，在浏览器访问 http://localhost:8080/upload/mv.jpg 就可以看到这张图片。\"]},\"86\":{\"h\":\"4-拦截器、过滤器、监听器\"},\"87\":{\"h\":\"4.1 拦截器\",\"t\":[\"拦截器（Interceptor）是一种特殊的组件，它可以在请求处理的过程中对请求和响应进行拦截和处理。拦截器可以在请求到达目标处理器之前、处理器处理请求之后以及视图渲染之前执行特定的操作。拦截器的主要目的是在不修改原有代码的情况下，实现对请求和响应的统一处理。\"]},\"88\":{\"h\":\"4.1.1 拦截器的功能\",\"t\":[\"拦截器（Interceptor）可以实现如下功能：\",\"权限控制：拦截器可以在请求到达处理器之前进行权限验证，从而实现对不同用户的访问控制。\",\"日志记录：拦截器可以在请求处理过程中记录请求和响应的详细信息，便于后期分析和调试。\",\"接口幂等性校验：拦截器可以在请求到达处理器之前进行幂等性校验，防止重复提交。\",\"数据校验：拦截器可以在请求到达处理器之前对请求数据进行校验，确保数据的合法性。\",\"缓存处理：拦截器可以在请求处理之后对响应数据进行缓存，提高系统性能。\"]},\"89\":{\"h\":\"4.1.2 SpringBoot 实现拦截器\",\"t\":[\"配置一个拦截器非常简单，只需要实现 HandlerInterceptor 这个接口即可，该接口有三个方法可以实现：\",\"preHandle()：该方法会在控制器方法前执行，当其返回值为 true 时，表示继续向下执行；当其返回值为 false 时，会中断后续的所有操作（包括调用下一个拦截器和控制器类中的方法执行等）；\",\"postHandle()：该方法会在控制器方法调用之后，且解析视图之前执行。可以通过此方法对请求域中的模型和视图做出进一步的修改；\",\"afterCompletion()：该方法会在整个请求完成，即视图渲染结束之后执行。可以通过此方法实现一些资源清理、记录日志信息等工作。\",\"想要拦截器生效，需要在Spring MVC的配置接口WebMvcConfigurer的实现类中重写addInterceptors() 方法进行拦截配置。\"]},\"90\":{\"h\":\"4.1.3 Token 令牌校验\",\"t\":[\"举个例子，下项目开发时，很多资源都是需要登录后才可以访问的，如果在每个请求控制器的方法中对 Token 进行校验也是不合理的，这时就可以使用拦截器拦截需要 Token 校验的请求，并在其中校验 Token 的有效性以及合法性。\",\"首先，实现一个 Token 校验的拦截器：\",\"public class TokenVerifyInterceptor implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { // 判断请求的路径对应的处理方法是否为 Controller // 静态资源请求的 handler 类型是 RequestResourceHandler if (!(handler instanceof HandlerMethod)) { return true; } // 获取请求头中的 token String token = request.getHeader(\\\"token\\\"); // token 不存在,向前端给出提示 if (!StringUtils.hasText(token)) { Map<String,Object> result = new HashMap<>(); result.put(\\\"code\\\",401); result.put(\\\"message\\\",\\\"未登录\\\"); response.setContentType(\\\"application/json;charset=utf-8\\\"); response.getWriter().println(new JsonMapper().writeValueAsString(result)); return false; } // 判断 token 是否合法 if (!TokenUtil.checkToken(token)) { Map<String,Object> result = new HashMap<>(); result.put(\\\"code\\\",401); result.put(\\\"message\\\",\\\"登录过期\\\"); response.setContentType(\\\"application/json;charset=utf-8\\\"); response.getWriter().println(new JsonMapper().writeValueAsString(result)); return false; } return true; } } \",\"接着需要将实现的 Token 拦截器添加到 SpringBoot 中\",\"@Configuration public class WebMvcConfig implements WebMvcConfigurer { private static final List<String> whiteList = Arrays.asList(\\\"/login\\\",\\\"verifyCode\\\"); @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(new TokenVerifyInterceptor()) .addPathPatterns(\\\"/**\\\") // 设置拦截路径 .excludePathPatterns(whiteList); // 排除不需要拦截的路径 } } \"]},\"91\":{\"h\":\"4.2 过滤器\"},\"92\":{\"h\":\"4.1.1 什么是过滤器？\",\"t\":[\"Filter 也称之为过滤器，它是 Servlet 技术中最实用的技术，WEB 开发人员通过 Filter 技术，对 web 服务器管理的所有web资源：例如 JSP，Servlet，静态图片文件或静态 HTML 文件进行拦截，从而实现一些特殊功能。例如实现 URL 级别的权限控制 、 过滤敏感词汇 、 压缩响应信息 等一些高级功能。\",\"配置一个过滤器很简单，只需要实现 javax.servlet.Filter 接口即可，该接口有三个方法可以实现：init()、doFilter()、destroy() 分别对应着 Filter 的生命周期。其中 init() 和 destroy() 都有默认实现，我们只需要实现处理过滤器逻辑的 doFilter() 方法即可。\"]},\"93\":{\"h\":\"4.1.2 SpringBoot 实现过滤器\",\"t\":[\"在 SpringBoot 中要想使过滤器生效，通常有如下两种方法：\",\"使用 FilterRegistrationBean （推荐使用）\",\"SpringBoot 提供了 FilterRegistrationBean 用于注册 Filter，下面是注册 Filter 的例子：\",\"@Configuration public class FilterConfig { @Autowired private Filter1 filter1; @Autowired private Filter2 filter2; @Bean public FilterRegistrationBean filter1() { FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(filter1); registration.addUrlPatterns(\\\"/*\\\"); registration.setName(\\\"filter1\\\"); //设置优先级别 registration.setOrder(1); return registration; } @Bean public FilterRegistrationBean filter2() { FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(filter2); registration.addUrlPatterns(\\\"/*\\\"); registration.setName(\\\"filter2\\\"); //设置优先级别 registration.setOrder(2); return registration; } } \",\"提示\",\"设置的优先级决定了 Filter 的执行顺序\",\"使用 @WebFilter + @ServletComponentScan 注解\",\"@WebFilter 是 Servlet3.0 的一个注解，用于标注一个 Filter，SpringBoot 也是支持这种方式，只需要在自定义的 Filter 上标注该注解即可，如下：\",\"@WebFilter(filterName = \\\"tokenFilter\\\",urlPatterns = {\\\"/*\\\"}) public class TokenFilter implements Filter {...} \",\"要想 @WebFilter 注解生效，需要在 SpringBoot 项目的引导类上标注另外一个注解 @ServletComponentScan\",\"@ServletComponentScan(\\\"com.boot.filter\\\") @SpringBootApplication public class HelloWorldApplication {...} \",\"提示\",\"@ServletComponentScan 注解不仅可以扫描 Filter 组件，还可以扫描其他的 Servlet 组件，如扫描标注了 @WebLintener 注解的监听器。\"]},\"94\":{\"h\":\"4.3 监听器\"},\"95\":{\"h\":\"4.3.1 什么是监听器？\",\"t\":[\"监听器也叫 Listener，也是一种 Servlet 技术，可以用于监听 Web 应用中 ServletContext、HttpSession 和ServletRequest 等域对象的创建和销毁事件。常用于统计在线人数和在线用户、系统加载时进行信息初始化、统计网站的访问量等。\",\"Servlet 提供的监听器分为如下三种类型：\",\"监听域对象生命周期\",\"ServletContextListener：监听 ServletContext 实例的创建与销毁\",\"HttpSessionListener：监听 HttpSession 实例的创建与销毁\",\"ServletRequestListener：监听 ServletRequest 实例的创建与销毁\",\"监听域对象中属性变化\",\"ServletContextAttributeListener：监听 ServletContext 实例中属性的创建、删除、修改操作\",\"HttpSessionAttributeListener：监听 HttpSession 实例中属性的创建、删除、修改操作\",\"ServletRequestAttributeListener：监听 ServletRequest 实例中属性的创建、删除、修改操作\",\"监听Session内的对象\",\"HttpSessionBindingListener：和 HttpSessionAttributeListener 类似\",\"HttpSessionActivationListener：监听 HttpSession 中属性的活化和钝化\",\"活化和钝化\",\"钝化：当服务关闭时，会将 session 中的内容保存在硬盘上\",\"活化：当服务开启时，会将 session 中的内容重新加载到内存\"]},\"96\":{\"h\":\"4.3.2 实现 Servlet 的 Listener\",\"t\":[\"和 Filter 一样 SpringBoot 也提供了一个名为 ServletListenerRegistrationBean 的 Bean 用于注册 Lisenter。此外，也可以使用 @WebListener 注解配合 @ServletComponentScan 注解来实现。\",\"下面写一个统计在线人数的案例来演示 Listener 的使用\",\"思路分析\",\"在浏览器发来请求的时候，利用 ServletRequestListener 进行监听，获取 sessionId\",\"判断 sessionId 是否存在，不存在就可构造 User 并放入到 List 中，在页面获取\",\"在 session 销毁的时候，将对应的 sessionId 的 User 从 List 中移除\",\"创建统计在线用户人数的监听器\",\"public class OnlineListener implements HttpSessionListener, ServletRequestListener { // 在线用户人数 private int onlineNumber = 0; @Override public void sessionCreated(HttpSessionEvent se) { onlineNumber ++; se.getSession().getServletContext().setAttribute(\\\"onlineNumber\\\", onlineNumber); } @Override public void sessionDestroyed(HttpSessionEvent se) { // 维护在线人数 onlineNumber--; se.getSession().getServletContext().setAttribute(\\\"onlineNumber\\\", onlineNumber); // 维护在线用户列表 List<OnlineUser> userList = (List<OnlineUser>) se .getSession() .getServletContext() .getAttribute(\\\"userList\\\"); // 根据 sessionId 获取在线用户 OnlineUser user = SessionUtil.getUserBySessionId(userList, se.getSession().getId()); if (user != null) { userList.remove(user); } se.getSession().getServletContext().setAttribute(\\\"userList\\\",userList); } } \",\"创建统计在线用户列表的 Listener\",\"public class OnlineRequestListener implements ServletRequestListener { @Override public void requestInitialized(ServletRequestEvent sre) { List<OnlineUser> userList = (ArrayList<OnlineUser>) sre.getServletContext().getAttribute(\\\"userList\\\"); if(userList == null){ userList = new ArrayList<>(); } // 获取 sessionId ServletRequest servletRequest = sre.getServletRequest(); HttpServletRequest request = (HttpServletRequest) servletRequest; String sessionId = request.getSession().getId(); // 根据 sessionId 获取 OnlineUser OnlineUser user = SessionUtil.getUserBySessionId(userList, sessionId); // 该用户不存在，即该用户不是在线状态，向在线用户列表中添加用户信息 if (user == null) { user = new OnlineUser(); user.setSessionId(sessionId); user.setIP(request.getRemoteAddr()); userList.add(user); } // 重新设置在线用户列表 sre.getServletContext().setAttribute(\\\"userList\\\", userList); } } \",\"注册创建的监听器\",\"上面创建的监听器并没有添加 @WebListener 注解，这里使用 ServletListenerRegistrationBean 进行注册，代码如下：\",\"@Configuration public class ListenerConfig { @Bean public ServletListenerRegistrationBean<OnlineSessionListener> onlineSessionListener() { ServletListenerRegistrationBean<OnlineSessionListener> registrationBean = new ServletListenerRegistrationBean<>(); registrationBean.setListener(new OnlineSessionListener()); return registrationBean; } @Bean public ServletListenerRegistrationBean<OnlineRequestListener> onlineRequestListener() { ServletListenerRegistrationBean<OnlineRequestListener> registrationBean = new ServletListenerRegistrationBean<>(); registrationBean.setListener(new OnlineRequestListener()); return registrationBean; } } \",\"在页面中获取在线用户信息\",\"如果使用的是 thymeleaf 模板引擎，可以使用如下方式获取：\",\"<!DOCTYPE html> <html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>Title</title> </head> <body> 在线人数: <span th:text=\\\"${application.onlineNumber}\\\"></span><br/> 在线用户: <span th:each=\\\"user:${application.userList}\\\"> sessionId: <span th:text=\\\"${user.sessionId}\\\"></span>, IP: <span th:text=\\\"${user.IP}\\\"></span> </span> </body> </html> \"]},\"97\":{\"h\":\"4.4 SpringBoot 的 Lisenter\",\"t\":[\"SpringBoot 不仅实现了 Servlet 的监听器，还实现了自己的一套监听机制，SpringBoot 是如何实现监听的呢？\",\"Spring 监听器包含以下模块：\",\"发布器（ApplicationEventPublisher）：用来在业务逻辑中发布事件。\",\"广播器（ApplicationEventMulticaster）：用来把发布的事件广播给支持当前事件的监听器。\",\"监听器（ApplicationListener）：用来监听自己感兴趣的事件，当程序发布事件时，可以执行一些相应的业务逻辑。ApplicationListener 监听器监听到事件发布后执行 onApplicationEvent方法。\",\"事件（ApplicationEvent）：用来定义事件。\",\"提示\",\"SpringBoot 项目启动时会扫描项目中的监听器并加载到广播器中。SpringBoot 识别项目中的监听器规则是：@EventListener 注解标注的方法，ApplicationListener 接口的实现类。\"]},\"98\":{\"h\":\"4.4.1 Listener 执行流程\",\"t\":[\"下面的图描述了从 ApplicationEventPublisher 事件发布器发布事件到事件监听器加载的过程。\",\"image-20230715102951627\"]},\"99\":{\"h\":\"4.4.2 实现 Listener\",\"t\":[\"SpringBoot 实现 Lintener 有基于 ApplicationListener 接口和基于 @EventListener 注解两种方法。无论哪种实现方式都只需要三步即可，步骤如下：\",\"定义事件\",\"定义监听器\",\"发布事件\",\"下面演示基于 ApplicationListener 接口实现的监听器：\",\"第一步：定义用户注册事件\",\"public class UserRegisterEvent extends ApplicationEvent { private User user; public UserRegisterEvent(Object source, User user) { super(source); this.user = user; } public User getUser() { return user; } } \",\"第二步：定义事件监听器\",\"public class UserRegisterListener implements ApplicationListener<UserRegisterEvent> { @Override public void onApplicationEvent(UserRegisterEvent event) { User user = event.getUser(); // 处理用户注册事件，可以向用户发送邮件 } } \",\"第三步：通过 ApplicationEventPublisher 发布事件\",\"@Service public class UserService { @Autowired private ApplicationEventPublisher publisher; public void registerUser(User user) { // 处理注册逻辑 // ...... // 发布用户注册事件 publisher.publishEvent(new UserRegisterEvent(this,user)); } } \"]},\"100\":{\"h\":\"005-SpringBoot日志管理\"},\"101\":{\"h\":\"1- 为什么要用日志？\",\"t\":[\"日志就是记录发生了什么。为啥要记录发生了什么呢？想象⼀下，如果程序报错了，不让你打开控制台看⽇志，那么你能找到报错的原因吗？因此我们需要记录程序的行为，通过这些行为能让我们更好的发现和定位错误所在位置。\",\"除了发现和定位问题之外，还可以通过⽇志实现以下功能：\",\"记录⽤户登录⽇志，⽅便分析⽤户是正常登录还是恶意破解⽤户。\",\"记录系统的操作⽇志，⽅便数据恢复和定位操作⼈。\",\"记录程序的执⾏时间，⽅便为以后优化程序提供数据⽀持。\"]},\"102\":{\"h\":\"2-SpringBoot默认日志管理\"},\"103\":{\"h\":\"2.1 日志分类\",\"t\":[\"Java 中的日志框架主要分为两大类：\",\"日志门面：日志门面定义了一组日志的接口规范，它并不提供底层具体的实现逻辑。Apache Commons Logging 和 Slf4j 就属于这一类。\",\"日志实现：日志实现是日志具体的实现，包括日志级别控制、日志打印格式、日志输出形式（输出到数据库、输出到文件、输出到控制台等）。Log4j、Log4j2、Logback 以及 Java Util Logging 则属于这一类。\",\"将日志门面和日志实现分离其实是一种典型的门面模式，这种方式可以让具体业务在不同的日志实现框架之间自由切换，而不需要改动任何代码，开发者只需要掌握日志门面的 API 即可。\",\"日志门面是不能单独使用的，它必须和一种具体的日志实现框架相结合使用。那么日志框架是否可以单独使用呢？\",\"技术上来说当然没问题，但是我们一般不会这样做，因为这样做可维护性很差，而且后期扩展不易。\",\"SpringBoot 底层采用 Slf4j + Logback 作为默认的日志系统，同时提供了一个名为 spring-boot-starter-logging 的 Starter 为常见的日志框架（如 Log4j 等）提供了自动化配置。\",\"image-20230715211030742\"]},\"104\":{\"h\":\"2.2 日志级别\",\"t\":[\"Logback 默认提供的日志级别从低到高分别为：\",\"TRACE：最低级别的日志，用于记录程序的详细信息，通常用于排查问题；\",\"DEBUG：用于记录程序的调试信息，通常用于开发和测试阶段；\",\"INFO：用于记录程序的运行状态信息，通常用于记录程序的启动、关闭等信息；\",\"WARN：用于记录警告信息，表示程序可能存在潜在的问题，但不会影响程序的正常运行；\",\"ERROR：最高级别的日志，用于记录程序中的错误信息，通常在程序出现异常时使用。\",\"SpringBoot 应用，日志默认输出到控制台，日志级别包含：ERROR、WARN 和 INFO，这是因为 SpringBoot 默认的日志级别是 INFO，若要开启 DEBUG 级别的日志，可以在 application.yml 配置文件中配置如下内容：\",\"debug: true \",\"但是在实际项目中，日志通常的配置如下：\",\"logging: level: root: info com.example.controller: debug com.example.service: debug \",\"其中，root 表示组表示整个项目，同时也可以为不同的包指定不同的日志级别，这会覆盖 root 的日志级别。\",\"像上面那样以包为单位设置日志级别是很麻烦的，此时可以将相同日志级别的包定义到同一个组中，再为组设置日志级别，就像下面这样：\",\"logging: group: server: com.example.service, com.example.controller sql: com.example.mapper level: root: info server: debug sql: trace \"]},\"105\":{\"h\":\"2.3 打印日志\",\"t\":[\"SpringBoot 打印日志，通常需要先获取日志对象，具体如下：\",\"@RestController @RequestMapping(\\\"/user\\\") public class UserController { public static final Logger log = LoggerFactory.getLogger(UserController.class); } \",\"除此之外，获取日志对象也可以使用 Lombok 的 @Slf4j 注解替代：\",\"@Slf4j @RestController @RequestMapping(\\\"/user\\\") public class UserController { } \",\"拿到日志对象后，调用相应的方法即可打印不同级别的日志，{} 可以作为日志输出的占位符，数据在之后传入，如：log.error(\\\"用户id：{}不存在\\\",userId)\"]},\"106\":{\"h\":\"2.4 自定义日志格式\",\"t\":[\"在 SpringBoot 项目的配置文件中添加如下配置，可以自定义日志输出格式：\",\"logging: pattern: file: '%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n' console: '%d{yyyy-MM-dd hh:mm:ss} [%thread] %-5level %logger{50} - %msg%n' \",\"下面是常用日志配置参数的说明：\",\"配置参数\",\"说明\",\"%d\",\"日志生产时间，输出到毫秒的时间\",\"%-5level\",\"输出日志级别，-5 表示左对齐并且固定输出 5 个字符，如果不足在右边补 0\",\"%logger 或 %c\",\"logger 的名称\",\"%thread 或 %t\",\"输出当前线程名称\",\"%message 或 %msg 或 %m\",\"日志内容，即 logger.info(\\\"message\\\")\",\"%class 或 %C\",\"输出 Java 类名\",\"%method 或 %M\",\"输出方法名\",\"hostName\",\"本地机器名\",\"hostAddress\",\"本地 ip 地址\"]},\"107\":{\"h\":\"2.5 持久化日志\",\"t\":[\"SpringBoot 日志的默认配置，只会输出日志到控制台，但是在生产环境通常都需要将日志持久化到文件中，实现也很简单，只需要在配置文件添加几个简单的配置即可：\",\"logging: file: # 指定日志文件名字和路径 # name: D:\\\\\\\\logs\\\\\\\\run.log # 指定日志文件路径，不能指定日志文件的名字，固定为 spring.log path: log/ \",\"提示\",\"logging.file.name 和 logging.file.path 只需要配置一个，若同时存在，则 path 无效；\",\"默认情况下，日志文件的大小达到 10MB 时会切分一次，产生新的日志文件\"]},\"108\":{\"h\":\"3-Logback日志文件\",\"t\":[\"在 SpringBoot 配置文件中对日志进行的配置只适用一些简单的场景，对于比较负杂的场景，像区分 info 和 error 的日志、每天产生一个日志文件等场景，使用配置文件实现则更加合适。\",\"SpringBoot 为各个日志实现配置了默认的配置文件名，只需要将日志文件放到 resources 目录下，即可被正确加载。以 Logback 为例，SpringBoot 默认支持的配置文件名为：\",\"logback-spring.xml\",\"logback-spring.groovy\",\"logback.xml\",\"logback.groovy\",\"Spring 官方推荐优先使用带有 -spring 的文件名作为日志配置，这是因为命名为 logback-spring.xml 配置文件不会被日志框架直接加载，而是由 SpringBoot 解析日志配置文件，这意味着我们可以在 logback-spring.xml 配置文件中添加一些 SpringBoot 特有的配置项，比如获取 application.yml 中定义的数据，这是在 logback.xml 中是无法获取的。\",\"除此之外，SpringBoot 还支持在 application.yml 使用如下配置自定义配置日志文件名：\",\"logging: config: classpath:logback-core.xml \",\"下面给出一个 Logback 的常用配置文件，实际开发可根据该配置文件进行修改：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration scan=\\\"true\\\" scanPeriod=\\\"60 seconds\\\" debug=\\\"false\\\"> <!-- 日志存放路径 --> <property name=\\\"log.path\\\" value=\\\"logs/gt\\\" /> <!-- 日志输出格式 --> <property name=\\\"log.pattern\\\" value=\\\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n\\\" /> <!-- 控制台输出 --> <appender name=\\\"console\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>${log.pattern}</pattern> </encoder> </appender> <!-- 系统日志输出 --> <appender name=\\\"file_info\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>${log.path}/info.log</file> <!-- 循环政策：基于时间创建日志文件 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 日志文件名格式 --> <fileNamePattern>${log.path}/info.%d{yyyy-MM-dd}.log</fileNamePattern> <!-- 日志最大的历史 60天 --> <maxHistory>60</maxHistory> </rollingPolicy> <encoder> <pattern>${log.pattern}</pattern> </encoder> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <!-- 过滤的级别 --> <level>INFO</level> <!-- 匹配时的操作：接收（记录） --> <onMatch>ACCEPT</onMatch> <!-- 不匹配时的操作：拒绝（不记录） --> <onMismatch>DENY</onMismatch> </filter> </appender> <appender name=\\\"file_error\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>${log.path}/error.log</file> <!-- 循环政策：基于时间创建日志文件 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 日志文件名格式 --> <fileNamePattern>${log.path}/error.%d{yyyy-MM-dd}.log</fileNamePattern> <!-- 日志最大的历史 60天 --> <maxHistory>60</maxHistory> </rollingPolicy> <encoder> <pattern>${log.pattern}</pattern> </encoder> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <!-- 过滤的级别 --> <level>ERROR</level> <!-- 匹配时的操作：接收（记录） --> <onMatch>ACCEPT</onMatch> <!-- 不匹配时的操作：拒绝（不记录） --> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- 系统模块日志级别控制 --> <logger name=\\\"com.g\\\" level=\\\"info\\\" /> <!-- Spring日志级别控制 --> <logger name=\\\"org.springframework\\\" level=\\\"warn\\\" /> <root level=\\\"info\\\"> <appender-ref ref=\\\"console\\\" /> </root> <!--系统操作日志--> <root level=\\\"info\\\"> <appender-ref ref=\\\"file_info\\\" /> <appender-ref ref=\\\"file_error\\\" /> </root> </configuration> \"]},\"109\":{\"h\":\"006-SpringBoot统一异常处理\"},\"110\":{\"h\":\"1-关于异常的理解\",\"t\":[\"首先应该明确一点，一切异常对于系统来说，都是不正常的表现。尽管有时由于业务处理的需要我们会主动抛出一些异常，但也不意味对这些异常可以不管不顾，需要有一个地方对抛出的异常进行处理。\",\"在日常开发中，一个完善的异常处理机制，在提升系统稳定性和用户体验等方面是至关重要的。但我们不能认为完善异常处理机制是系统的核心，而是要反思系统架构设计是否合理、系统逻辑设计是否合理等。而不是指望完善异常处理来给系统缺陷擦屁股。\",\"对异常按阶段进行分类，大体可以分成：进入Controller前的异常和 Service 层异常\",\"image-20230717084519181\"]},\"111\":{\"h\":\"2-SpringBoot默认异常处理机制\",\"t\":[\"SpringBoot 提供了默认的异常处理机制：默认提供了程序出错的结果映射路径 /error。这个 /error 请求会在 BasicErrorController 中处理，其内部是通过判断请求头中的 Accept 的内容是否为text/html 来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容Accept:text/html）还是客户端接口的调用，以此来决定返回页面视图还是 JSON 消息内容。\",\"对于 404 来说，默认返回的 Json 消息内容如下：\",\"{ \\\"timestamp\\\": \\\"2023-05-12T06:11:45.209+0000\\\", \\\"status\\\": 404, \\\"error\\\": \\\"Not Found\\\", \\\"message\\\": \\\"No message available\\\", \\\"path\\\": \\\"/index.html\\\" } \",\"很明显，这样的异常 Json 数据对前端来说是很不友好的，如果是浏览器请求的调用更是会返回一个默认的 Whitelabel Error Page 页面。\"]},\"112\":{\"h\":\"3-统一异常处理\",\"t\":[\"Spring 在 3.2 版本增加了一个注解 @ControllerAdvice，可以与 @ExceptionHandler、@InitBinder、@ModelAttribute 等注解注解配套使用。不过跟异常处理相关的只有注解 @ExceptionHandler，从字面上看，就是异常处理器的意思。\"]},\"113\":{\"h\":\"3.1 @ExceptionHandler\",\"t\":[\"@ExceptionHandler 注解标注在 Controller 的方法上，用于拦截该 Controller 中被 @RequestMapping 注解标注的 handler 抛出的异常，并进行处理，如：\",\"@ExceptionHandler({RuntimeException.class, MethodArgumentNotValidException.class}) public Map<String,Object> exceptionHandler(Exception e) { Map<String,Object> result = new HashMap<>(); if (e instanceof RuntimeException) { result.put(\\\"code\\\",501); result.put(\\\"message\\\",\\\"运行时异常\\\"); } else if (e instanceof MethodArgumentNotValidException) { result.put(\\\"code\\\",502); result.put(\\\"message\\\",\\\"参数校验异常\\\"); } else { result.put(\\\"code\\\",500); result.put(\\\"message\\\",\\\"未知异常\\\"); } return result; } \",\"如果在 UserController 中存在上面的异常处理方法，则 UserController 中的所有 handler 抛出的 RuntimeException 和 MethodArgumentNotValidException 异常都会被该异常处理方法处理。\",\"提示\",\"@ExceptionHandler 注解的 value 属性，用于指定需要处理异常的 class，且只有在当前控制器中抛出的异常才会被处理。\",\"被 @ExceptionHandler 注解标注的异常处理方法，返回值类型和当前控制器中标识了@RequestMapping 等注解的方法是统一的。\"]},\"114\":{\"h\":\"3.2 @ControllerAdvice\",\"t\":[\"@ExceptionHandler 注解虽然可以处理异常，但只能处理其所在控制器抛出的异常。对于其他控制器的异常 @ExceptionHandler 也是无能为力。\",\"有没有一种方法可以对所有控制器抛出的异常，进行捕获并处理呢？\",\"@ControllerAdvice 注解就能实现这一功能，该注解就是用于给 Controller 控制器添加统一的操作或处理，配合 @ExceptionHandler 注解就可以实现全局的异常处理。\"]},\"115\":{\"h\":\"4-全局异常处理器\"},\"116\":{\"h\":\"4.1 统一响应格式\",\"t\":[\"越来越多的项目采用前后端分离的开发模式，这对后端接口的响应格式便有了一定的要求。通常，我们会采用JSON 格式作为前后端交换数据格式，从而减少沟通成本等。\",\"一般响应格式通常会包含状态码、状态描述（或错误提示信息）、业务数据等信息。在此基础上，不同的架构师、项目搭建者可能会有所调整。但从整体上来说，基本上都是大同小异，但至少包含如下三个属性：\",\"{ \\\"code\\\":200, \\\"message\\\":\\\"操作成功\\\", \\\"data\\\":{} } \",\"其中 code 和 message 通常使用枚举来定义：\",\"@Getter public enum ResponseEnum { // 成功 SUCCESS(200, \\\"操作成功\\\"), // 失败 FAILED(201,\\\"操作失败\\\"), // 登录注册相关 6001-7000 NEED_LOGIN(6001, \\\"需要登录后操作\\\"), USERNAME_EXIST(6002, \\\"用户名已存在\\\"), PHONE_NUMBER_EXIST(6003, \\\"手机号已存在\\\"), USERNAME_NOT_NULL(6004, \\\"用户名不能为空\\\"), NICKNAME_NOT_NULL(6005, \\\"昵称不能为空\\\"), PASSWORD_NOT_NULL(6006, \\\"密码不能为空\\\"), EMAIL_EXIST(6007, \\\"邮箱已存在\\\"), EMAIL_NOT_NULL(6008, \\\"邮箱不能为空\\\"), NICKNAME_EXIST(6009, \\\"昵称已存在\\\"), LOGIN_ERROR(6010, \\\"用户名或密码错误\\\"), // 系统相关 7001-8000 NO_OPERATOR_AUTH(7001, \\\"无权限操作\\\"), SYSTEM_ERROR(7002, \\\"出现错误啦！\\\"), FILE_TYPE_ERROR(507, \\\"文件类型错误\\\"); final int code; final String message; ResponseEnum(int code, String message) { this.code = code; this.message = message; } } \",\"这里仅仅给出了部分的状态码，更多的状态码可根据实际业务需求定义。\",\"为了方便响应数据的返回，这里定义一个统一返回的实体类：\",\"@Data @AllArgsConstructor @Accessors(chain = true) public class R<T> implements Serializable { private Integer code; private String message; private T data; public static <T> R<T> build(Integer code, String message) { return new R<>(code,message,null); } public static <T> R<T> build(ResponseEnum responseEnum) { return build(responseEnum.getCode(),responseEnum.getMessage()); } public static <T> R<T> success() { return build(ResponseEnum.SUCCESS); } public static <T> R<T> fail() { return build(ResponseEnum.FAILED); } } \"]},\"117\":{\"h\":\"4.2 全局异常处理器\",\"t\":[\"当然异常是很多的，在实际开发中，一般都会比较详细的去拦截一些常见的异常，拦截 Exception 虽然可以一劳永逸，但是不利于我们去排查或者定位问题。实际项目中，可以把拦截 Exception异常写在全局异常处理器最下面，如果都没有找到，最后再拦截一下 Exception异常，保证输出信息友好。\",\"@RestControllerAdvice @Slf4j public class GlobalExceptionHandler { // 请求体参数校验异常 @ExceptionHandler(MethodArgumentNotValidException.class) public R<?> methodArgumentNotValidExceptionHandler(MethodArgumentNotValidException e) { ObjectError objectError = e.getBindingResult().getAllErrors().get(0); log.error(\\\"参数校验异常:{}\\\",objectError.getDefaultMessage()); return R.fail(objectError.getDefaultMessage()); } // 数据绑定异常 @ExceptionHandler(BindException.class) public R<?> bindException(BindException e) { ObjectError objectError = e.getBindingResult().getAllErrors().get(0); log.error(\\\"数据绑定异常:{}\\\",objectError.getDefaultMessage()); return R.fail(objectError.getDefaultMessage()); } // 参数校验异常 @ExceptionHandler(ConstraintViolationException.class) public R<?> constraintViolationExceptionHandler(ConstraintViolationException e) { String message = e.getConstraintViolations().stream() .map(ConstraintViolation::getMessage) .collect(Collectors.toList()).get(0); log.error(\\\"参数校验异常:{}\\\",message); return R.fail(message); } // 未知异常 @ExceptionHandler(Exception.class) public R<?> exceptionAllHandler(Exception e) { log.error(\\\"未知异常:{}\\\",e.getMessage()); return R.fail(e.getMessage()); } } \"]},\"118\":{\"h\":\"4.3 自定义异常\",\"t\":[\"在实际开发中，一些异常是无法预知的，像请求超时、文件上传格式不对等等。可以自定义一个业务异常，当出现业务异常时，抛出这个自定义异常即可。\",\"@Getter @Setter public class BaseException extends RuntimeException{ private Integer code; private String message; public BaseException(ResponseEnum responseEnum) { this.code = responseEnum.getCode(); this.message = responseEnum.getMessage(); } public BaseException(Integer code, String message) { this.code = code; this.message = message; } } \",\"上面自定义了一个基本异常，在使用时只需要抛出该异常并传入具体业务对应的构造参数即可。例如，在用户注册时，若用户传入的用户名已被注册，则抛出自定义异常：\",\"public R<?> registerUser(User user) { List<User> userList = userMapper.selectByName(user.getUsername()); if (userList.size() > 0) { throw new BaseException(ResponseEnum.USERNAME_EXIST); } ...... } \",\"最后，不要忘了将自定义异常加入全局异常处理器中。\"]},\"119\":{\"h\":\"5-使用Assert替换throw Exception\",\"t\":[\"Spring 中的 org.springframework.util.Assert ，是一个用于验证参数或状态的工具类，它提供了一系列的静态方法，可以在不满足条件时抛出异常。\",\"下面是 Assert.notNull() 的源码：\",\"public static void notNull(@Nullable Object object, String message) { if (object == null) { throw new IllegalArgumentException(message); } } \",\"可以看到 Assert.notNull() 其实就是帮我们把 if...{} 语句封装了一下，在不满足条件时抛出异常IllegalArgumentException 。虽然很简单，但不可否认的是很大程度上提升了我们的编码体验。\",\"业务逻辑出现的异常基本都是对应特定的场景，比如根据用户名获取用户信息，查询结果为 null，此时抛出的异常可能为 UserNotFoundException ，并且有特定的异常码（如：7001）和异常信息（如：该用户不存在）。\",\"我们能不能仿照 Assert ，也写一个断言类，当不满足条件时抛出我们自定义的异常？当然可以！！！\",\"public class Assert { public static void assertNotNull(Object obj,String message) { if (obj == null) { throw new BaseException(ResponseEnum.FAILED.getCode(),message); } } public static void assertNotNull(Object obj,ResponseEnum responseEnum) { if (obj == null) { throw new BaseException(responseEnum); } } } \",\"上面的断言类只提供了判断对象不为 null 的静态方法，可根据实际需求进行拓展。\"]},\"120\":{\"h\":\"007-SpringBoot多数据源配置\"},\"121\":{\"h\":\"1-何时用到多数据源？\",\"t\":[\"在一个单体应用中，通常只会操作一个数据库，也只会配置一个数据源，但有时也会遇到需要在项目中操作多个数据库的情况，通常的应用场景如下：\",\"分库分表：当数据量增大，单个数据库无法满足需求时，可以将数据分散存储到多个数据库中，每个数据库称为一个数据源。这样可以提高数据库的读写性能。\",\"主从复制：在一些高并发的场景下，可以通过主从复制的方式实现读写分离。主数据库负责写操作，从数据库负责读操作。主从数据库可以配置为不同的数据源。\",\"跨数据源的业务需求：有些业务场景可能需要访问不同的数据源，例如多个部门独立管理的系统、多个租户独立的SaaS系统等。这时需要在应用程序中配置多个数据源。\"]},\"122\":{\"h\":\"2-单一数据源的整合\",\"t\":[\"这里以阿里的 druid 连接池为例，需要的依赖坐标如下：\",\"<dependency> <groupId>com.alibaba</groupId> <artifactId>druid-spring-boot-starter</artifactId> <version>1.2.16</version> </dependency> \",\"阿里的 druid 数据库连接池的功能是十分强大的，如：数据监控、数据库加密等功能，这里仅仅演示与 SpringBoot 整合的过程。\",\"通常情况下，我们会在 SpringBoot 的全局配置文件（application.yml）中使用如下配置来整合单一数据源：\",\"spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/db username: root password: root type: com.alibaba.druid.pool.DruidDataSource \",\"在配置文件中进行配置数据源比较简单。下面介绍配置数据源的另一种方式：\",\"在 druid-spring-boot-starter 自动配置类中 DruidDataSourceAutoConfigure 中有如下一段代码：\",\"@Bean(initMethod = \\\"init\\\") @ConditionalOnMissingBean public DataSource dataSource() { LOGGER.info(\\\"Init DruidDataSource\\\"); return new DruidDataSourceWrapper(); } \",\"@ConditionalOnMissingBean 和 @Bean 这两个注解的结合，意味着我们可以在 Spring 容器中注入一个 DataSource 类型的 Bean 就可以实现数据源的配置。\",\"@Configuration public class DataSourceConfig { @Bean public DataSource dataSource() { DruidDataSource dataSource = new DruidDataSource(); dataSource.setUrl(\\\"jdbc:mysql://localhost:3306/db\\\"); dataSource.setUsername(\\\"root\\\"); dataSource.setPassword(\\\"root\\\"); dataSource.setDriverClassName(\\\"com.mysql.cj.jdbc.Driver\\\"); return dataSource; } } \"]},\"123\":{\"h\":\"3-AbstractRoutingDataSource\",\"t\":[\"AbstractRoutingDataSource 在 org.springframework.jdbc.datasource.lookup 包下，通过这个类可以实现动态数据源切换，下面是该类的部分源码：\",\"public abstract class AbstractRoutingDataSource extends AbstractDataSource implements InitializingBean { // 用于存储要动态切换的datasource @Nullable private Map<Object, Object> targetDataSources; // 默认数据源对象 @Nullable private Object defaultTargetDataSource; // 通过JNDI查找数据源，如果数据源不存在是否回滚到默认数据源，默认：true private boolean lenientFallback = true; // 通过JNDI查找多数据源对象默认实现类 private DataSourceLookup dataSourceLookup = new JndiDataSourceLookup(); // 数据源集合的解析后的key-value对象 @Nullable private Map<Object, DataSource> resolvedDataSources; // 数据源集合的解析后的key-value对象 @Nullable private DataSource resolvedDefaultDataSource; } \"]},\"124\":{\"h\":\"3.1 determineTargetDataSource()\",\"t\":[\"AbstractRoutingDataSource 中的 determineTargetDataSource() 方法用于获取当前线程中对应的数据源，其源码如下：\",\"protected DataSource determineTargetDataSource() { Assert.notNull(this.resolvedDataSources, \\\"DataSource router not initialized\\\"); // 获取当前线程对应数据源的标识key // 该方法为抽象方法，需要客户端重写 Object lookupKey = determineCurrentLookupKey(); // 从数据源集合中获取数据源对象 DataSource dataSource = this.resolvedDataSources.get(lookupKey); // 如果lenientFallback回退属性为true if (dataSource == null && (this.lenientFallback || lookupKey == null)) { // 如果数据源不存在，则回退到默认数据源 dataSource = this.resolvedDefaultDataSource; } // 如果数据源不存在，则抛出异常 if (dataSource == null) { throw new IllegalStateException(\\\"Cannot determine target DataSource for lookup key [\\\" + lookupKey + \\\"]\\\"); } return dataSource; } \"]},\"125\":{\"h\":\"3.2 afterPropertiesSet()\",\"t\":[\"AbstractRoutingDataSource 中的 afterPropertiesSet() 方法，会将 targetDataSources、defaultTargetDataSource 两个数据源属性对象解析为 DataSource 对象，其源码如下：\",\"public void afterPropertiesSet() { if (this.targetDataSources == null) { throw new IllegalArgumentException(\\\"Property 'targetDataSources' is required\\\"); } this.resolvedDataSources = CollectionUtils.newHashMap(this.targetDataSources.size()); this.targetDataSources.forEach((key, value) -> { Object lookupKey = resolveSpecifiedLookupKey(key); DataSource dataSource = resolveSpecifiedDataSource(value); this.resolvedDataSources.put(lookupKey, dataSource); }); if (this.defaultTargetDataSource != null) { this.resolvedDefaultDataSource = resolveSpecifiedDataSource(this.defaultTargetDataSource); } } \",\"该方法调用的 resolveSpecifiedDataSource() 方法，来处理具体的解析业务，源码如下：\",\"protected DataSource resolveSpecifiedDataSource(Object dataSource) throws IllegalArgumentException { // 如果数据源对象是DataSource的实例对象，直接返回 if (dataSource instanceof DataSource) { return (DataSource) dataSource; } // 如果是字符串对象，则视其为dataSourceName，则调用JndiDataSourceLookup的getDataSource方法 else if (dataSource instanceof String) { return this.dataSourceLookup.getDataSource((String) dataSource); } else { throw new IllegalArgumentException( \\\"Illegal data source value - only [javax.sql.DataSource] and String supported: \\\" + dataSource); } } \"]},\"126\":{\"h\":\"4-实现动态数据源\"},\"127\":{\"h\":\"4.1 环境准备\",\"t\":[\"首先，在本地创建两个数据库 db1 和 db2，每个数据库下都创建一张 user 表：\",\"CREATE TABLE `t_user` ( `id` int NOT NULL AUTO_INCREMENT COMMENT '用户主键', `username` varchar(50) DEFAULT NULL COMMENT '用户名', `password` varchar(100) DEFAULT NULL COMMENT '密码', PRIMARY KEY (`id`) USING BTREE ) \",\"然后，在 SpringBoot 的全局配置文件中，配置数据源的相关信息：\",\"spring: datasource: druid: db1: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/db1?serverTimezone=Asia/Shanghai username: root password: root db2: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/db2?serverTimezone=Asia/Shanghai username: root password: root \"]},\"128\":{\"h\":\"4.2 数据源切换如何保证线程隔离？\",\"t\":[\"数据源属于一个公共的资源，在多线程的情况下如何保证线程隔离呢？不能我这边切换了影响其他线程的执行。\",\"说到线程隔离，自然会想到 ThreadLocal 了，将切换数据源的 KEY （用于从 targetDataSources 中取值）存储在 ThreadLocal 中，执行结束之后清除即可。\",\"这里单独封装一个 DataSourceHolder，内部使用 ThreadLocal 隔离线程，代码如下：\",\"public class DataSourceHolder { //线程 本地环境 private static final ThreadLocal<String> dataSources = new InheritableThreadLocal<>(); // 设置数据源 public static void setDataSources(String dataSource) { dataSources.set(dataSource); } // 获取数据源 public static String getDataSource() { return dataSources.get(); } //清除数据源 public static void clearDataSource() { dataSources.remove(); } } \"]},\"129\":{\"h\":\"4.3 创建动态数据源\",\"t\":[\"要实现数据源的动态切换，那我们就创建一个动态数据源，代码如下：\",\"public class DynamicDataSource extends AbstractRoutingDataSource { @Override protected Object determineCurrentLookupKey() { return DataSourceHolder.getDataSource(); } public DynamicDataSource( DataSource defaultTargetDataSource, Map<Object,Object> targetDataSources){ // 默认的数据源，可以作为主数据源 super.setDefaultTargetDataSource(defaultTargetDataSource); //目标数据源 super.setTargetDataSources(targetDataSources); //执行afterPropertiesSet方法，完成Datasource对象的解析 super.afterPropertiesSet(); } } \"]},\"130\":{\"h\":\"4.4 初始化动态数据源\",\"t\":[\"创建动态数据源后，需要对数据源进行初始化，代码如下：\",\"@Configuration public class DataSourceConfig { @Bean(name = \\\"hisDataSource\\\") @ConfigurationProperties(prefix = \\\"spring.datasource.db1\\\") public DataSource getHisDataSource() { return DruidDataSourceBuilder.create().build(); } @Bean(name = \\\"datasource\\\") @ConfigurationProperties(prefix = \\\"spring.datasource.db2\\\") public DataSource getDateSource() { return DruidDataSourceBuilder.create().build(); } @Bean(\\\"targetDataSource\\\") public DynamicDataSource dynamicDataSource( @Qualifier(\\\"hisDataSource\\\") DataSource hisDataSource, @Qualifier(\\\"datasource\\\") DataSource dataSource) { Map<Object, Object> targetDataSource = new HashMap<>(); targetDataSource.put(\\\"hisDataSource\\\",hisDataSource); targetDataSource.put(\\\"datasource\\\",dataSource); return new DynamicDataSource(hisDataSource,targetDataSource); } } \"]},\"131\":{\"h\":\"4.5 整合Mybatis\",\"t\":[\"AbstractRoutingDataSource 是 spring-jdbc 提供的，我们不需要太多的配置，但实际开发中经常使用的 ORM 框架却是 Mybatis，使用起来略微不同。\",\"先来看看，spring-jdbc 是如何使用动态数据源的。\",\"首先，在 Spring 容器中注入 JdbcTemplate：\",\"@Configuration public class DataSourceConfig { ...... // JdbcTemplate 使用的 DataSource 一定是动态数据源 @Bean public JdbcTemplate template(@Qualifier(\\\"dynamicDataSource\\\") DataSource dataSource) { return new JdbcTemplate(dataSource); } } \",\"接着，在 UserService 中使用：\",\"@Service public class UserService { @Autowired private JdbcTemplate jdbcTemplate; public void insertDB1User(User user) { DataSourceHolder.setDataSource(\\\"hisDataSource\\\"); String sql = \\\"insert into t_user(username,password) values(?,?)\\\"; jdbcTemplate.update(sql,user.getUsername(),user.getPassword()); DataSourceHolder.clearDataSource(); } public void insertDB2User(User user) { DataSourceHolder.setDataSource(\\\"datasource\\\"); String sql = \\\"insert into t_user(username,password) values(?,?)\\\"; jdbcTemplate.update(sql,user.getUsername(),user.getPassword()); DataSourceHolder.clearDataSource(); } } \",\"下面介绍如何在 Mybatis 中实现动态数据源的使用。\",\"在 SpringBoot 整合 Mybatis 需要导入如下依赖坐标：\",\"<dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.3.1</version> </dependency> \",\"在使用时，通常只需要在 application.yml 配置文件中进行简单配置即可，如：\",\"mybatis: type-aliases-package: com.boot.domain mapper-locations: classpath:/mapper/**/*.xml configuration: map-underscore-to-camel-case: true \",\"Mybatis 是由 SqlSessionFactory 提供 SqlSession 连接的，如果将动态数据源设置到 SqlSessionFactory 中，是不是就可以实现数据源的动态切换呢？答案是可以的。\",\"下面是 SqlSessionFactory 的配置：\",\"@Configuration public class MybatisConfig { @Bean public SqlSessionFactory sqlSessionFactory(@Qualifier(\\\"dynamicDataSource\\\")DataSource dataSource) throws Exception { SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean(); factoryBean.setDataSource(dataSource); // 设置动态数据源 Resource[] resource = new PathMatchingResourcePatternResolver() .getResources(\\\"classpath:/mapper/**/*.xml\\\"); factoryBean.setMapperLocations(resource); // 设置mapper文件路径 factoryBean.setTypeAliasesPackage(\\\"com.boot.domain\\\"); // 设置别名包 org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration(); configuration.setMapUnderscoreToCamelCase(true); // 开启下划线转驼峰 factoryBean.setConfiguration(configuration); return factoryBean.getObject(); } } \",\"最后，来看看如何使用：\",\"@Service public class UserService { @Autowired private DB1UserMapper userMapper1; @Autowired private BD2UserMapper userMapper2; public void insertDB1UserByMyBatis(User user) { DataSourceHolder.setDataSource(\\\"hisDataSource\\\"); userMapper1.insertDB1User(user); DataSourceHolder.clearDataSource(); } public void insertDB2UserByMyBatis(User user) { DataSourceHolder.setDataSource(\\\"datasource\\\"); userMapper2.insertDB2User(user); DataSourceHolder.clearDataSource(); } } \"]},\"132\":{\"h\":\"4.6 自定义注解切换数据源\",\"t\":[\"无论是 JdbcTemplate 还是 Mybatis，每次的接口调用都需要调用 DataSourceHolder.setDataSources() 来设置数据源，为了方便操作且更低耦合，可以定义一个切换数据源的注解，如下：\",\"@Target(value = ElementType.METHOD) @Retention(value = RetentionPolicy.RUNTIME) @Documented public @interface SwitchDataSource { // 默认切换的数据源KEY String DEFAULT_NAME = \\\"hisDataSource\\\"; // 需要切换到数据的KEY String value() default DEFAULT_NAME; } \",\"注解中只有一个 value 属性，指定了需要切换数据源的 KEY 。有注解还不行，当然还要有切面，代码如下：\",\"@Aspect //优先级设置到最高 @Order(Ordered.HIGHEST_PRECEDENCE) @Component public class DataSourceAspect { @Pointcut(\\\"@annotation(com.boot.annotation.SwitchDataSource)\\\") public void pointcut() {} @Around(value = \\\"pointcut()\\\") public Object beforeOpt(ProceedingJoinPoint joinPoint) throws Throwable { Method method = ((MethodSignature) joinPoint.getSignature()).getMethod(); SwitchDataSource switchSource = method.getAnnotation(SwitchDataSource.class); DataSourceHolder.setDataSource(switchSource.value()); try { return joinPoint.proceed(); } finally { DataSourceHolder.clearDataSource(); } } } \",\"这个 Aspect 很容易理解，在执行目标方法之前，取 @SwitchDataSource 注解中 value 属性设置到ThreadLocal 中；在目标方法执行后，清除掉 ThreadLocal 中的 KEY ，保证了如果不切换数据源，则用默认的数据源。\"]},\"133\":{\"h\":\"4.7 配置事务管理器\",\"t\":[\"Spring 的事务是基于数据源的，数据源变了事务管理器自然也要变，我们需要自定义一个事务管理器，使其管理的数据源是动态数据源：\",\"@Bean public PlatformTransactionManager platformTransactionManager( @Qualifier(\\\"dynamicDataSource\\\") DataSource dataSource) { return new DataSourceTransactionManager(dataSource); } \",\"切换数据源是基于 AOP 的，而 Spring 的事务也是基于 AOP 的，那么如何保证切换数据源在前面执行呢？\",\"其实，在前面配置切换数据源切面的时候就已经通过 @Order 注解，将切换数据源的 Aspect 优先级调到了最高。\",\"提示\",\"此种情况仅适用于多数据源下的单库事务操作！！！\"]},\"134\":{\"h\":\"008-SpringBoot参数校验\"},\"135\":{\"h\":\"1-为什么要进行参数校验？\",\"t\":[\"通常来说，前端在发送请求时也会进行参数校验。但是为了避免用户绕过客户端，使用 HTTP 工具直接向后端请求一些违法数据，服务端的数据校验也是不能忽视的。\",\"在日常的 Java 后端开发过程中，经常需要对接口的参数进行校验。例如，对于登录接口需要校验用户名和密码是否为空，添加用户时需要验证邮箱、手机号格式是否正确，若仅仅使用 if...else 对接口参数进行校验，不仅十分繁琐，而且代码可读性极差。\",\"下面就来讲讲如何在 SpringBoot 项目中优雅的实现参数校验。\"]},\"136\":{\"h\":\"2-Spring Validation\",\"t\":[\"说到 Spring Validation 就不得不提 Hibernate Validation，二者均为 Bean Validation 的具体实现。\",\"JSR-303 是 JavaEE 6 中的一项子规范，又称作 Bean Validation，提供了针对 Java Bean 字段的一些校验注解，如 @NotNull，@Min等。JSR-349 是其升级版本，添加了一些新特性。Hibernate Validator 是对这个规范的实现（与 ORM 框架无关），并在它的基础上增加了一些新的校验注解，如 @Email，@Length，@Range 等等。\",\"Spring Validation 又对 Hibernate Validation 进行了二次封装，并添加了自动校验功能，并将校验信息封装进了特定的类中。\",\"在 SpringBoot 2.3 以前，Spring Validation 是包含在 spring-boot-starter-web 里的。之后，校验包被独立成了一个 Starter 组件，需要引入如下依赖：\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> \"]},\"137\":{\"h\":\"3-常用校验注解\",\"t\":[\"下面是常用校验注解：\",\"Bean Validation 中内置的 constraint（约束） \",\"@Null 被注释的元素必须为 null\",\"@NotNull 被注释的元素必须不为 null\",\"@AssertTrue 被注释的元素必须为 true\",\"@AssertFalse 被注释的元素必须为 false\",\"@Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值\",\"@Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值\",\"@DecimalMin(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值\",\"@DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值\",\"@Size(max=, min=) 被注释的元素的大小必须在指定的范围内\",\"@Digits(integer, fraction) 被注释的元素必须是一个数字，其值必须在可接受的范围内\",\"@Past 被注释的元素必须是一个过去的日期\",\"@Future 被注释的元素必须是一个将来的日期\",\"@Pattern(regex=,flag=) 被注释的元素必须符合指定的正则表达式\",\"Hibernate Validator 附加的 constraint \",\"@NotBlank(message =) 字符串不能为null,字符串trim()后也不能等于“”\",\"@Email 被注释的元素必须是电子邮箱地址\",\"@Length(min=,max=) 被注释的字符串的大小必须在指定的范围内\",\"@NotEmpty 不能为null，集合、数组、map等size()不能为0；字符串trim()后可以等于“”\",\"@Range(min=,max=,message=) 被注释的元素必须在合适的范围内\",\"@URL 被注释的元素必须是一个URL\"]},\"138\":{\"h\":\"4-异常说明\",\"t\":[\"校验注解标注的位置不同，在校验失败时抛出的异常也不同，下面在一个控制器方法中列举出来了校验注解使用的各种情况：\",\"@RestController @RequestMapping(\\\"user\\\") @Validated public class UserController { @GetMapping(\\\"login\\\") public void login( @NotBlank(message = \\\"用户名不能为空\\\") String username, @NotBlank(message = \\\"密码不能为空\\\") String password) { } @PostMapping(\\\"register\\\") public void registerUser(@Validated User user) { } @PostMapping(\\\"update\\\") public void updateUser(@Validated @RequestBody User user) { } } \",\"对于简单类型的参数，可以直接标注校验注解，并在控制器上标注 @Validated 或 @Valid 注解。校验失败，会抛出 javax.validation.ConstraintViolationException 异常。\",\"对于对象类型的参数，直接在对象参数上标注 @Validated 或 @Valid 即可。校验失败，会抛出 org.springframework.validation.BindException 异常。\",\"对于使用 @Validated 或 @Valid 注解标注的请求体（使用 @RequestBody 注解标注）对象参数的校验，如果校验失败，则会抛出 org.springframework.web.bind.MethodArgumentNotValidException 异常。\"]},\"139\":{\"h\":\"5-异常处理\",\"t\":[\"Spring Validation 校验失败会抛出异常，有异常就要处理，通常将异常加入全局异常处理器进行处理。\",\"下面直接贴出全局异常处理类：\",\"@RestControllerAdvice public class GlobalExceptionHandler { @ExceptionHandler(MethodArgumentNotValidException.class) public R<?> methodArgumentNotValidExceptionHandler(MethodArgumentNotValidException e) { ObjectError objectError = e.getBindingResult().getAllErrors().get(0); return R.fail(objectError.getDefaultMessage()); } @ExceptionHandler(BindException.class) public R<?> bindException(BindException e) { ObjectError objectError = e.getBindingResult().getAllErrors().get(0); return R.fail(objectError.getDefaultMessage()); } @ExceptionHandler(ConstraintViolationException.class) public R<?> constraintViolationExceptionHandler(ConstraintViolationException e) { String message = e.getConstraintViolations().stream() .map(ConstraintViolation::getMessage) .collect(Collectors.toList()).get(0); return R.fail(message); } } \"]},\"140\":{\"h\":\"6-@Validated&@Valid\",\"t\":[\"@Valid 与 @Validated 都是用于校验参数的，其中 @Valid 是 Hibernate Validation 提供的，而 @Validated 注解是 Spring Validation 提供的，二者在使用上略有不同。\"]},\"141\":{\"h\":\"6.1 分组校验\",\"t\":[\"@Validated提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制。\",\"对于插入操作来说，通常不需要携带 id，而对于修改操作来说是需要携带 id 的，就可以根据这两种情况进行分组，相关示例如下：\",\"首先，定义两个分组 Insert 和 Update：\",\"public interface Insert extends Default { } public interface Update extends Default { } \",\"接着就是在实体类需要校验的属性上添加分组了：\",\"@Data @AllArgsConstructor @NoArgsConstructor public class User { @NotNull(message = \\\"更新用户id不能为空\\\",groups = {Update.class}) @Null(message = \\\"添加用户不携带id\\\",groups = {Insert.class}) private Long id; } \",\"在 Controller 中，只需要指定 @Validated 的 value 属性为相应的组名即可：\",\"@Slf4j @RestController @RequestMapping(\\\"/user\\\") @Validated public class UserController { @PostMapping(\\\"/add\\\") @ResponseBody public String addUser(@Validated({Insert.class}) @RequestBody User user) { log.error(\\\"user is {}\\\",user); return \\\"user valid success\\\"; } @PostMapping(\\\"update\\\") public String updateUser(@Validated({Update.class}) @RequestBody User user) { log.error(\\\"user is {}\\\",user); return \\\"user valid success\\\"; } } \"]},\"142\":{\"h\":\"6.2 嵌套校验\",\"t\":[\"@Validated可以用在类、方法和方法参数上。但是不能用在成员属性（字段）上\",\"@Valid可以用在方法、构造函数、方法参数和成员属性（字段）上\",\"两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。仅仅 @Valid 支持嵌套校验。\",\"那么什么是嵌套校验呢？\",\"一个待验证的 POJO 中还包含了其它待验证的对象，最常见的就是各种 List 集合了。\",\"在下面的 User 类中，仅仅对 roleList 做了非空校验，并没有校验其中的数据：\",\"@Data @AllArgsConstructor @NoArgsConstructor public class User { @NotNull(message = \\\"更新用户id不能为空\\\",groups = {Update.class}) @Null(message = \\\"添加用户不携带id\\\",groups = {Insert.class}) private Long id; @NotEmpty(message = \\\"角色不能为空\\\") private List<Role> roleList; } \",\"如果在成员变量 roleList 上加上 @Valid 注解，则也会对 roleList 中的数据 Role 对象进行校验，当然 Role 类的字段上需要有校验注解。\",\"假如 Role 类如下所示，且在 roleList 上标注了 @Vaild 注解：\",\"@Data @AllArgsConstructor @NoArgsConstructor public class Role { private Long id; @NotNull(message = \\\"角色名称不能为空\\\") private String roleName; } \",\"此时，在 roleList 上添加 @Valid 注解即可实现嵌套验证。\"]},\"143\":{\"h\":\"001-修改浏览器滚动条样式\",\"t\":[\"浏览器自带的滚动条样式比较丑，有时也和系统整体的色调不搭配，通常的做法是修改浏览器滚动条的默认样式。\"]},\"144\":{\"h\":\"一、滚动条的组成\",\"t\":[\"通俗来讲，滚动条由三部分组成：一部分是可以滑动的部分，我们称它为滑块；另一部分是滚动条的轨道，也就是滑块的轨道，一般来说，为了美观，滑块的颜色要比轨道的颜色深一些。还有一部分是滚动条的箭头，用于控制滚动条的移动。\"]},\"145\":{\"h\":\"二、CSS 伪类\",\"t\":[\"目前我们可以通过 CSS伪类 来实现滚动条的样式修改，以下为修改滚动条样式用到的 CSS 伪类。\",\"::-webkit-scrollbar：整个滚动条。\",\"::-webkit-scrollbar-button：滚动条的上下箭头。\",\"::-webkit-scrollbar-thumb：滚动条上的滚动滑块。\",\"::-webkit-scrollbar-track：滚动条轨道。\",\"::-webkit-scrollbar-track-piece：滚动条没有滑块的轨道部分。\",\"::-webkit-scrollbar-corner ：当同时有垂直滚动条和水平滚动条时交汇的部分。\",\"当然这种方式还存在一定的兼容性问题，仅可在 webkit 内核的浏览器上生效。\"]},\"146\":{\"h\":\"三、修改\",\"t\":[\"1. 无滑道滚动条\",\"/* 整个滚动条 */ ::-webkit-scrollbar{ /* 对应纵向滚动条的宽度 */ width: 10px; height: 10px; /* 对应横向滚动条的宽度 */ background-color: transparent; } /* 滚动条上的滚动滑块 */ ::-webkit-scrollbar-track{ border-radius: 10px; background-color: transparent; } /* 滚动条轨道 */ ::-webkit-scrollbar-thumb{ border-radius: 10px; background-color: #c0c0c0; } \",\"2. 纯色系滚动条\",\"/* 整个滚动条 */ ::-webkit-scrollbar { /* 对应纵向滚动条的宽度 */ width: 10px; /* 对应横向滚动条的宽度 */ height: 10px; } /* 滚动条上的滚动滑块 */ ::-webkit-scrollbar-thumb { background-color: #49b1f5; border-radius: 32px; } /* 滚动条轨道 */ ::-webkit-scrollbar-track { background-color: #dbeffd; border-radius: 32px; } \"]},\"147\":{\"h\":\"001-前端实现文件下载\",\"t\":[\"前端下载文件通常会遇到这样两种情况\",\"后端直接返回文件的网络地址（一般用在静态文件上，比如图片以及各种音视频资源等）。\",\"后端返回的是文件的二进制流（一般用在动态文件上，比如根据前端选择，导出不同的统计结果 excel 等）。\"]},\"148\":{\"h\":\"一、后端返回下载地址\"},\"149\":{\"h\":\"1.1 location.herf\",\"t\":[\"location.href直接指向一个文件的话，浏览器会下载该文件，对于单文件下载没有什么问题，但是如果下载多文件，点击过快就会重置掉前面的请求。\",\"function download(url){ window.location.href = url } \"]},\"150\":{\"h\":\"1.2 动态添加 <a/> 标签\",\"t\":[\"在 <a/> 标签上添加 download 属性，就可以下载其 href 属性指定文件地址的文件。基于这种方式我们可以动态创建 <a/> 标签来实现文件的下载。\",\"function downloadLink(path) { // 创建 a 标签 const downloadHtml = document.createElement('a') // 添加 herf 属性 downloadHtml.href = path // 指定文件名，可以从文件路径中截取 downloadHtml.download = path.substring(path.lastIndexOf('/') + 1) // 将 a 标签挂载到 body 上 document.body.appendChild(downloadHtml) // 模拟点击 a 标签 downloadHtml.click() // 点击后移除 a 标签 document.body.removeChild(downloadHtml) } \"]},\"151\":{\"h\":\"1.3 window.open\",\"t\":[\"window.open 可以打开一个新窗口，虽然能通过这种方式下载文件，但是新的窗口不会关闭，明显体验上不好。\",\"function download(url){ window.open(url); } \"]},\"152\":{\"h\":\"二、后端返回二进制文件流\",\"t\":[\"对于后端返回下载地址的静态资源，使用上面任意一种方法都可以实现文件下载，但后端若是返回二进制文件流，则通常配合 axios 等异步请求工具来实现。\",\"发送请求时指定响应类型为 blob\",\"function download(path) { axios({ url: \\\"path\\\", method: 'GET', responseType: 'blob', headers: { token: '' } }).then(response => { console.log(response) }) } \",\"那么，怎么将二进制数据变成文件呢？\",\"通过 window.URL.createObjectURL 方法，生成对应二进制数据 blob 对象的 URL，然后通过动态添加 a 标签的方法，来实现下载文件。\",\"export function downloadBlob(response) { // 从 content-disposition 中获取文件名 const contentDisposition = response.headers['content-disposition'] // 解码 const fileName = decodeURIComponent(contentDisposition.substring(contentDisposition.indexOf(\\\"''\\\") + 2)) // 构造 Blob 对象 const blob = new Blob([response.data], { type: response.data.type }) // 创建下载连接 const href = window.URL.createObjectURL(blob) // 创建下载元素 const downloadElement = document.createElement('a') // 将下载连接和文件名挂载到下载元素上 downloadElement.href = href downloadElement.download = fileName document.body.appendChild(downloadElement) // 点击下载 downloadElement.click() // 下载完成移除元素 document.body.removeChild(downloadElement) // 释放blob window.URL.revokeObjectURL(href) } \"]},\"153\":{\"h\":\"2.1 Content-Disposition\",\"t\":[\"服务器向浏览器发送文件时，如果是浏览器支持的文件类型，一般会默认使用浏览器打开，比如txt、png等。如果需要提示用户保存，就要利用Content-Disposition进行处理。\",\"格式：\\\"Content-Disposition\\\": disposition-type;disposition-parm\",\"示例：response.setHeader(\\\"Content-Disposition\\\", \\\"attachment;filename=fileName.xlsx\\\")\",\"其中 disposition-type 可以是 attachment 或 inline，二者的区别如下：\",\"attachment：浏览器在打开的时候会提示保存还是打开，即使选择打开，也会使用相关联的程序，比如记事本打开，而不是 IE 直接打开。\",\"inline：浏览器在打开时，将文件内容直接显示在页面。\",\"disposition-parm 有多种取值，主要使用的是 filename-parm 用于指示浏览器即将下载的附件的文件名。\"]},\"154\":{\"h\":\"2.2 Content-Disposition 中文件名中文乱码\",\"t\":[\"RFC822 规定，header 中的文本信息只能使用 ASCII 码，所以在 Content-Disposition 中直接使用汉字是非法的。所以必须将中文文件名转换成 ASCLL 码，可以使用 java.net.URLEncoder.encode 对文件名进行编码。\",\"格式：URLEncoder.*encode*(fileName, StandardCharsets.UTF_8)\",\"上面的代码会返回指定中文文件名的 ASCLL 码串，但在 IE 浏览器下仍可能乱码，当中文文件名中存在空格时 URLEncoder 在转码时会将空格替换成 + 号，IE 会直接将 + 显示出来，解决办法也很简单：将转码后的 ASCLL 串中的 + 号替换成 %20，浏览器会将 %20 转换成空格输出。\",\"改造：URLEncoder.*encode*(fileName, StandardCharsets.UTF_8).replaceAll(\\\"\\\\\\\\+\\\", \\\"%20\\\")\"]},\"155\":{\"h\":\"2.3 Content-Disposition 跨域\",\"t\":[\"在前后端分离的项目中通常会使用 CORS 解决跨域，此时只会 \\\"暴露\\\" 一下六种简单响应头给外部\",\"Cache-Control\",\"Content-Language\",\"Content-Type\",\"Expires\",\"Last-Modified\",\"Pragma\",\"这里 \\\"暴露\\\"的含义是：既可以在 NetWork 中看到，也可以在客户端获取。而 Content-Disposition 并不在上面六个响应头中，就导致了客户 \\\"看到吃不到\\\"。\",\"Access-Control-Expose-Headers 就是控制响应头 \\\"暴露\\\" 的开关。对于需要让客户端访问的响应头不仅需要将其添加到 header 中，还需要在 Access-Control-Expose-Headers 里面列出来。\",\"格式：response.setHeader(\\\"Access-Control-Expose-Headers\\\", \\\"Content-Disposition\\\")\"]},\"156\":{\"h\":\"001-Vue的介绍与安装\"},\"157\":{\"h\":\"一、什么是 vue？\",\"t\":[\"Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。\"]},\"158\":{\"h\":\"二、理解 MVVM\",\"t\":[\"MVVM 是 vue 实现数据驱动视图和双向数据绑定的核心原理。MVVM 是 Model View ViewModel 的缩写，它是一种基于前端开发的架构模式。\",\"Model：数据层，数据和业务逻辑都在 Model 层中定义。\",\"View：视图层，也就是用户界面，负责数据的展示。\",\"ViewModel：视图数据层， ViewModel 层通过双向数据绑定将 View 层和 Model 层连接了起来，使得 View 层和Model 层的同步工作完全是自动的。\",\"mvvm\",\"Model 和 View 并无直接关联，而是通过 ViewModel 这个桥梁来进行联系的，ViewModel 就是 View 与 Model 的连接器，View 与 Model 通过 ViewModel 实现双向绑定。 因此当 Model 中的数据改变时会触发 View 层的刷新，View 中由于用户交互操作而改变的数据也会在 Model 中同步。这种模式实现了 Model 和 View 的数据自动同步，因此开发者只需要专注对数据的维护操作即可，而不需要自己操作 dom。\",\"MVVM 模式简化了界面与业务的一览，解决了数据频繁更新，MVVM 在使用当中，利用双向数据绑定技术，使得 Model 变化时，ViewModel 会自动更新，从而 View 也会自动变化。\"]},\"159\":{\"h\":\"三、安装 vue\",\"t\":[\"参考官网：介绍 — Vue.js (vuejs.org)\",\"vue 是一个类似于 JQuery 的 JS 框架，如果想使用 vue ，只需要在当前页面导入 vue.js 文件即可。下面是一个最简单的 vue 项目。\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>首页</title> <!-- 开发环境版本，包含了有帮助的命令行警告 --> <script src=\\\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\\\"></script> </head> <body> <div id=\\\"app\\\"> <h1>{{ name }}</h1> </div> <script> //创建一个Vue对象 const app = new Vue({ //指定,该对象代表 <div id=\\\"app\\\">,也就是说,这个div中的所有内容,都被当前的app对象管理 el: \\\"#app\\\", //定义vue中的数据 data: { name: \\\"vue\\\" } }); </script> </body> </html> \"]},\"160\":{\"h\":\"Springcloud\"},\"161\":{\"h\":\"Back\"},\"162\":{\"h\":\"Springboot\"},\"163\":{\"h\":\"Css\"},\"164\":{\"h\":\"Front\"},\"165\":{\"h\":\"Js\"},\"166\":{\"h\":\"Vue\"}},\"dirtCount\":0,\"index\":[[\"介绍\",{\"1\":{\"159\":1}}],[\"介绍来自\",{\"1\":{\"24\":1}}],[\"参考官网\",{\"1\":{\"159\":1}}],[\"参数校验异常\",{\"1\":{\"113\":1,\"117\":3}}],[\"变化时\",{\"1\":{\"158\":1}}],[\"视图数据层\",{\"1\":{\"158\":1}}],[\"视图层\",{\"1\":{\"158\":1}}],[\"负责数据的展示\",{\"1\":{\"158\":1}}],[\"负载性能比\",{\"1\":{\"68\":1}}],[\"负载了若干较重的组件\",{\"1\":{\"68\":1}}],[\"负载均衡\",{\"1\":{\"10\":1}}],[\"理解\",{\"0\":{\"158\":1}}],[\"理论上讲\",{\"1\":{\"71\":1}}],[\"帮助你高效地开发用户界面\",{\"1\":{\"157\":1}}],[\"帮助您更敏捷和容易地构建\",{\"1\":{\"24\":1}}],[\"帮助您快速实现动态服务发现\",{\"1\":{\"24\":1}}],[\"看到吃不到\",{\"1\":{\"155\":1}}],[\"看似只是引入了一个依赖\",{\"1\":{\"76\":1}}],[\"既可以在\",{\"1\":{\"155\":1}}],[\"既然\",{\"1\":{\"68\":1}}],[\"既然服务需要拉取\",{\"1\":{\"52\":1}}],[\"暴露\",{\"1\":{\"155\":3}}],[\"跨域\",{\"0\":{\"155\":1}}],[\"跨数据源的业务需求\",{\"1\":{\"121\":1}}],[\"改造\",{\"1\":{\"154\":1}}],[\"转换成空格输出\",{\"1\":{\"154\":1}}],[\"串中的\",{\"1\":{\"154\":1}}],[\"显示出来\",{\"1\":{\"154\":1}}],[\"码串\",{\"1\":{\"154\":1}}],[\"码\",{\"1\":{\"154\":2}}],[\"规定\",{\"1\":{\"154\":1}}],[\"示例\",{\"1\":{\"153\":1}}],[\"示例代码如下\",{\"1\":{\"74\":1}}],[\"释放blob\",{\"1\":{\"152\":1}}],[\"生成对应二进制数据\",{\"1\":{\"152\":1}}],[\"生产可以分别设置三个命名空间来互相隔离\",{\"1\":{\"36\":1}}],[\"生产环境等不同环境\",{\"1\":{\"35\":1}}],[\"怎么将二进制数据变成文件呢\",{\"1\":{\"152\":1}}],[\"怎么解决呢\",{\"1\":{\"75\":1}}],[\"明显体验上不好\",{\"1\":{\"151\":1}}],[\"标签的方法\",{\"1\":{\"152\":1}}],[\"标签挂载到\",{\"1\":{\"150\":1}}],[\"标签来实现文件的下载\",{\"1\":{\"150\":1}}],[\"标签上添加\",{\"1\":{\"150\":1}}],[\"标签\",{\"0\":{\"150\":1},\"1\":{\"150\":3}}],[\"动态添加\",{\"0\":{\"150\":1}}],[\"动态的管理起来\",{\"1\":{\"27\":1}}],[\"导出不同的统计结果\",{\"1\":{\"147\":1}}],[\"导入到\",{\"1\":{\"60\":1}}],[\"导入坐标\",{\"0\":{\"29\":1,\"50\":1}}],[\"纯色系滚动条\",{\"1\":{\"146\":1}}],[\"三\",{\"0\":{\"146\":1,\"159\":1}}],[\"仅可在\",{\"1\":{\"145\":1}}],[\"仅仅对\",{\"1\":{\"142\":1}}],[\"仅仅\",{\"1\":{\"142\":1}}],[\"仅仅在其标注的实体属性上生效\",{\"1\":{\"80\":1}}],[\"仅仅使用轮询策略\",{\"1\":{\"44\":1}}],[\"仅仅创建一张用户表\",{\"1\":{\"14\":1}}],[\"整个滚动条\",{\"1\":{\"145\":1,\"146\":2}}],[\"整合\",{\"1\":{\"131\":1}}],[\"整合mybatis\",{\"0\":{\"131\":1}}],[\"整合的过程\",{\"1\":{\"122\":1}}],[\"伪类\",{\"0\":{\"145\":1},\"1\":{\"145\":1}}],[\"二\",{\"0\":{\"145\":1,\"152\":1,\"158\":1}}],[\"二者的区别如下\",{\"1\":{\"153\":1}}],[\"二者在使用上略有不同\",{\"1\":{\"140\":1}}],[\"二者均为\",{\"1\":{\"136\":1}}],[\"滑块的颜色要比轨道的颜色深一些\",{\"1\":{\"144\":1}}],[\"另一部分是滚动条的轨道\",{\"1\":{\"144\":1}}],[\"另外\",{\"1\":{\"58\":1}}],[\"另外有一个模块涉及到了图片处理\",{\"1\":{\"1\":1}}],[\"滚动条没有滑块的轨道部分\",{\"1\":{\"145\":1}}],[\"滚动条轨道\",{\"1\":{\"145\":1,\"146\":2}}],[\"滚动条上的滚动滑块\",{\"1\":{\"145\":1,\"146\":2}}],[\"滚动条的上下箭头\",{\"1\":{\"145\":1}}],[\"滚动条的组成\",{\"0\":{\"144\":1}}],[\"滚动条由三部分组成\",{\"1\":{\"144\":1}}],[\"角色名称不能为空\",{\"1\":{\"142\":1}}],[\"角色不能为空\",{\"1\":{\"142\":1}}],[\"假如\",{\"1\":{\"142\":1}}],[\"假设这么一个需求\",{\"1\":{\"77\":1}}],[\"做了非空校验\",{\"1\":{\"142\":1}}],[\"支持嵌套校验\",{\"1\":{\"142\":1}}],[\"支持两种部署模式\",{\"1\":{\"38\":1}}],[\"两者是否能用于成员属性\",{\"1\":{\"142\":1}}],[\"两个数据源属性对象解析为\",{\"1\":{\"125\":1}}],[\"构建\",{\"1\":{\"157\":1}}],[\"构建完\",{\"1\":{\"69\":1}}],[\"构造\",{\"1\":{\"152\":1}}],[\"构造函数\",{\"1\":{\"142\":1}}],[\"嵌套校验\",{\"0\":{\"142\":1}}],[\"异常处理\",{\"0\":{\"139\":1}}],[\"异常\",{\"1\":{\"138\":3}}],[\"异常说明\",{\"0\":{\"138\":1}}],[\"异常都会被该异常处理方法处理\",{\"1\":{\"113\":1}}],[\"集合了\",{\"1\":{\"142\":1}}],[\"集合\",{\"1\":{\"137\":1}}],[\"集群里看到两个\",{\"1\":{\"44\":1}}],[\"集群名字\",{\"1\":{\"43\":1}}],[\"集群上\",{\"1\":{\"43\":1}}],[\"集群启动后\",{\"1\":{\"43\":1}}],[\"集群配置文件中添加本地及其不同端口的三个\",{\"1\":{\"42\":1}}],[\"集群配置\",{\"0\":{\"42\":1}}],[\"集群部署架构图\",{\"1\":{\"39\":1}}],[\"集群部署模式\",{\"1\":{\"38\":1}}],[\"集群架构\",{\"0\":{\"39\":1}}],[\"集群\",{\"0\":{\"33\":1,\"38\":1,\"41\":1}}],[\"附加的\",{\"1\":{\"137\":1}}],[\"约束\",{\"1\":{\"137\":1}}],[\"约定不符合期待时才需要对约定进行替换配置\",{\"1\":{\"59\":1}}],[\"约定优于配置是一个简单的概念\",{\"1\":{\"59\":1}}],[\"约定优于配置\",{\"0\":{\"59\":1},\"1\":{\"59\":3}}],[\"常用校验注解\",{\"0\":{\"137\":1}}],[\"常用于统计在线人数和在线用户\",{\"1\":{\"95\":1}}],[\"校验失败会抛出异常\",{\"1\":{\"139\":1}}],[\"校验失败\",{\"1\":{\"138\":2}}],[\"校验注解标注的位置不同\",{\"1\":{\"138\":1}}],[\"校验包被独立成了一个\",{\"1\":{\"136\":1}}],[\"校验的拦截器\",{\"1\":{\"90\":1}}],[\"校验的请求\",{\"1\":{\"90\":1}}],[\"里面列出来\",{\"1\":{\"155\":1}}],[\"里面包含很多的\",{\"1\":{\"68\":1}}],[\"里的\",{\"1\":{\"136\":1}}],[\"字段\",{\"1\":{\"142\":3}}],[\"字段的一些校验注解\",{\"1\":{\"136\":1}}],[\"字符\",{\"1\":{\"70\":1}}],[\"字符串trim\",{\"1\":{\"137\":2}}],[\"字符串不能为null\",{\"1\":{\"137\":1}}],[\"字符串\",{\"1\":{\"70\":1,\"79\":1}}],[\"字符串可以不加引号\",{\"1\":{\"69\":1}}],[\"经常需要对接口的参数进行校验\",{\"1\":{\"135\":1}}],[\"工具直接向后端请求一些违法数据\",{\"1\":{\"135\":1}}],[\"工程时需要在\",{\"1\":{\"67\":1}}],[\"工程的入口\",{\"1\":{\"63\":1}}],[\"切换数据源是基于\",{\"1\":{\"133\":1}}],[\"清除掉\",{\"1\":{\"132\":1}}],[\"清除数据源\",{\"1\":{\"128\":1}}],[\"取\",{\"1\":{\"132\":1}}],[\"取代了\",{\"1\":{\"78\":1}}],[\"取代了ejb\",{\"1\":{\"56\":1}}],[\"取代传统\",{\"1\":{\"56\":1}}],[\"指定\",{\"1\":{\"159\":1}}],[\"指定文件名\",{\"1\":{\"150\":1}}],[\"指定了需要切换数据源的\",{\"1\":{\"132\":1}}],[\"指定日志文件路径\",{\"1\":{\"107\":1}}],[\"指定日志文件名字和路径\",{\"1\":{\"107\":1}}],[\"答案是可以的\",{\"1\":{\"131\":1}}],[\"答案是肯定的\",{\"1\":{\"68\":1}}],[\"连接的\",{\"1\":{\"131\":1}}],[\"连接池为例\",{\"1\":{\"122\":1}}],[\"先来看看\",{\"1\":{\"131\":1}}],[\"先来简单介绍下\",{\"1\":{\"56\":1}}],[\"初始化动态数据源\",{\"0\":{\"130\":1}}],[\"完成datasource对象的解析\",{\"1\":{\"129\":1}}],[\"线程\",{\"1\":{\"128\":1}}],[\"隔离线程\",{\"1\":{\"128\":1}}],[\"存储在\",{\"1\":{\"128\":1}}],[\"了\",{\"1\":{\"128\":1}}],[\"说到\",{\"1\":{\"136\":1}}],[\"说到线程隔离\",{\"1\":{\"128\":1}}],[\"说明\",{\"1\":{\"71\":1,\"106\":1}}],[\"说明能提供服务的机器已经\",{\"1\":{\"32\":1}}],[\"`password`\",{\"1\":{\"127\":1}}],[\"`username`\",{\"1\":{\"127\":1}}],[\"`id`\",{\"1\":{\"127\":2}}],[\"`t\",{\"1\":{\"127\":1}}],[\"`webmvcconfigureradapter`\",{\"1\":{\"78\":1}}],[\"`webmvcconfigurer`\",{\"1\":{\"78\":1}}],[\"环境准备\",{\"0\":{\"127\":1}}],[\"直接打开\",{\"1\":{\"153\":1}}],[\"直接在对象参数上标注\",{\"1\":{\"138\":1}}],[\"直接返回\",{\"1\":{\"125\":1}}],[\"直接调用\",{\"1\":{\"27\":1}}],[\"源码如下\",{\"1\":{\"125\":1}}],[\"||\",{\"1\":{\"124\":1}}],[\"意味着我们可以在\",{\"1\":{\"122\":1}}],[\"阿里的\",{\"1\":{\"122\":1}}],[\"何时用到多数据源\",{\"0\":{\"121\":1}}],[\"语句封装了一下\",{\"1\":{\"119\":1}}],[\"语言来做\",{\"1\":{\"1\":1}}],[\"抛出这个自定义异常即可\",{\"1\":{\"118\":1}}],[\"抛出的\",{\"1\":{\"113\":1}}],[\"抛出的异常\",{\"1\":{\"113\":1}}],[\"拦截\",{\"1\":{\"117\":1}}],[\"拦截器添加到\",{\"1\":{\"90\":1}}],[\"拦截器可以在请求处理之后对响应数据进行缓存\",{\"1\":{\"88\":1}}],[\"拦截器可以在请求处理过程中记录请求和响应的详细信息\",{\"1\":{\"88\":1}}],[\"拦截器可以在请求到达处理器之前对请求数据进行校验\",{\"1\":{\"88\":1}}],[\"拦截器可以在请求到达处理器之前进行幂等性校验\",{\"1\":{\"88\":1}}],[\"拦截器可以在请求到达处理器之前进行权限验证\",{\"1\":{\"88\":1}}],[\"拦截器可以在请求到达目标处理器之前\",{\"1\":{\"87\":1}}],[\"拦截器的功能\",{\"0\":{\"88\":1}}],[\"拦截器的主要目的是在不修改原有代码的情况下\",{\"1\":{\"87\":1}}],[\"拦截器\",{\"0\":{\"86\":1,\"87\":1},\"1\":{\"87\":1,\"88\":1}}],[\"手机号格式是否正确\",{\"1\":{\"135\":1}}],[\"手机号已存在\",{\"1\":{\"116\":1}}],[\"手机号码\",{\"1\":{\"14\":1}}],[\"登录注册相关\",{\"1\":{\"116\":1}}],[\"登录过期\",{\"1\":{\"90\":1}}],[\"操作失败\",{\"1\":{\"116\":1}}],[\"操作成功\",{\"1\":{\"116\":2}}],[\"失败\",{\"1\":{\"116\":1}}],[\"成功\",{\"1\":{\"116\":1}}],[\"状态描述\",{\"1\":{\"116\":1}}],[\"状态为不健康的\",{\"1\":{\"46\":1}}],[\"越来越多的项目采用前后端分离的开发模式\",{\"1\":{\"116\":1}}],[\"越来越多的人加入到项目的开发团队\",{\"1\":{\"1\":1}}],[\"配合\",{\"1\":{\"114\":1}}],[\"配置事务管理器\",{\"0\":{\"133\":1}}],[\"配置数据源的相关信息\",{\"1\":{\"127\":1}}],[\"配置参数\",{\"1\":{\"106\":1}}],[\"配置一个过滤器很简单\",{\"1\":{\"92\":1}}],[\"配置一个拦截器非常简单\",{\"1\":{\"89\":1}}],[\"配置异常处理器\",{\"1\":{\"78\":1}}],[\"配置异步请求\",{\"1\":{\"78\":1}}],[\"配置消息转换器\",{\"1\":{\"78\":1}}],[\"配置统一返回值的处理器\",{\"1\":{\"78\":1}}],[\"配置视图解析器\",{\"1\":{\"78\":1}}],[\"配置默认的静态资源处理器\",{\"1\":{\"78\":1}}],[\"配置请求的\",{\"1\":{\"78\":1}}],[\"配置接口\",{\"0\":{\"78\":1}}],[\"配置信息是我们无法在开发时就能确定的\",{\"1\":{\"71\":1}}],[\"配置随机值\",{\"0\":{\"70\":1}}],[\"配置类需要继承\",{\"1\":{\"78\":1}}],[\"配置类\",{\"1\":{\"56\":1}}],[\"配置热更新\",{\"0\":{\"53\":1}}],[\"配置文件不会被日志框架直接加载\",{\"1\":{\"108\":1}}],[\"配置文件属性时进行提示\",{\"1\":{\"73\":1}}],[\"配置文件中进行简单配置即可\",{\"1\":{\"131\":1}}],[\"配置文件中进行如下配置\",{\"1\":{\"80\":1}}],[\"配置文件中添加一些\",{\"1\":{\"108\":1}}],[\"配置文件中对日志进行的配置只适用一些简单的场景\",{\"1\":{\"108\":1}}],[\"配置文件中配置如下内容\",{\"1\":{\"104\":1}}],[\"配置文件中的配置为主\",{\"1\":{\"71\":1}}],[\"配置文件中出现了相同的配置\",{\"1\":{\"71\":1}}],[\"配置文件优先级\",{\"0\":{\"71\":1}}],[\"配置文件语法的具体示例\",{\"1\":{\"69\":1}}],[\"配置文件的\",{\"1\":{\"56\":1}}],[\"配置文件进行项目开发\",{\"1\":{\"56\":1}}],[\"配置文件\",{\"1\":{\"56\":1}}],[\"配置文件格式\",{\"1\":{\"51\":1}}],[\"配置文件外\",{\"1\":{\"51\":1}}],[\"配置合并\",{\"1\":{\"51\":1}}],[\"配置权限控制功能\",{\"1\":{\"48\":1}}],[\"配置缺乏安全审计\",{\"1\":{\"48\":1}}],[\"配置散乱且格式不标准\",{\"1\":{\"48\":1}}],[\"配置如下\",{\"1\":{\"44\":1}}],[\"配置\",{\"0\":{\"43\":1},\"1\":{\"56\":2,\"57\":1}}],[\"配置分组\",{\"1\":{\"37\":1}}],[\"配置和管理微服务\",{\"1\":{\"24\":1}}],[\"配置管理和服务管理平台\",{\"1\":{\"24\":1}}],[\"配置中心新建了一个\",{\"1\":{\"54\":1}}],[\"配置中心上添加阿里云的短信服务配置\",{\"1\":{\"53\":1}}],[\"配置中心管理的配置再与本地的\",{\"1\":{\"52\":1}}],[\"配置中心名字\",{\"1\":{\"51\":1}}],[\"配置中心地址等\",{\"1\":{\"71\":1}}],[\"配置中心地址\",{\"1\":{\"51\":1}}],[\"配置中心地址呢\",{\"1\":{\"51\":1}}],[\"配置中心信息之前\",{\"1\":{\"51\":1}}],[\"配置中心时\",{\"1\":{\"51\":1}}],[\"配置中心配置\",{\"0\":{\"51\":1},\"1\":{\"52\":1}}],[\"配置中心就是一个统一存放配置的地方\",{\"1\":{\"48\":1}}],[\"配置中心\",{\"0\":{\"47\":1,\"49\":1},\"1\":{\"10\":1,\"50\":1}}],[\"控制器添加统一的操作或处理\",{\"1\":{\"114\":1}}],[\"控制台输出\",{\"1\":{\"108\":1}}],[\"控制台配置列表右上角的\",{\"1\":{\"52\":1}}],[\"控制台进行配置\",{\"1\":{\"44\":1}}],[\"控制台生成的命名空间id\",{\"1\":{\"36\":1}}],[\"控制台新建命名空间\",{\"1\":{\"36\":1}}],[\"控制台查看每个实例的\",{\"1\":{\"34\":1}}],[\"返回值类型和当前控制器中标识了\",{\"1\":{\"113\":1}}],[\"返回的就是\",{\"1\":{\"65\":1}}],[\"被注释的字符串的大小必须在指定的范围内\",{\"1\":{\"137\":1}}],[\"被注释的元素的大小必须在指定的范围内\",{\"1\":{\"137\":1}}],[\"被注释的元素必须在合适的范围内\",{\"1\":{\"137\":1}}],[\"被注释的元素必须是电子邮箱地址\",{\"1\":{\"137\":1}}],[\"被注释的元素必须是一个url\",{\"1\":{\"137\":1}}],[\"被注释的元素必须是一个将来的日期\",{\"1\":{\"137\":1}}],[\"被注释的元素必须是一个过去的日期\",{\"1\":{\"137\":1}}],[\"被注释的元素必须是一个数字\",{\"1\":{\"137\":5}}],[\"被注释的元素必须符合指定的正则表达式\",{\"1\":{\"137\":1}}],[\"被注释的元素必须不为\",{\"1\":{\"137\":1}}],[\"被注释的元素必须为\",{\"1\":{\"137\":3}}],[\"被\",{\"1\":{\"113\":1}}],[\"页面\",{\"1\":{\"111\":1}}],[\"很容易理解\",{\"1\":{\"132\":1}}],[\"很明显\",{\"1\":{\"111\":1}}],[\"很多资源都是需要登录后才可以访问的\",{\"1\":{\"90\":1}}],[\"很多第三方中间件也按照\",{\"1\":{\"58\":1}}],[\"很多服务可能都会使用到相同的功能\",{\"1\":{\"3\":1}}],[\"消息内容如下\",{\"1\":{\"111\":1}}],[\"消息内容\",{\"1\":{\"111\":1}}],[\"消费者可能访问到不健康的实例\",{\"1\":{\"46\":1}}],[\"浏览器会将\",{\"1\":{\"154\":1}}],[\"浏览器会下载该文件\",{\"1\":{\"149\":1}}],[\"浏览器下仍可能乱码\",{\"1\":{\"154\":1}}],[\"浏览器在打开时\",{\"1\":{\"153\":1}}],[\"浏览器在打开的时候会提示保存还是打开\",{\"1\":{\"153\":1}}],[\"浏览器自带的滚动条样式比较丑\",{\"1\":{\"143\":1}}],[\"浏览器通常默认自动发送请求头内容accept\",{\"1\":{\"111\":1}}],[\"浏览器访问\",{\"1\":{\"61\":1}}],[\"层的刷新\",{\"1\":{\"158\":1}}],[\"层的同步工作完全是自动的\",{\"1\":{\"158\":1}}],[\"层连接了起来\",{\"1\":{\"158\":1}}],[\"层和model\",{\"1\":{\"158\":1}}],[\"层和\",{\"1\":{\"158\":1}}],[\"层通过双向数据绑定将\",{\"1\":{\"158\":1}}],[\"层中定义\",{\"1\":{\"158\":1}}],[\"层异常\",{\"1\":{\"110\":1}}],[\"层级鲜明\",{\"1\":{\"69\":1}}],[\"层级也更加分明\",{\"1\":{\"69\":1}}],[\"尽管有时由于业务处理的需要我们会主动抛出一些异常\",{\"1\":{\"110\":1}}],[\"关于异常的理解\",{\"0\":{\"110\":1}}],[\"关闭等信息\",{\"1\":{\"104\":1}}],[\"拒绝\",{\"1\":{\"108\":2}}],[\"匹配时的操作\",{\"1\":{\"108\":2}}],[\"循环政策\",{\"1\":{\"108\":2}}],[\"qualifier\",{\"1\":{\"130\":2,\"131\":2,\"133\":1}}],[\"quartz\",{\"1\":{\"58\":1}}],[\"qos\",{\"1\":{\"108\":7}}],[\"特有的配置项\",{\"1\":{\"108\":1}}],[\"解决了数据频繁更新\",{\"1\":{\"158\":1}}],[\"解决跨域\",{\"1\":{\"155\":1}}],[\"解决办法也很简单\",{\"1\":{\"154\":1}}],[\"解码\",{\"1\":{\"152\":1}}],[\"解析日志配置文件\",{\"1\":{\"108\":1}}],[\"解压后的\",{\"1\":{\"25\":1}}],[\"像请求超时\",{\"1\":{\"118\":1}}],[\"像区分\",{\"1\":{\"108\":1}}],[\"像上面那样以包为单位设置日志级别是很麻烦的\",{\"1\":{\"104\":1}}],[\"固定为\",{\"1\":{\"107\":1}}],[\"本地环境\",{\"1\":{\"128\":1}}],[\"本地\",{\"1\":{\"106\":1}}],[\"本地机器名\",{\"1\":{\"106\":1}}],[\"本质上\",{\"1\":{\"46\":1}}],[\"输出方法名\",{\"1\":{\"106\":1}}],[\"输出\",{\"1\":{\"106\":1}}],[\"输出当前线程名称\",{\"1\":{\"106\":1}}],[\"输出日志级别\",{\"1\":{\"106\":1}}],[\"输出到毫秒的时间\",{\"1\":{\"106\":1}}],[\"输出到控制台等\",{\"1\":{\"103\":1}}],[\"输出到文件\",{\"1\":{\"103\":1}}],[\"输出到数据库\",{\"1\":{\"103\":1}}],[\"拿到日志对象后\",{\"1\":{\"105\":1}}],[\"打印日志\",{\"0\":{\"105\":1},\"1\":{\"105\":1}}],[\"打包的\",{\"1\":{\"71\":1}}],[\"再为组设置日志级别\",{\"1\":{\"104\":1}}],[\"再将这些服务都用到的配置信息\",{\"1\":{\"37\":1}}],[\"级别的日志\",{\"1\":{\"104\":1}}],[\"级别的权限控制\",{\"1\":{\"92\":1}}],[\"⽅便为以后优化程序提供数据⽀持\",{\"1\":{\"101\":1}}],[\"⽅便数据恢复和定位操作⼈\",{\"1\":{\"101\":1}}],[\"⽅便分析⽤户是正常登录还是恶意破解⽤户\",{\"1\":{\"101\":1}}],[\"记录\",{\"1\":{\"108\":2}}],[\"记录程序的执⾏时间\",{\"1\":{\"101\":1}}],[\"记录系统的操作⽇志\",{\"1\":{\"101\":1}}],[\"记录⽤户登录⽇志\",{\"1\":{\"101\":1}}],[\"记录日志信息等工作\",{\"1\":{\"89\":1}}],[\"想象⼀下\",{\"1\":{\"101\":1}}],[\"想要拦截器生效\",{\"1\":{\"89\":1}}],[\"定义vue中的数据\",{\"1\":{\"159\":1}}],[\"定义两个分组\",{\"1\":{\"141\":1}}],[\"定义用户注册事件\",{\"1\":{\"99\":1}}],[\"定义监听器\",{\"1\":{\"99\":1}}],[\"定义事件监听器\",{\"1\":{\"99\":1}}],[\"定义事件\",{\"1\":{\"99\":1}}],[\"定时任务组件和\",{\"1\":{\"58\":1}}],[\"步骤如下\",{\"1\":{\"99\":1}}],[\"执行afterpropertiesset方法\",{\"1\":{\"129\":1}}],[\"执行结束之后清除即可\",{\"1\":{\"128\":1}}],[\"执行流程\",{\"0\":{\"98\":1}}],[\"执行该注解所标注的类的\",{\"1\":{\"63\":1}}],[\"识别项目中的监听器规则是\",{\"1\":{\"97\":1}}],[\"事件发布器发布事件到事件监听器加载的过程\",{\"1\":{\"98\":1}}],[\"事件\",{\"1\":{\"97\":1}}],[\"广播器\",{\"1\":{\"97\":1}}],[\"模式简化了界面与业务的一览\",{\"1\":{\"158\":1}}],[\"模拟点击\",{\"1\":{\"150\":1}}],[\"模板引擎\",{\"1\":{\"96\":1}}],[\"模块来实现的\",{\"1\":{\"83\":1}}],[\"模块下\",{\"1\":{\"50\":1}}],[\"模块中\",{\"1\":{\"29\":1}}],[\"模块的边界也非常模糊\",{\"1\":{\"1\":1}}],[\"向在线用户列表中添加用户信息\",{\"1\":{\"96\":1}}],[\"向前端给出提示\",{\"1\":{\"90\":1}}],[\"根据不同的分组采用不同的验证机制\",{\"1\":{\"141\":1}}],[\"根据\",{\"1\":{\"96\":2}}],[\"维护在线用户列表\",{\"1\":{\"96\":1}}],[\"维护在线人数\",{\"1\":{\"96\":1}}],[\"维护成本越来越高\",{\"1\":{\"1\":1}}],[\"销毁的时候\",{\"1\":{\"96\":1}}],[\"利用双向数据绑定技术\",{\"1\":{\"158\":1}}],[\"利用\",{\"1\":{\"96\":1}}],[\"思路分析\",{\"1\":{\"96\":1}}],[\"活化\",{\"1\":{\"95\":1}}],[\"活化和钝化\",{\"1\":{\"95\":1}}],[\"钝化\",{\"1\":{\"95\":1}}],[\"删除\",{\"1\":{\"95\":3}}],[\"删除标志\",{\"1\":{\"14\":1,\"15\":1,\"16\":1}}],[\"统一响应格式\",{\"0\":{\"116\":1}}],[\"统一异常处理\",{\"0\":{\"112\":1}}],[\"统一接入\",{\"1\":{\"7\":1}}],[\"统计网站的访问量等\",{\"1\":{\"95\":1}}],[\"要实现数据源的动态切换\",{\"1\":{\"129\":1}}],[\"要想\",{\"1\":{\"93\":1}}],[\"要简单许多\",{\"1\":{\"58\":1}}],[\"推荐使用\",{\"1\":{\"93\":1}}],[\"推出的新的日期和时间\",{\"1\":{\"81\":1}}],[\"推出接口的\",{\"1\":{\"78\":1}}],[\"压缩响应信息\",{\"1\":{\"92\":1}}],[\"过滤的级别\",{\"1\":{\"108\":2}}],[\"过滤敏感词汇\",{\"1\":{\"92\":1}}],[\"过滤器\",{\"0\":{\"86\":1,\"91\":1}}],[\"静态图片文件或静态\",{\"1\":{\"92\":1}}],[\"静态资源请求的\",{\"1\":{\"90\":1}}],[\"判断\",{\"1\":{\"90\":1,\"96\":1}}],[\"判断请求的路径对应的处理方法是否为\",{\"1\":{\"90\":1}}],[\"未知异常\",{\"1\":{\"113\":1,\"117\":2}}],[\"未登录\",{\"1\":{\"90\":1}}],[\"未删除\",{\"1\":{\"14\":1,\"15\":1,\"16\":1}}],[\"获取数据源\",{\"1\":{\"128\":1}}],[\"获取当前线程对应数据源的标识key\",{\"1\":{\"124\":1}}],[\"获取日志对象也可以使用\",{\"1\":{\"105\":1}}],[\"获取在线用户\",{\"1\":{\"96\":1}}],[\"获取\",{\"1\":{\"96\":3}}],[\"获取请求头中的\",{\"1\":{\"90\":1}}],[\"获取的实例有健康可不健康之分\",{\"1\":{\"46\":1}}],[\"举个例子\",{\"1\":{\"90\":1}}],[\"令牌校验\",{\"0\":{\"90\":1}}],[\"缓存处理\",{\"1\":{\"88\":1}}],[\"确保数据的合法性\",{\"1\":{\"88\":1}}],[\"防止重复提交\",{\"1\":{\"88\":1}}],[\"便于后期分析和调试\",{\"1\":{\"88\":1}}],[\"权限控制\",{\"1\":{\"88\":1}}],[\"权重为\",{\"1\":{\"44\":1}}],[\"权重越大则访问频率越高\",{\"1\":{\"44\":1}}],[\"权重策略\",{\"0\":{\"44\":1}}],[\"处理注册逻辑\",{\"1\":{\"99\":1}}],[\"处理用户注册事件\",{\"1\":{\"99\":1}}],[\"处理器处理请求之后以及视图渲染之前执行特定的操作\",{\"1\":{\"87\":1}}],[\"处理静态资源\",{\"0\":{\"82\":1}}],[\"监听session内的对象\",{\"1\":{\"95\":1}}],[\"监听域对象中属性变化\",{\"1\":{\"95\":1}}],[\"监听域对象生命周期\",{\"1\":{\"95\":1}}],[\"监听\",{\"1\":{\"95\":7}}],[\"监听器监听到事件发布后执行\",{\"1\":{\"97\":1}}],[\"监听器包含以下模块\",{\"1\":{\"97\":1}}],[\"监听器也叫\",{\"1\":{\"95\":1}}],[\"监听器\",{\"0\":{\"86\":1,\"94\":1},\"1\":{\"97\":1}}],[\"监控跟踪\",{\"1\":{\"10\":1}}],[\"盘的\",{\"1\":{\"85\":1}}],[\"时会切分一次\",{\"1\":{\"107\":1}}],[\"时\",{\"1\":{\"89\":2}}],[\"时将文件上传到\",{\"1\":{\"85\":1}}],[\"时区\",{\"1\":{\"80\":1}}],[\"且在\",{\"1\":{\"142\":1}}],[\"且只有在当前控制器中抛出的异常才会被处理\",{\"1\":{\"113\":1}}],[\"且解析视图之前执行\",{\"1\":{\"89\":1}}],[\"且很容易造成版本冲突\",{\"1\":{\"84\":1}}],[\"且该引导类需要和项目的最里层的包同级\",{\"1\":{\"61\":1}}],[\"让用户拥有更好的体验\",{\"1\":{\"84\":1}}],[\"让用户自定义配置部署\",{\"1\":{\"71\":1}}],[\"映射\",{\"0\":{\"84\":1}}],[\"依据上面的规则可知\",{\"1\":{\"83\":1}}],[\"依赖即可\",{\"1\":{\"58\":1}}],[\"依赖\",{\"1\":{\"18\":1,\"68\":1,\"84\":1}}],[\"依赖关系不清晰\",{\"1\":{\"1\":1}}],[\"反序列化时\",{\"1\":{\"81\":1}}],[\"收到未知属性时不报异常\",{\"1\":{\"81\":1}}],[\"收货人电话\",{\"1\":{\"16\":1}}],[\"收货人姓名\",{\"1\":{\"16\":1}}],[\"zone\",{\"1\":{\"80\":1,\"81\":2}}],[\"zhangsan\",{\"1\":{\"69\":1}}],[\"日志最大的历史\",{\"1\":{\"108\":2}}],[\"日志文件名格式\",{\"1\":{\"108\":2}}],[\"日志文件的大小达到\",{\"1\":{\"107\":1}}],[\"日志输出格式\",{\"1\":{\"108\":1}}],[\"日志输出形式\",{\"1\":{\"103\":1}}],[\"日志存放路径\",{\"1\":{\"108\":1}}],[\"日志的默认配置\",{\"1\":{\"107\":1}}],[\"日志内容\",{\"1\":{\"106\":1}}],[\"日志生产时间\",{\"1\":{\"106\":1}}],[\"日志通常的配置如下\",{\"1\":{\"104\":1}}],[\"日志默认输出到控制台\",{\"1\":{\"104\":1}}],[\"日志打印格式\",{\"1\":{\"103\":1}}],[\"日志实现是日志具体的实现\",{\"1\":{\"103\":1}}],[\"日志实现\",{\"1\":{\"103\":1}}],[\"日志门面是不能单独使用的\",{\"1\":{\"103\":1}}],[\"日志门面定义了一组日志的接口规范\",{\"1\":{\"103\":1}}],[\"日志门面\",{\"1\":{\"103\":1}}],[\"日志分类\",{\"0\":{\"103\":1}}],[\"日志就是记录发生了什么\",{\"1\":{\"101\":1}}],[\"日志记录\",{\"1\":{\"88\":1}}],[\"日志级别包含\",{\"1\":{\"104\":1}}],[\"日志级别\",{\"0\":{\"104\":1},\"1\":{\"71\":1}}],[\"日期格式化\",{\"0\":{\"80\":1},\"1\":{\"80\":1}}],[\"值是否返回等\",{\"1\":{\"79\":1}}],[\"继承\",{\"1\":{\"78\":1}}],[\"拓展异常处理器\",{\"1\":{\"78\":1}}],[\"拓展消息转换器\",{\"0\":{\"81\":1},\"1\":{\"78\":1}}],[\"功能描述\",{\"1\":{\"78\":1}}],[\"功能可以将这些服务按照自定义的规则进行分类\",{\"1\":{\"37\":1}}],[\"重新设置在线用户列表\",{\"1\":{\"96\":1}}],[\"重写\",{\"1\":{\"78\":1}}],[\"重复劳动\",{\"1\":{\"3\":1}}],[\"否则为自定义扩展配置\",{\"1\":{\"78\":1}}],[\"否则会出现集群异常\",{\"1\":{\"42\":1}}],[\"第三步\",{\"1\":{\"99\":1}}],[\"第二步\",{\"1\":{\"99\":1}}],[\"第二种是继承\",{\"1\":{\"78\":1}}],[\"第一步\",{\"1\":{\"99\":1}}],[\"第一种是实现\",{\"1\":{\"78\":1}}],[\"访问\",{\"1\":{\"77\":1}}],[\"红米k50\",{\"1\":{\"77\":2}}],[\"查询结果为\",{\"1\":{\"119\":1}}],[\"查询订单信息\",{\"1\":{\"77\":1}}],[\"查看\",{\"1\":{\"25\":1}}],[\"上添加\",{\"1\":{\"142\":1}}],[\"上标注了\",{\"1\":{\"142\":1}}],[\"上标注该注解即可\",{\"1\":{\"93\":1}}],[\"上加上\",{\"1\":{\"142\":1}}],[\"上直接影响能否提供嵌套验证的功能\",{\"1\":{\"142\":1}}],[\"上\",{\"1\":{\"142\":2,\"150\":1}}],[\"上面的代码会返回指定中文文件名的\",{\"1\":{\"154\":1}}],[\"上面的断言类只提供了判断对象不为\",{\"1\":{\"119\":1}}],[\"上面的例子中日期的返回结果其实是一个时间戳\",{\"1\":{\"80\":1}}],[\"上面自定义了一个基本异常\",{\"1\":{\"118\":1}}],[\"上面创建的监听器并没有添加\",{\"1\":{\"96\":1}}],[\"上一篇创建\",{\"1\":{\"76\":1}}],[\"上架状态\",{\"1\":{\"15\":1}}],[\"或错误提示信息\",{\"1\":{\"116\":1}}],[\"或\",{\"1\":{\"75\":1,\"106\":6,\"138\":3,\"153\":1}}],[\"或者修改一个\",{\"1\":{\"1\":1}}],[\"读取配置信息还是需要配合\",{\"1\":{\"75\":1}}],[\"排除不需要拦截的路径\",{\"1\":{\"90\":1}}],[\"排除掉这个依赖\",{\"1\":{\"73\":1}}],[\"排除tomcat\",{\"1\":{\"68\":1}}],[\"供\",{\"1\":{\"73\":1}}],[\"底层采用\",{\"1\":{\"103\":1}}],[\"底层使用jackson将java对象转为json\",{\"1\":{\"81\":1}}],[\"底层为各种场景的配置都提供了一个配置元数据文件\",{\"1\":{\"73\":1}}],[\"底层的自动配置\",{\"1\":{\"69\":1}}],[\"什么意思呢\",{\"1\":{\"73\":1}}],[\"什么是监听器\",{\"0\":{\"95\":1}}],[\"什么是过滤器\",{\"0\":{\"92\":1}}],[\"什么是\",{\"0\":{\"56\":1,\"59\":1,\"157\":1}}],[\"什么是微服务\",{\"0\":{\"2\":1}}],[\"同级目录下或\",{\"1\":{\"71\":1}}],[\"同时也可以为不同的包指定不同的日志级别\",{\"1\":{\"104\":1}}],[\"同时提供了一个名为\",{\"1\":{\"103\":1}}],[\"同时衍生出了javaconfig\",{\"1\":{\"56\":1}}],[\"同时进行了大量的代码重构\",{\"1\":{\"56\":1}}],[\"同时在\",{\"1\":{\"56\":1}}],[\"同时还会将不健康\",{\"1\":{\"32\":1}}],[\"同时将该实例服务提供者信息从注册中心清除\",{\"1\":{\"27\":1}}],[\"加入\",{\"1\":{\"75\":1}}],[\"加密密钥配置等\",{\"1\":{\"71\":1}}],[\"加载spring\",{\"1\":{\"66\":1}}],[\"加载\",{\"1\":{\"66\":1}}],[\"优先级调到了最高\",{\"1\":{\"133\":1}}],[\"优先级设置到最高\",{\"1\":{\"132\":1}}],[\"优先级\",{\"1\":{\"71\":1}}],[\"路径\",{\"1\":{\"71\":1}}],[\"路由等问题\",{\"1\":{\"7\":1}}],[\"与\",{\"1\":{\"71\":1,\"136\":1,\"140\":1,\"158\":2}}],[\"与此同时\",{\"1\":{\"56\":1}}],[\"位字符串\",{\"1\":{\"70\":1}}],[\"含\",{\"1\":{\"70\":1}}],[\"产生新的日志文件\",{\"1\":{\"107\":1}}],[\"产生\",{\"1\":{\"70\":1}}],[\"区间的长整数\",{\"1\":{\"70\":2}}],[\"区间的整数\",{\"1\":{\"70\":2}}],[\"随机产生正负的长整数\",{\"1\":{\"70\":1}}],[\"随机产生正负的整数\",{\"1\":{\"70\":1}}],[\"随机产生\",{\"1\":{\"70\":4}}],[\"随着微服务架构的流行\",{\"1\":{\"9\":1}}],[\"随着服务的不断增多\",{\"1\":{\"7\":1}}],[\"随着单体应用功能的增多\",{\"1\":{\"1\":1}}],[\"描述\",{\"1\":{\"70\":1}}],[\"专门用于生成随机值\",{\"1\":{\"70\":1}}],[\"属性指定文件地址的文件\",{\"1\":{\"150\":1}}],[\"属性指定配置文件中属性的前缀\",{\"1\":{\"73\":1}}],[\"属性为相应的组名即可\",{\"1\":{\"141\":1}}],[\"属性设置到threadlocal\",{\"1\":{\"132\":1}}],[\"属性不存在的兼容处理\",{\"1\":{\"81\":1}}],[\"属性值指定为\",{\"1\":{\"75\":1}}],[\"属性\",{\"1\":{\"70\":2,\"113\":1,\"132\":1,\"150\":2}}],[\"属性配置等\",{\"1\":{\"57\":1}}],[\"⽐如密钥\",{\"1\":{\"70\":1}}],[\"大体可以分成\",{\"1\":{\"110\":1}}],[\"大小写敏感\",{\"1\":{\"69\":1}}],[\"大部分服务节点在\",{\"1\":{\"33\":1}}],[\"键代替空格\",{\"1\":{\"69\":1}}],[\"冒号后面要有空格\",{\"1\":{\"69\":1}}],[\"短横线后面要有空格\",{\"1\":{\"69\":1}}],[\"必须是\",{\"1\":{\"69\":1}}],[\"坐标即可\",{\"1\":{\"68\":1}}],[\"坐标\",{\"1\":{\"68\":1}}],[\"略胜一筹\",{\"1\":{\"68\":1}}],[\"程序的端口号\",{\"1\":{\"71\":1}}],[\"程序启动时就会自动读取该配置文件\",{\"1\":{\"71\":1}}],[\"程序是靠对象运行的\",{\"1\":{\"68\":1}}],[\"程序运行原理的\",{\"1\":{\"68\":1}}],[\"程序\",{\"1\":{\"68\":1}}],[\"现在怎么是把服务器扔到程序里\",{\"1\":{\"68\":1}}],[\"现在就可以在\",{\"1\":{\"44\":1}}],[\"居然启动了\",{\"1\":{\"68\":1}}],[\"前端下载文件通常会遇到这样两种情况\",{\"1\":{\"147\":1}}],[\"前端实现文件下载\",{\"0\":{\"147\":1}}],[\"前端在发送请求时也会进行参数校验\",{\"1\":{\"135\":1}}],[\"前端并没有\",{\"1\":{\"81\":1}}],[\"前端展现\",{\"1\":{\"1\":1}}],[\"前\",{\"1\":{\"78\":1}}],[\"前面的\",{\"1\":{\"68\":1}}],[\"内核的浏览器上生效\",{\"1\":{\"145\":1}}],[\"内容协商配置\",{\"1\":{\"78\":1}}],[\"内容如下\",{\"1\":{\"75\":1}}],[\"内部使用\",{\"1\":{\"128\":1}}],[\"内部提供了一个\",{\"1\":{\"70\":1}}],[\"内部依赖\",{\"1\":{\"22\":1}}],[\"内部依赖包\",{\"1\":{\"18\":1}}],[\"内置了如下三种服务器\",{\"1\":{\"68\":1}}],[\"内嵌\",{\"0\":{\"68\":1}}],[\"辅助功能\",{\"0\":{\"68\":1}}],[\"管理着该\",{\"1\":{\"67\":1}}],[\"管理了各个微服务的远程调用\",{\"1\":{\"19\":1}}],[\"又对\",{\"1\":{\"136\":1}}],[\"又称作\",{\"1\":{\"136\":1}}],[\"又继承了\",{\"1\":{\"67\":1}}],[\"又如何获取\",{\"1\":{\"51\":1}}],[\"外\",{\"1\":{\"66\":1}}],[\"外部服务向\",{\"1\":{\"39\":1}}],[\"该对象代表\",{\"1\":{\"159\":1}}],[\"该用户不存在\",{\"1\":{\"96\":1,\"119\":1}}],[\"该接口有三个方法可以实现\",{\"1\":{\"89\":1,\"92\":1}}],[\"该如何写接口呢\",{\"1\":{\"77\":1}}],[\"该方法调用的\",{\"1\":{\"125\":1}}],[\"该方法为抽象方法\",{\"1\":{\"124\":1}}],[\"该方法会在整个请求完成\",{\"1\":{\"89\":1}}],[\"该方法会在控制器方法调用之后\",{\"1\":{\"89\":1}}],[\"该方法会在控制器方法前执行\",{\"1\":{\"89\":1}}],[\"该方法的作用有两个\",{\"1\":{\"66\":1}}],[\"该方法内\",{\"1\":{\"65\":1}}],[\"该注解就是用于给\",{\"1\":{\"114\":1}}],[\"该注解底层使用\",{\"1\":{\"65\":1}}],[\"该注解的作用就是将启动类及其所在的\",{\"1\":{\"65\":1}}],[\"该注解表示开启自动配置功能\",{\"1\":{\"64\":1}}],[\"该注解是一个组合注解\",{\"1\":{\"63\":1}}],[\"该模块下管理着用户服务\",{\"1\":{\"22\":1}}],[\"方法参数和成员属性\",{\"1\":{\"142\":1}}],[\"方法和方法参数上\",{\"1\":{\"142\":1}}],[\"方法用于获取当前线程中对应的数据源\",{\"1\":{\"124\":1}}],[\"方法即可\",{\"1\":{\"92\":1}}],[\"方法进行拦截配置\",{\"1\":{\"89\":1}}],[\"方法后\",{\"1\":{\"78\":1}}],[\"方法名称\",{\"1\":{\"78\":1}}],[\"方法会将该包下的所有配置信息\",{\"1\":{\"65\":1}}],[\"方法\",{\"1\":{\"63\":1,\"65\":1,\"66\":1,\"78\":1,\"85\":1,\"125\":2,\"152\":1}}],[\"方式二\",{\"1\":{\"53\":1}}],[\"方式一\",{\"1\":{\"53\":1}}],[\"引入jetty\",{\"1\":{\"68\":1}}],[\"引导类所在的包路径\",{\"1\":{\"65\":1}}],[\"引导类作为\",{\"1\":{\"63\":1}}],[\"引导类\",{\"0\":{\"62\":1}}],[\"引发生产事故\",{\"1\":{\"48\":1}}],[\"创建一个vue对象\",{\"1\":{\"159\":1}}],[\"创建一个不使用模板的\",{\"1\":{\"61\":1}}],[\"创建下载元素\",{\"1\":{\"152\":1}}],[\"创建下载连接\",{\"1\":{\"152\":1}}],[\"创建动态数据源后\",{\"1\":{\"130\":1}}],[\"创建动态数据源\",{\"0\":{\"129\":1}}],[\"创建统计在线用户列表的\",{\"1\":{\"96\":1}}],[\"创建统计在线用户人数的监听器\",{\"1\":{\"96\":1}}],[\"创建消息转换器对象\",{\"1\":{\"81\":1}}],[\"创建\",{\"0\":{\"61\":1},\"1\":{\"150\":1}}],[\"创建的\",{\"1\":{\"60\":1}}],[\"创建服务\",{\"0\":{\"17\":1}}],[\"简单来说就是假如你所期待的配置与约定的配置一致\",{\"1\":{\"59\":1}}],[\"简化第三方依赖配置\",{\"1\":{\"57\":1}}],[\"简化\",{\"1\":{\"56\":1}}],[\"类如下所示\",{\"1\":{\"142\":1}}],[\"类的字段上需要有校验注解\",{\"1\":{\"142\":1}}],[\"类名\",{\"1\":{\"106\":1}}],[\"类似\",{\"1\":{\"95\":1,\"157\":1}}],[\"类似于以前\",{\"1\":{\"83\":1}}],[\"类中\",{\"1\":{\"66\":1,\"142\":1}}],[\"类\",{\"1\":{\"65\":1,\"78\":1}}],[\"类库\",{\"1\":{\"59\":1}}],[\"类型是\",{\"1\":{\"90\":1}}],[\"类型的\",{\"1\":{\"81\":1,\"122\":1}}],[\"类型的配置文件\",{\"1\":{\"71\":1}}],[\"类型这一说法\",{\"1\":{\"81\":1}}],[\"类型\",{\"1\":{\"52\":1}}],[\"旨在减少软件开发者需要的配置项\",{\"1\":{\"59\":1}}],[\"按约定编程\",{\"1\":{\"59\":1}}],[\"呢\",{\"1\":{\"59\":1}}],[\"究竟什么是\",{\"1\":{\"59\":1}}],[\"针对\",{\"1\":{\"58\":1}}],[\"机制抛弃了以前繁杂的配置\",{\"1\":{\"58\":1}}],[\"机制\",{\"1\":{\"58\":1}}],[\"健康检查\",{\"1\":{\"57\":1}}],[\"健康的+不健康的\",{\"1\":{\"46\":1}}],[\"零代码生成和零\",{\"1\":{\"57\":1}}],[\"开启下划线转驼峰\",{\"1\":{\"131\":1}}],[\"开头\",{\"1\":{\"58\":1}}],[\"开箱即用\",{\"1\":{\"57\":1}}],[\"开发环境版本\",{\"1\":{\"159\":1}}],[\"开发者只需要掌握日志门面的\",{\"1\":{\"103\":1}}],[\"开发人员通过\",{\"1\":{\"92\":1}}],[\"开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可\",{\"1\":{\"6\":1}}],[\"开发一个接口\",{\"0\":{\"77\":1}}],[\"开发的支持\",{\"1\":{\"83\":1}}],[\"开发的\",{\"1\":{\"76\":1}}],[\"开发的标准\",{\"1\":{\"56\":1}}],[\"开发所需的\",{\"1\":{\"61\":1}}],[\"开发速度缓慢\",{\"1\":{\"1\":1}}],[\"开发\",{\"1\":{\"1\":1,\"38\":1,\"61\":1}}],[\"能够使用内嵌的\",{\"1\":{\"57\":1}}],[\"快速创建并运行\",{\"1\":{\"57\":1}}],[\"快速响应变化\",{\"1\":{\"48\":1}}],[\"具体如下\",{\"1\":{\"105\":1}}],[\"具体的使用场景主要有如下几个方面\",{\"1\":{\"37\":1}}],[\"具有如下特性\",{\"1\":{\"57\":1}}],[\"领域微服务架构的最优落地技术\",{\"1\":{\"57\":1}}],[\"领域模型描述了服务与实例之间的边界和层级关系\",{\"1\":{\"31\":1}}],[\"领域模型\",{\"0\":{\"31\":1}}],[\"作为默认的日志系统\",{\"1\":{\"103\":1}}],[\"作为自动配置的\",{\"1\":{\"65\":2}}],[\"作为\",{\"1\":{\"57\":1}}],[\"应用中\",{\"1\":{\"95\":1}}],[\"应用通常会使用大量的\",{\"1\":{\"84\":1}}],[\"应用面广\",{\"1\":{\"68\":1}}],[\"应用可以内嵌\",{\"1\":{\"68\":1}}],[\"应用\",{\"1\":{\"57\":1,\"104\":1}}],[\"应用的初始搭建以及开发过程\",{\"1\":{\"56\":1}}],[\"应急处理等提供强有力的支持\",{\"1\":{\"48\":1}}],[\"敏捷地开发新一代基于\",{\"1\":{\"56\":1}}],[\"月又推出了\",{\"1\":{\"56\":1}}],[\"月正式推出了\",{\"1\":{\"56\":1}}],[\"年\",{\"1\":{\"56\":2}}],[\"年的轻量级开源框架\",{\"1\":{\"56\":1}}],[\"于\",{\"1\":{\"56\":1}}],[\"团队在原有\",{\"1\":{\"56\":1}}],[\"多个租户独立的saas系统等\",{\"1\":{\"121\":1}}],[\"多个服务共享配置\",{\"0\":{\"54\":1}}],[\"多数开发者也逐渐感受到了基于注解开发的便利\",{\"1\":{\"56\":1}}],[\"到了\",{\"1\":{\"56\":1}}],[\"等异步请求工具来实现\",{\"1\":{\"152\":1}}],[\"等等\",{\"1\":{\"136\":1}}],[\"等注解的方法是统一的\",{\"1\":{\"113\":1}}],[\"等注解注解配套使用\",{\"1\":{\"112\":1}}],[\"等域对象的创建和销毁事件\",{\"1\":{\"95\":1}}],[\"等一些高级功能\",{\"1\":{\"92\":1}}],[\"等\",{\"1\":{\"56\":1,\"103\":1,\"147\":1}}],[\"等近\",{\"1\":{\"10\":1}}],[\"虽然能通过这种方式下载文件\",{\"1\":{\"151\":1}}],[\"虽然很简单\",{\"1\":{\"119\":1}}],[\"虽然可以一劳永逸\",{\"1\":{\"117\":1}}],[\"虽然\",{\"1\":{\"56\":1}}],[\"虽然我们无法预防雪崩效应的发生\",{\"1\":{\"8\":1}}],[\"低效的开发模式\",{\"1\":{\"56\":1}}],[\"臃肿\",{\"1\":{\"56\":1}}],[\"它基于标准\",{\"1\":{\"157\":1}}],[\"它提供了一系列的静态方法\",{\"1\":{\"119\":1}}],[\"它必须和一种具体的日志实现框架相结合使用\",{\"1\":{\"103\":1}}],[\"它并不提供底层具体的实现逻辑\",{\"1\":{\"103\":1}}],[\"它可以在请求处理的过程中对请求和响应进行拦截和处理\",{\"1\":{\"87\":1}}],[\"它的出现使得开发者无须开发重量级的\",{\"1\":{\"56\":1}}],[\"它是一种基于前端开发的架构模式\",{\"1\":{\"158\":1}}],[\"它是\",{\"1\":{\"92\":1}}],[\"它是最顶层的数据结构\",{\"1\":{\"35\":1}}],[\"它是默认的服务注册方式\",{\"1\":{\"33\":1}}],[\"共享配置列表\",{\"1\":{\"54\":1}}],[\"=>\",{\"1\":{\"152\":1}}],[\"==\",{\"1\":{\"96\":2,\"119\":3,\"124\":3,\"125\":1}}],[\"=\",{\"1\":{\"53\":3,\"64\":1,\"73\":1,\"75\":9,\"77\":1,\"80\":2,\"81\":6,\"90\":4,\"93\":4,\"96\":13,\"99\":2,\"105\":1,\"113\":1,\"116\":3,\"117\":3,\"118\":5,\"122\":2,\"123\":2,\"124\":3,\"125\":5,\"128\":1,\"130\":5,\"131\":5,\"132\":6,\"137\":1,\"138\":2,\"139\":3,\"141\":4,\"142\":6,\"149\":1,\"150\":3,\"152\":7,\"159\":1}}],[\"热更新的使用方式\",{\"1\":{\"53\":1}}],[\"joinpoint\",{\"1\":{\"132\":3}}],[\"jndidatasourcelookup\",{\"1\":{\"123\":1}}],[\"jpg\",{\"1\":{\"85\":1}}],[\"jquery的坐标如下\",{\"1\":{\"84\":1}}],[\"jquery\",{\"1\":{\"84\":4,\"159\":1}}],[\"jsdelivr\",{\"1\":{\"159\":1}}],[\"jsr\",{\"1\":{\"136\":2}}],[\"jsp\",{\"1\":{\"92\":1}}],[\"js\",{\"0\":{\"165\":1},\"1\":{\"84\":2,\"159\":4}}],[\"jsonmapper\",{\"1\":{\"90\":2}}],[\"jsonformat\",{\"1\":{\"80\":2}}],[\"json\",{\"1\":{\"79\":2,\"81\":1,\"90\":2,\"111\":3}}],[\"json格式化\",{\"0\":{\"79\":1}}],[\"jetty<\",{\"1\":{\"68\":1}}],[\"jetty\",{\"1\":{\"68\":2}}],[\"jetty等\",{\"1\":{\"57\":1}}],[\"jacksonobjectmapper\",{\"1\":{\"81\":4}}],[\"jacksonautoconfiguration\",{\"1\":{\"79\":1}}],[\"jackson\",{\"1\":{\"79\":3,\"80\":1,\"81\":1}}],[\"jar\",{\"1\":{\"68\":1,\"71\":1,\"73\":1,\"85\":2}}],[\"javascript\",{\"1\":{\"157\":2}}],[\"javaee\",{\"1\":{\"136\":1}}],[\"javax\",{\"1\":{\"92\":1,\"125\":1,\"138\":1}}],[\"java8\",{\"1\":{\"78\":1,\"81\":1}}],[\"javainfo\",{\"1\":{\"75\":2}}],[\"java\",{\"1\":{\"56\":2,\"57\":1,\"68\":3,\"75\":7,\"84\":1,\"103\":2,\"106\":1,\"135\":1,\"136\":1,\"154\":1}}],[\"javabean\",{\"1\":{\"56\":1,\"75\":1}}],[\"java<\",{\"1\":{\"18\":1,\"21\":1}}],[\"j2ee\",{\"1\":{\"66\":1}}],[\"jdbctemplate\",{\"1\":{\"131\":8,\"132\":1}}],[\"jdbc\",{\"1\":{\"52\":2,\"122\":4,\"123\":1,\"127\":4,\"131\":2}}],[\"拉取和注册需要的配置信息\",{\"1\":{\"52\":1}}],[\"拉去服务时\",{\"1\":{\"46\":1}}],[\"添加\",{\"1\":{\"150\":1}}],[\"添加用户不携带id\",{\"1\":{\"141\":1,\"142\":1}}],[\"添加用户时需要验证邮箱\",{\"1\":{\"135\":1}}],[\"添加了一些新特性\",{\"1\":{\"136\":1}}],[\"添加到\",{\"1\":{\"81\":1}}],[\"添加跨域相关参数\",{\"1\":{\"78\":1}}],[\"添加自定义方法参数处理器\",{\"1\":{\"78\":1}}],[\"添加自定义视图控制器\",{\"1\":{\"78\":1}}],[\"添加自定义拦截器\",{\"1\":{\"78\":1}}],[\"添加自定义的\",{\"1\":{\"78\":1}}],[\"添加自定义静态资源处理\",{\"1\":{\"78\":1}}],[\"添加配置信息\",{\"1\":{\"52\":1}}],[\"添加需要集群\",{\"1\":{\"42\":1}}],[\"yyyy\",{\"1\":{\"80\":3,\"81\":2,\"106\":2,\"108\":2}}],[\"yamlpropertiesfactorybean\",{\"1\":{\"75\":2}}],[\"yaml是以空格缩进的程度来控制层级关系\",{\"1\":{\"69\":1}}],[\"yaml\",{\"1\":{\"52\":1}}],[\"ymlpropertyfactory\",{\"1\":{\"75\":2}}],[\"yml\",{\"1\":{\"30\":1,\"51\":8,\"52\":4,\"54\":3,\"69\":4,\"71\":1,\"73\":1,\"75\":2,\"80\":1,\"104\":1,\"108\":2,\"122\":1,\"131\":1}}],[\"号替换成\",{\"1\":{\"154\":1}}],[\"号\",{\"1\":{\"52\":1,\"154\":1}}],[\"点击下载\",{\"1\":{\"152\":1}}],[\"点击后移除\",{\"1\":{\"150\":1}}],[\"点击过快就会重置掉前面的请求\",{\"1\":{\"149\":1}}],[\"点击去\",{\"1\":{\"68\":1}}],[\"点击\",{\"1\":{\"52\":1}}],[\"之后\",{\"1\":{\"78\":1,\"136\":1}}],[\"之前\",{\"1\":{\"56\":1}}],[\"之前被读取\",{\"1\":{\"51\":1}}],[\"之间\",{\"1\":{\"44\":1}}],[\"之间的\",{\"1\":{\"32\":1}}],[\"才能完成项目启动\",{\"1\":{\"51\":1}}],[\"那我们就创建一个动态数据源\",{\"1\":{\"129\":1}}],[\"那是不是还可以使用其它服务器呢\",{\"1\":{\"68\":1}}],[\"那这样做有什么好处呢\",{\"1\":{\"48\":1}}],[\"那么什么是嵌套校验呢\",{\"1\":{\"142\":1}}],[\"那么什么情况下需要自定义静态资源的存放路径呢\",{\"1\":{\"85\":1}}],[\"那么如何保证切换数据源在前面执行呢\",{\"1\":{\"133\":1}}],[\"那么如何从自定义的配置文件中取值呢\",{\"1\":{\"75\":1}}],[\"那么日志框架是否可以单独使用呢\",{\"1\":{\"103\":1}}],[\"那么你能找到报错的原因吗\",{\"1\":{\"101\":1}}],[\"那么在传输给前端的时候就会产生精度丢失的问题\",{\"1\":{\"81\":1}}],[\"那么这两种实现方式有什么区别呢\",{\"1\":{\"78\":1}}],[\"那么这些条件服务器都要满足\",{\"1\":{\"1\":1}}],[\"那么会以\",{\"1\":{\"71\":1}}],[\"那么就可以不做任何配置\",{\"1\":{\"59\":1}}],[\"那么对应到数据库会存在一个名为\",{\"1\":{\"59\":1}}],[\"那么\",{\"1\":{\"59\":1,\"152\":1}}],[\"那么我们需要返回格式为\",{\"1\":{\"80\":1}}],[\"那么我们就可以只在本地保存\",{\"1\":{\"52\":1}}],[\"那么我们希望服务器的内存非常大\",{\"1\":{\"1\":1}}],[\"那么响应速度是非常慢的\",{\"1\":{\"48\":1}}],[\"出现错误啦\",{\"1\":{\"116\":1}}],[\"出了问题也无法及时回滚到上一个版本\",{\"1\":{\"48\":1}}],[\"出于高可用的考虑\",{\"1\":{\"38\":1}}],[\"谁\",{\"1\":{\"48\":1}}],[\"格式作为前后端交换数据格式\",{\"1\":{\"116\":1}}],[\"格式化\",{\"1\":{\"81\":1}}],[\"格式的配置文件\",{\"1\":{\"75\":2}}],[\"格式统一化\",{\"1\":{\"48\":1}}],[\"格式\",{\"1\":{\"48\":2,\"153\":1,\"154\":1,\"155\":1}}],[\"易引发生产事故\",{\"1\":{\"48\":1}}],[\"业务逻辑出现的异常基本都是对应特定的场景\",{\"1\":{\"119\":1}}],[\"业务数据等信息\",{\"1\":{\"116\":1}}],[\"业务风险非常大\",{\"1\":{\"48\":1}}],[\"业界没有严格统一的定义\",{\"1\":{\"2\":1}}],[\"比方说主备切换配置或者碰上故障需要修改配置\",{\"1\":{\"48\":1}}],[\"比如记事本打开\",{\"1\":{\"153\":1}}],[\"比如txt\",{\"1\":{\"153\":1}}],[\"比如根据前端选择\",{\"1\":{\"147\":1}}],[\"比如根据用户名获取用户信息\",{\"1\":{\"119\":1}}],[\"比如图片以及各种音视频资源等\",{\"1\":{\"147\":1}}],[\"比如获取\",{\"1\":{\"108\":1}}],[\"比如数据库配置\",{\"1\":{\"71\":1}}],[\"比如在发布的时候\",{\"1\":{\"48\":1}}],[\"比如\",{\"1\":{\"46\":1,\"58\":2}}],[\"比如开发\",{\"1\":{\"36\":1}}],[\"比如订单服务\",{\"1\":{\"35\":1}}],[\"比如war包\",{\"1\":{\"1\":1}}],[\"无滑道滚动条\",{\"1\":{\"146\":1}}],[\"无论是简单还是复杂的界面\",{\"1\":{\"157\":1}}],[\"无论是\",{\"1\":{\"132\":1}}],[\"无论哪种实现方式都只需要三步即可\",{\"1\":{\"99\":1}}],[\"无论哪种语言都支持http\",{\"1\":{\"6\":1}}],[\"无权限操作\",{\"1\":{\"116\":1}}],[\"无效\",{\"1\":{\"107\":1}}],[\"无需要重新重启服务器\",{\"1\":{\"48\":1}}],[\"无从追溯\",{\"1\":{\"48\":1}}],[\"无法对配置的变更发布进行认证授权\",{\"1\":{\"48\":1}}],[\"无法尽快通知到客户端\",{\"1\":{\"48\":1}}],[\"无法保证实时性\",{\"1\":{\"48\":1}}],[\"采用本地静态配置\",{\"1\":{\"48\":1}}],[\"顾名思义\",{\"1\":{\"48\":1,\"84\":1}}],[\"保证了如果不切换数据源\",{\"1\":{\"132\":1}}],[\"保证了整个系统的可⽤\",{\"1\":{\"46\":1}}],[\"保证输出信息友好\",{\"1\":{\"117\":1}}],[\"保护阈值时\",{\"1\":{\"46\":1}}],[\"保护阈值是⼀个⽐例值\",{\"1\":{\"46\":1}}],[\"保护阈值\",{\"0\":{\"46\":1}}],[\"牺牲了⼀些请求\",{\"1\":{\"46\":1}}],[\"全局异常处理器\",{\"0\":{\"115\":1,\"117\":1}}],[\"全面接管\",{\"1\":{\"78\":1}}],[\"全部提供给消费者\",{\"1\":{\"46\":1}}],[\"全自动的部署机制\",{\"1\":{\"2\":1}}],[\"若仅仅使用\",{\"1\":{\"135\":1}}],[\"若用户传入的用户名已被注册\",{\"1\":{\"118\":1}}],[\"若同时存在\",{\"1\":{\"107\":1}}],[\"若要开启\",{\"1\":{\"104\":1}}],[\"若在\",{\"1\":{\"83\":1}}],[\"若不加或加单引号则转义特殊字符\",{\"1\":{\"69\":1}}],[\"若加双引号则输出特殊字符\",{\"1\":{\"69\":1}}],[\"若\",{\"1\":{\"46\":1}}],[\"若是死了\",{\"1\":{\"45\":1}}],[\"进入controller前的异常和\",{\"1\":{\"110\":1}}],[\"进一步的定制\",{\"1\":{\"79\":1}}],[\"进一步产生雪崩效应\",{\"1\":{\"46\":1}}],[\"进行了二次封装\",{\"1\":{\"136\":1}}],[\"进行捕获并处理呢\",{\"1\":{\"114\":1}}],[\"进行注册\",{\"1\":{\"96\":1}}],[\"进行监听\",{\"1\":{\"96\":1}}],[\"进行校验也是不合理的\",{\"1\":{\"90\":1}}],[\"进行管理\",{\"1\":{\"21\":1,\"65\":1}}],[\"进行调用\",{\"1\":{\"2\":1}}],[\"个字符\",{\"1\":{\"106\":1}}],[\"个人比较喜欢使用的一种格式\",{\"1\":{\"69\":1}}],[\"个实例都处于不健康状态\",{\"1\":{\"46\":1}}],[\"个实例\",{\"1\":{\"46\":1}}],[\"个子项目\",{\"1\":{\"10\":1}}],[\"⼤流量场景会存在⼀定的问题\",{\"1\":{\"46\":1}}],[\"设置别名包\",{\"1\":{\"131\":1}}],[\"设置mapper文件路径\",{\"1\":{\"131\":1}}],[\"设置动态数据源\",{\"1\":{\"131\":1}}],[\"设置数据源\",{\"1\":{\"128\":1}}],[\"设置的优先级决定了\",{\"1\":{\"93\":1}}],[\"设置优先级别\",{\"1\":{\"93\":2}}],[\"设置拦截路径\",{\"1\":{\"90\":1}}],[\"设置对象转换器\",{\"1\":{\"81\":1}}],[\"设置\",{\"1\":{\"81\":1}}],[\"设置命名空间也很简单\",{\"1\":{\"36\":1}}],[\"设计两种服务注册模式的意义\",{\"1\":{\"46\":1}}],[\"设计了临时实例和持久化实两种服务注册模式\",{\"1\":{\"46\":1}}],[\"76<\",{\"1\":{\"68\":1}}],[\"7\",{\"0\":{\"133\":1},\"1\":{\"61\":1,\"67\":1,\"68\":1}}],[\"7bd3\",{\"1\":{\"45\":1}}],[\"7002\",{\"1\":{\"116\":1}}],[\"7001\",{\"1\":{\"44\":1,\"116\":2,\"119\":1}}],[\"7000\",{\"1\":{\"43\":1,\"52\":1,\"54\":1,\"116\":1}}],[\"front\",{\"0\":{\"164\":1}}],[\"fraction\",{\"1\":{\"137\":1}}],[\"framework\",{\"1\":{\"75\":4}}],[\"framework=springboot\",{\"1\":{\"75\":1}}],[\"function\",{\"1\":{\"149\":1,\"150\":1,\"151\":1,\"152\":2}}],[\"future\",{\"1\":{\"137\":1}}],[\"flag=\",{\"1\":{\"137\":1}}],[\"filter>\",{\"1\":{\"108\":2}}],[\"filtername\",{\"1\":{\"93\":1}}],[\"filter2\",{\"1\":{\"93\":5}}],[\"filter1\",{\"1\":{\"93\":5}}],[\"filterconfig\",{\"1\":{\"93\":1}}],[\"filterregistrationbean\",{\"1\":{\"93\":8}}],[\"filter\",{\"1\":{\"92\":4,\"93\":8,\"96\":1,\"108\":2}}],[\"filename=filename\",{\"1\":{\"153\":1}}],[\"filename\",{\"1\":{\"152\":2,\"153\":1,\"154\":2}}],[\"filenamepattern>\",{\"1\":{\"108\":2}}],[\"filenotfoundexception\",{\"1\":{\"75\":3}}],[\"file>\",{\"1\":{\"108\":2}}],[\"file\",{\"1\":{\"51\":1,\"52\":5,\"54\":1,\"85\":1,\"106\":1,\"107\":3,\"108\":4,\"116\":1}}],[\"finally\",{\"1\":{\"132\":1}}],[\"final\",{\"1\":{\"81\":4,\"90\":1,\"105\":1,\"116\":2,\"128\":1}}],[\"found\",{\"1\":{\"111\":1}}],[\"foreach\",{\"1\":{\"125\":1}}],[\"format\",{\"1\":{\"80\":1,\"81\":10}}],[\"formatter\",{\"1\":{\"78\":1}}],[\"for\",{\"1\":{\"75\":1,\"124\":1}}],[\"fowler\",{\"1\":{\"2\":1}}],[\"failed\",{\"1\":{\"116\":2,\"119\":1}}],[\"fail\",{\"1\":{\"81\":2,\"116\":1,\"117\":4,\"139\":3}}],[\"factorybean\",{\"1\":{\"131\":6}}],[\"factory=ymlpropertyfactory\",{\"1\":{\"75\":1}}],[\"factory\",{\"1\":{\"75\":6}}],[\"factories\",{\"1\":{\"66\":2}}],[\"false\",{\"1\":{\"45\":1,\"81\":1,\"89\":1,\"90\":2,\"108\":1,\"137\":1}}],[\"f354ee02\",{\"1\":{\"45\":1}}],[\"则通常配合\",{\"1\":{\"152\":1}}],[\"则也会对\",{\"1\":{\"142\":1}}],[\"则用默认的数据源\",{\"1\":{\"132\":1}}],[\"则调用jndidatasourcelookup的getdatasource方法\",{\"1\":{\"125\":1}}],[\"则视其为datasourcename\",{\"1\":{\"125\":1}}],[\"则抛出异常\",{\"1\":{\"124\":1}}],[\"则抛出自定义异常\",{\"1\":{\"118\":1}}],[\"则回退到默认数据源\",{\"1\":{\"124\":1}}],[\"则属于这一类\",{\"1\":{\"103\":1}}],[\"则会抛出\",{\"1\":{\"138\":1}}],[\"则会优先加载\",{\"1\":{\"83\":1}}],[\"则会等待其恢复健康\",{\"1\":{\"45\":1}}],[\"则可以在\",{\"1\":{\"80\":1}}],[\"则可以使用如下方式在每个服务中引用\",{\"1\":{\"54\":1}}],[\"则为全面接管\",{\"1\":{\"78\":1}}],[\"则其\",{\"1\":{\"52\":1}}],[\"则需要手动添加依赖\",{\"1\":{\"50\":1}}],[\"则\",{\"1\":{\"45\":1,\"107\":1,\"113\":1}}],[\"自然会想到\",{\"1\":{\"128\":1}}],[\"自定义注解切换数据源\",{\"0\":{\"132\":1}}],[\"自定义异常\",{\"0\":{\"118\":1}}],[\"自定义日志格式\",{\"0\":{\"106\":1}}],[\"自定义静态资源映射\",{\"0\":{\"85\":1}}],[\"自动配置类中\",{\"1\":{\"122\":1}}],[\"自动配置类是\",{\"1\":{\"79\":1}}],[\"自动配置的奥秘就藏在\",{\"1\":{\"66\":1}}],[\"自动配置注解\",{\"1\":{\"66\":1}}],[\"自动配置\",{\"1\":{\"57\":1}}],[\"自己还活着\",{\"1\":{\"45\":1}}],[\"自增主键\",{\"1\":{\"14\":1,\"15\":1,\"16\":1}}],[\"发音为\",{\"1\":{\"157\":1}}],[\"发送请求时指定响应类型为\",{\"1\":{\"152\":1}}],[\"发送一个心跳请求来告诉\",{\"1\":{\"45\":1}}],[\"发布用户注册事件\",{\"1\":{\"99\":1}}],[\"发布事件\",{\"1\":{\"99\":2}}],[\"发布器\",{\"1\":{\"97\":1}}],[\"发一个程序需要配置各种\",{\"1\":{\"56\":1}}],[\"发起注册时\",{\"1\":{\"39\":1}}],[\"临时实例每隔一段时间想\",{\"1\":{\"45\":1}}],[\"临时\",{\"0\":{\"45\":1}}],[\"临时节点通过主动发送\",{\"1\":{\"33\":1}}],[\"临时节点\",{\"1\":{\"33\":1}}],[\"因为这样做可维护性很差\",{\"1\":{\"103\":1}}],[\"因为如果微服务的权重都相同\",{\"1\":{\"44\":1}}],[\"因此开发者只需要专注对数据的维护操作即可\",{\"1\":{\"158\":1}}],[\"因此当\",{\"1\":{\"158\":1}}],[\"因此我们需要记录程序的行为\",{\"1\":{\"101\":1}}],[\"因此\",{\"1\":{\"9\":1,\"73\":1}}],[\"建议不要使用基于权重的策略\",{\"1\":{\"44\":1}}],[\"后端返回二进制文件流\",{\"0\":{\"152\":1}}],[\"后端返回下载地址\",{\"0\":{\"148\":1}}],[\"后端返回的是文件的二进制流\",{\"1\":{\"147\":1}}],[\"后端直接返回文件的网络地址\",{\"1\":{\"147\":1}}],[\"后端开发过程中\",{\"1\":{\"135\":1}}],[\"后可以等于\",{\"1\":{\"137\":1}}],[\"后也不能等于\",{\"1\":{\"137\":1}}],[\"后\",{\"1\":{\"43\":1}}],[\"也会自动变化\",{\"1\":{\"158\":1}}],[\"也会使用相关联的程序\",{\"1\":{\"153\":1}}],[\"也会注册\",{\"1\":{\"43\":1}}],[\"也就是用户界面\",{\"1\":{\"158\":1}}],[\"也就是滑块的轨道\",{\"1\":{\"144\":1}}],[\"也就是说\",{\"1\":{\"67\":1,\"159\":1}}],[\"也就是说当\",{\"1\":{\"65\":1}}],[\"也只会配置一个数据源\",{\"1\":{\"121\":1}}],[\"也写一个断言类\",{\"1\":{\"119\":1}}],[\"也提供了一个名为\",{\"1\":{\"96\":1}}],[\"也称之为过滤器\",{\"1\":{\"92\":1}}],[\"也是无能为力\",{\"1\":{\"114\":1}}],[\"也是一种\",{\"1\":{\"95\":1}}],[\"也是支持这种方式\",{\"1\":{\"93\":1}}],[\"也是支持配置的热更新的\",{\"1\":{\"53\":1}}],[\"也是提供了几种取值的方式\",{\"1\":{\"72\":1}}],[\"也被称作\",{\"1\":{\"59\":1}}],[\"也将不存在\",{\"1\":{\"52\":1}}],[\"也可以使用\",{\"1\":{\"96\":1}}],[\"也可以在客户端获取\",{\"1\":{\"155\":1}}],[\"也可以在实体属性上使用\",{\"1\":{\"80\":1}}],[\"也可以在配置类中修改\",{\"1\":{\"79\":1}}],[\"也可以是\",{\"1\":{\"69\":1}}],[\"也可以通过\",{\"1\":{\"52\":1}}],[\"也可以做集群\",{\"1\":{\"39\":1}}],[\"也可以配置元数据\",{\"1\":{\"33\":1}}],[\"版的\",{\"1\":{\"43\":1}}],[\"版本增加了一个注解\",{\"1\":{\"112\":1}}],[\"版本管理\",{\"0\":{\"67\":1}}],[\"版本在\",{\"1\":{\"56\":1}}],[\"版本\",{\"1\":{\"56\":2}}],[\"版本基本可以脱离\",{\"1\":{\"56\":1}}],[\"版本开始引入少量的注解\",{\"1\":{\"56\":1}}],[\"版本后不再默认加载\",{\"1\":{\"50\":1}}],[\"版本控制\",{\"1\":{\"48\":1}}],[\"版本的基础上进行了诸多功能的改进和扩展\",{\"1\":{\"56\":1}}],[\"版本的\",{\"1\":{\"25\":1}}],[\"版本可以在\",{\"1\":{\"25\":1}}],[\"最常见的就是各种\",{\"1\":{\"142\":1}}],[\"最高级别的日志\",{\"1\":{\"104\":1}}],[\"最低级别的日志\",{\"1\":{\"104\":1}}],[\"最终会执行\",{\"1\":{\"66\":1}}],[\"最终给开发者留出了一套简单易懂\",{\"1\":{\"10\":1}}],[\"最后再拦截一下\",{\"1\":{\"117\":1}}],[\"最后\",{\"1\":{\"42\":1,\"118\":1,\"131\":1}}],[\"信息\",{\"1\":{\"42\":4}}],[\"持久化日志\",{\"0\":{\"107\":1}}],[\"持久化实例\",{\"0\":{\"45\":1}}],[\"持久化之后\",{\"1\":{\"42\":1}}],[\"持久层\",{\"1\":{\"12\":1}}],[\"修改\",{\"0\":{\"146\":1}}],[\"修改浏览器滚动条样式\",{\"0\":{\"143\":1}}],[\"修改操作\",{\"1\":{\"95\":3}}],[\"修改实时生效\",{\"1\":{\"48\":1}}],[\"修改了什么配置\",{\"1\":{\"48\":1}}],[\"修改配置不灵活且需要经过较长的测试发布周期\",{\"1\":{\"48\":1}}],[\"修改其\",{\"1\":{\"43\":1}}],[\"修改其中的数据库配置\",{\"1\":{\"40\":1}}],[\"修改它的上线\",{\"1\":{\"34\":1}}],[\"需要引入如下依赖\",{\"1\":{\"136\":1}}],[\"需要切换到数据的key\",{\"1\":{\"132\":1}}],[\"需要导入如下依赖坐标\",{\"1\":{\"131\":1}}],[\"需要对数据源进行初始化\",{\"1\":{\"130\":1}}],[\"需要客户端重写\",{\"1\":{\"124\":1}}],[\"需要的依赖坐标如下\",{\"1\":{\"122\":1}}],[\"需要登录后操作\",{\"1\":{\"116\":1}}],[\"需要有一个地方对抛出的异常进行处理\",{\"1\":{\"110\":1}}],[\"需要继承\",{\"1\":{\"78\":1}}],[\"需要先定义一个\",{\"1\":{\"77\":1}}],[\"需要根据订单\",{\"1\":{\"77\":1}}],[\"需要被\",{\"1\":{\"63\":1}}],[\"需要为\",{\"1\":{\"61\":1}}],[\"需要将\",{\"1\":{\"51\":1}}],[\"需要和\",{\"1\":{\"42\":1}}],[\"需要分别修改这三个\",{\"1\":{\"42\":1}}],[\"需要在spring\",{\"1\":{\"89\":1}}],[\"需要在\",{\"1\":{\"42\":2,\"93\":1}}],[\"需要在名为\",{\"1\":{\"40\":1}}],[\"需要保证几十甚至几百个服务的正常运行与协作\",{\"1\":{\"3\":1}}],[\"安装\",{\"0\":{\"159\":1}}],[\"安装目录复制三份\",{\"1\":{\"42\":1}}],[\"安装目录的\",{\"1\":{\"40\":2,\"42\":1}}],[\"安全防护\",{\"1\":{\"7\":1}}],[\"last\",{\"1\":{\"155\":1}}],[\"lastindexof\",{\"1\":{\"150\":1}}],[\"language\",{\"1\":{\"155\":1}}],[\"lang=\",{\"1\":{\"96\":1,\"159\":1}}],[\"length\",{\"1\":{\"136\":1,\"137\":1}}],[\"lenientfallback\",{\"1\":{\"123\":1,\"124\":1}}],[\"level=\",{\"1\":{\"108\":4}}],[\"level>\",{\"1\":{\"108\":2}}],[\"levelfilter\",{\"1\":{\"108\":2}}],[\"level\",{\"1\":{\"104\":2}}],[\"ltai5tmgtkpbl2bcp6zsu4bz\",{\"1\":{\"53\":1}}],[\"line\",{\"1\":{\"108\":1}}],[\"lintener\",{\"1\":{\"99\":1}}],[\"lisenter\",{\"0\":{\"97\":1},\"1\":{\"96\":1}}],[\"list\",{\"1\":{\"96\":2,\"142\":1}}],[\"list<role>\",{\"1\":{\"142\":1}}],[\"list<user>\",{\"1\":{\"118\":1}}],[\"list<onlineuser>\",{\"1\":{\"96\":3}}],[\"list<string>\",{\"1\":{\"90\":1}}],[\"list<httpmessageconverter<\",{\"1\":{\"81\":1}}],[\"listenerconfig\",{\"1\":{\"96\":1}}],[\"listener\",{\"0\":{\"96\":1,\"98\":1,\"99\":1},\"1\":{\"95\":1,\"96\":2}}],[\"listen\",{\"1\":{\"43\":1}}],[\"lib\",{\"1\":{\"40\":1}}],[\"lookupkey\",{\"1\":{\"124\":4,\"125\":2}}],[\"lookup\",{\"1\":{\"123\":1,\"124\":1}}],[\"log<\",{\"1\":{\"108\":4}}],[\"log\",{\"1\":{\"105\":2,\"107\":3,\"108\":9,\"117\":4,\"141\":2,\"152\":1}}],[\"loggerfactory\",{\"1\":{\"105\":1}}],[\"logger\",{\"1\":{\"105\":1,\"106\":5,\"108\":1,\"122\":1}}],[\"logging\",{\"1\":{\"103\":3,\"104\":2,\"106\":1,\"107\":3,\"108\":1}}],[\"logback日志文件\",{\"0\":{\"108\":1}}],[\"logback\",{\"1\":{\"103\":2,\"104\":1,\"108\":17}}],[\"log4j2\",{\"1\":{\"103\":1}}],[\"log4j\",{\"1\":{\"103\":2}}],[\"login\",{\"1\":{\"90\":1,\"116\":2,\"138\":2}}],[\"logs\",{\"1\":{\"40\":2,\"107\":1,\"108\":1}}],[\"loadyamlintoproperties\",{\"1\":{\"75\":2}}],[\"loadbalancer\",{\"1\":{\"44\":1}}],[\"long\",{\"1\":{\"70\":3,\"77\":1,\"81\":2,\"141\":1,\"142\":2}}],[\"localtimeserializer\",{\"1\":{\"81\":1}}],[\"localtimedeserializer\",{\"1\":{\"81\":1}}],[\"localtime\",{\"1\":{\"81\":2}}],[\"localdateserializer\",{\"1\":{\"81\":1}}],[\"localdatedeserializer\",{\"1\":{\"81\":1}}],[\"localdate\",{\"1\":{\"81\":2}}],[\"localdatetimeserializer\",{\"1\":{\"81\":1}}],[\"localdatetimedeserializer\",{\"1\":{\"81\":1}}],[\"localdatetime\",{\"1\":{\"81\":2}}],[\"localhost\",{\"1\":{\"25\":1,\"43\":2,\"52\":1,\"61\":1,\"77\":1,\"83\":1,\"84\":1,\"85\":1,\"122\":2,\"127\":2}}],[\"locations\",{\"1\":{\"131\":1}}],[\"location\",{\"0\":{\"149\":1},\"1\":{\"43\":1,\"149\":2}}],[\"lombok\",{\"1\":{\"18\":1,\"105\":1}}],[\"命名一般以\",{\"1\":{\"58\":1}}],[\"命名空间下的服务是无法被注册为持久化实例的\",{\"1\":{\"45\":1}}],[\"命名空间主要的作用是区分服务使用的范围\",{\"1\":{\"36\":1}}],[\"命令如下\",{\"1\":{\"40\":1}}],[\"首先应该明确一点\",{\"1\":{\"110\":1}}],[\"首先\",{\"1\":{\"40\":1,\"53\":2,\"61\":1,\"90\":1,\"127\":1,\"131\":1,\"141\":1}}],[\"首先会经过\",{\"1\":{\"39\":1}}],[\"首先在\",{\"1\":{\"36\":1}}],[\"表\",{\"1\":{\"127\":1}}],[\"表示左对齐并且固定输出\",{\"1\":{\"106\":1}}],[\"表示组表示整个项目\",{\"1\":{\"104\":1}}],[\"表示程序可能存在潜在的问题\",{\"1\":{\"104\":1}}],[\"表示继续向下执行\",{\"1\":{\"89\":1}}],[\"表示除上面列举之外的其它字符\",{\"1\":{\"70\":1}}],[\"表示负载均衡\",{\"1\":{\"39\":1}}],[\"表结构如下\",{\"1\":{\"14\":1,\"15\":1,\"16\":1}}],[\"官方推荐优先使用带有\",{\"1\":{\"108\":1}}],[\"官方推荐的最佳实践是使用带有主从的高可用数据库集群\",{\"1\":{\"40\":1}}],[\"官方提供了\",{\"1\":{\"60\":1}}],[\"官方提供了很多当前流行的基础功能组件的封装\",{\"1\":{\"58\":1}}],[\"官方文档给出的\",{\"1\":{\"39\":1}}],[\"官网找到所需前端框架对应的\",{\"1\":{\"84\":1}}],[\"官网\",{\"1\":{\"24\":1}}],[\"官网地址\",{\"1\":{\"24\":1}}],[\"单一数据源的整合\",{\"0\":{\"122\":1}}],[\"单个数据库无法满足需求时\",{\"1\":{\"121\":1}}],[\"单机模式和集群模式\",{\"1\":{\"38\":1}}],[\"单体应用还有一个劣势就是技术栈不易扩展\",{\"1\":{\"1\":1}}],[\"单体应用变得越来越臃肿\",{\"1\":{\"1\":1}}],[\"单体应用可以很好地稳定运行\",{\"1\":{\"1\":1}}],[\"单体应用比较容易部署\",{\"1\":{\"1\":1}}],[\"单体应用架构存在的问题\",{\"0\":{\"1\":1}}],[\"然后通过动态添加\",{\"1\":{\"152\":1}}],[\"然后手动导入\",{\"1\":{\"60\":1}}],[\"然后在每个服务中引用即可\",{\"1\":{\"54\":1}}],[\"然后再根据服务的权重进行选择\",{\"1\":{\"44\":1}}],[\"然后再逐步将新版本的服务全部投入使用\",{\"1\":{\"37\":1}}],[\"然后\",{\"1\":{\"42\":1,\"61\":1,\"127\":1}}],[\"然后打开这个文件\",{\"1\":{\"42\":1}}],[\"然而\",{\"1\":{\"1\":1}}],[\"灰度发布是基于服务的\",{\"1\":{\"37\":1}}],[\"灰度发布\",{\"1\":{\"37\":1}}],[\"抽取为改分组下的一个配置文件\",{\"1\":{\"37\":1}}],[\"基本上都是大同小异\",{\"1\":{\"116\":1}}],[\"基础上进行更加细致的隔离\",{\"1\":{\"37\":1}}],[\"基于这种方式我们可以动态创建\",{\"1\":{\"150\":1}}],[\"基于时间创建日志文件\",{\"1\":{\"108\":2}}],[\"基于某种负载均衡策略选择一台服务实例发起远程调用\",{\"1\":{\"27\":1}}],[\"基于\",{\"1\":{\"10\":1}}],[\"接收\",{\"1\":{\"108\":2}}],[\"接着就是在实体类需要校验的属性上添加分组了\",{\"1\":{\"141\":1}}],[\"接着需要将实现的\",{\"1\":{\"90\":1}}],[\"接着需要在\",{\"1\":{\"81\":1}}],[\"接着使用\",{\"1\":{\"53\":1}}],[\"接着\",{\"1\":{\"40\":1,\"61\":1,\"131\":1}}],[\"接下来就可以在\",{\"1\":{\"36\":1}}],[\"接口实现的监听器\",{\"1\":{\"99\":1}}],[\"接口和基于\",{\"1\":{\"99\":1}}],[\"接口的实现类\",{\"1\":{\"97\":1}}],[\"接口的形式\",{\"1\":{\"27\":1}}],[\"接口即可\",{\"1\":{\"92\":1}}],[\"接口幂等性校验\",{\"1\":{\"88\":1}}],[\"接口\",{\"1\":{\"78\":2,\"85\":1}}],[\"接口调整成本高\",{\"1\":{\"3\":1}}],[\"通俗来讲\",{\"1\":{\"144\":1}}],[\"通过jndi查找多数据源对象默认实现类\",{\"1\":{\"123\":1}}],[\"通过jndi查找数据源\",{\"1\":{\"123\":1}}],[\"通过这个类可以实现动态数据源切换\",{\"1\":{\"123\":1}}],[\"通过这些行为能让我们更好的发现和定位错误所在位置\",{\"1\":{\"101\":1}}],[\"通过配置中心\",{\"1\":{\"48\":1}}],[\"通过不断调节不同组的服务权重来实现灰度发布\",{\"1\":{\"37\":1}}],[\"通过\",{\"1\":{\"35\":1,\"39\":1,\"99\":1,\"152\":1,\"158\":1}}],[\"通常的做法是修改浏览器滚动条的默认样式\",{\"1\":{\"143\":1}}],[\"通常的应用场景如下\",{\"1\":{\"121\":1}}],[\"通常不需要携带\",{\"1\":{\"141\":1}}],[\"通常将异常加入全局异常处理器进行处理\",{\"1\":{\"139\":1}}],[\"通常将新版本的服务和旧版本的服务同时运行一段时间\",{\"1\":{\"37\":1}}],[\"通常来说\",{\"1\":{\"135\":1}}],[\"通常只需要在\",{\"1\":{\"131\":1}}],[\"通常只会操作一个数据库\",{\"1\":{\"121\":1}}],[\"通常只会采取一种统一的配置文件格式\",{\"1\":{\"71\":1}}],[\"通常情况下\",{\"1\":{\"122\":1}}],[\"通常\",{\"1\":{\"116\":1}}],[\"通常需要先获取日志对象\",{\"1\":{\"105\":1}}],[\"通常在程序出现异常时使用\",{\"1\":{\"104\":1}}],[\"通常有如下两种方法\",{\"1\":{\"93\":1}}],[\"通常创建项目都是使用\",{\"1\":{\"60\":1}}],[\"通常使用枚举来定义\",{\"1\":{\"116\":1}}],[\"通常使用\",{\"1\":{\"39\":1}}],[\"通常会有多个服务同时运行\",{\"1\":{\"37\":1}}],[\"通常存在多个服务之间的远程调用需求\",{\"1\":{\"6\":1}}],[\"通常用于记录程序的启动\",{\"1\":{\"104\":1}}],[\"通常用于开发和测试阶段\",{\"1\":{\"104\":1}}],[\"通常用于排查问题\",{\"1\":{\"104\":1}}],[\"通常用\",{\"1\":{\"2\":1}}],[\"分组校验\",{\"0\":{\"141\":1}}],[\"分组之下\",{\"1\":{\"35\":1}}],[\"分库分表\",{\"1\":{\"121\":1}}],[\"分别对应着\",{\"1\":{\"92\":1}}],[\"分别命名为\",{\"1\":{\"42\":1}}],[\"分别是\",{\"1\":{\"35\":1}}],[\"分布式消息队列等解决方案\",{\"1\":{\"10\":1}}],[\"分布式事务等都会带来巨大挑战\",{\"1\":{\"3\":1}}],[\"分布式固有的复杂性\",{\"1\":{\"3\":1}}],[\"端口\",{\"1\":{\"42\":1}}],[\"端实现某些定制化的业务场景\",{\"1\":{\"34\":1}}],[\"端通过服务发现技术可以获取到\",{\"1\":{\"34\":1}}],[\"元数据\",{\"1\":{\"34\":1}}],[\"编辑实例的元数据信息\",{\"1\":{\"34\":1}}],[\"实际项目中\",{\"1\":{\"117\":1}}],[\"实际开发可根据该配置文件进行修改\",{\"1\":{\"108\":1}}],[\"实现双向绑定\",{\"1\":{\"158\":1}}],[\"实现数据驱动视图和双向数据绑定的核心原理\",{\"1\":{\"158\":1}}],[\"实现动态数据源\",{\"0\":{\"126\":1}}],[\"实现也很简单\",{\"1\":{\"107\":1}}],[\"实现过滤器\",{\"0\":{\"93\":1}}],[\"实现一个\",{\"1\":{\"90\":1}}],[\"实现拦截器\",{\"0\":{\"89\":1}}],[\"实现对请求和响应的统一处理\",{\"1\":{\"87\":1}}],[\"实现的\",{\"1\":{\"85\":1}}],[\"实现\",{\"0\":{\"96\":1,\"99\":1},\"1\":{\"78\":1,\"99\":1}}],[\"实例中属性的创建\",{\"1\":{\"95\":3}}],[\"实例的创建与销毁\",{\"1\":{\"95\":3}}],[\"实例了\",{\"1\":{\"44\":1}}],[\"实例永远不会被访问\",{\"1\":{\"44\":1}}],[\"实例为例\",{\"1\":{\"42\":1}}],[\"实例\",{\"0\":{\"34\":1}}],[\"实体模块\",{\"0\":{\"21\":1},\"1\":{\"17\":1,\"21\":1}}],[\"请求体参数校验异常\",{\"1\":{\"117\":1}}],[\"请求会在\",{\"1\":{\"111\":1}}],[\"请求失败\",{\"1\":{\"46\":1}}],[\"请求向服务器报送自己的状态\",{\"1\":{\"33\":1}}],[\"请求的\",{\"1\":{\"6\":1}}],[\"h1>\",{\"1\":{\"159\":1}}],[\"href\",{\"1\":{\"149\":1,\"150\":2,\"152\":4}}],[\"href直接指向一个文件的话\",{\"1\":{\"149\":1}}],[\"hibernate\",{\"1\":{\"136\":3,\"137\":1,\"140\":1}}],[\"highest\",{\"1\":{\"132\":1}}],[\"hisdatasource\",{\"1\":{\"130\":6,\"131\":2,\"132\":1}}],[\"hostaddress\",{\"1\":{\"106\":1}}],[\"hostname\",{\"1\":{\"106\":1}}],[\"hobbies\",{\"1\":{\"69\":1}}],[\"html>\",{\"1\":{\"96\":2,\"159\":2}}],[\"html\",{\"1\":{\"92\":1,\"111\":3,\"157\":1}}],[\"html页面中也可以直接引用\",{\"1\":{\"84\":1}}],[\"httpsessionevent\",{\"1\":{\"96\":2}}],[\"httpsessionactivationlistener\",{\"1\":{\"95\":1}}],[\"httpsessionattributelistener\",{\"1\":{\"95\":2}}],[\"httpsessionbindinglistener\",{\"1\":{\"95\":1}}],[\"httpsessionlistener\",{\"1\":{\"95\":1,\"96\":1}}],[\"httpsession\",{\"1\":{\"95\":4}}],[\"httpservletresponse\",{\"1\":{\"90\":1}}],[\"httpservletrequest\",{\"1\":{\"90\":1,\"96\":2}}],[\"https\",{\"1\":{\"24\":2,\"25\":1,\"60\":1,\"159\":1}}],[\"http\",{\"1\":{\"2\":1,\"6\":2,\"18\":4,\"19\":4,\"20\":4,\"21\":4,\"22\":4,\"25\":1,\"27\":1,\"43\":2,\"61\":1,\"77\":1,\"83\":1,\"84\":1,\"85\":1,\"96\":1,\"135\":1}}],[\"hh\",{\"1\":{\"80\":3,\"81\":2,\"106\":1,\"108\":1}}],[\"herf\",{\"0\":{\"149\":1},\"1\":{\"150\":1}}],[\"height\",{\"1\":{\"146\":2}}],[\"header\",{\"1\":{\"154\":1,\"155\":1}}],[\"headers\",{\"1\":{\"152\":2,\"155\":3}}],[\"head>\",{\"1\":{\"96\":1,\"159\":1}}],[\"heartbeat\",{\"1\":{\"33\":1}}],[\"hello\",{\"1\":{\"61\":4,\"74\":2}}],[\"hellocontroller\",{\"1\":{\"61\":1,\"74\":1}}],[\"helloworldapplication\",{\"1\":{\"61\":2,\"93\":1}}],[\"helloworld\",{\"0\":{\"61\":1},\"1\":{\"60\":1,\"61\":2,\"68\":1,\"76\":1}}],[\"helloworld解析\",{\"0\":{\"60\":1}}],[\"hastext\",{\"1\":{\"90\":1}}],[\"hashmap<>\",{\"1\":{\"53\":2,\"90\":2,\"113\":1,\"130\":1}}],[\"handlermethod\",{\"1\":{\"90\":1}}],[\"handlerinterceptor\",{\"1\":{\"89\":1,\"90\":1}}],[\"handler\",{\"1\":{\"78\":1,\"90\":3,\"113\":2}}],[\"hangzhou\",{\"1\":{\"53\":1}}],[\"从数据源集合中获取数据源对象\",{\"1\":{\"124\":1}}],[\"从数据库负责读操作\",{\"1\":{\"121\":1}}],[\"从字面上看\",{\"1\":{\"112\":1}}],[\"从而\",{\"1\":{\"158\":1}}],[\"从而减少沟通成本等\",{\"1\":{\"116\":1}}],[\"从而实现一些特殊功能\",{\"1\":{\"92\":1}}],[\"从而实现对不同用户的访问控制\",{\"1\":{\"88\":1}}],[\"从而实现\",{\"1\":{\"78\":1}}],[\"从而导致代码重复\",{\"1\":{\"3\":1}}],[\"从\",{\"1\":{\"50\":1,\"96\":1,\"152\":1}}],[\"从名字中就可以看出\",{\"1\":{\"33\":1}}],[\"除了发现和定位问题之外\",{\"1\":{\"101\":1}}],[\"除了将静态资源放到默认的资源目录下\",{\"1\":{\"85\":1}}],[\"除了有指定自动配置\",{\"1\":{\"66\":1}}],[\"除了使用\",{\"1\":{\"60\":1}}],[\"除了\",{\"1\":{\"51\":1,\"71\":1}}],[\"除了下面的数据库平台配置和数据库数量配置外\",{\"1\":{\"40\":1}}],[\"除了持久化节点以外\",{\"1\":{\"33\":1}}],[\"除此之外\",{\"1\":{\"33\":1,\"105\":1,\"108\":1}}],[\"主从数据库可以配置为不同的数据源\",{\"1\":{\"121\":1}}],[\"主从复制\",{\"1\":{\"121\":1}}],[\"主数据库负责写操作\",{\"1\":{\"121\":1}}],[\"主要使用的是\",{\"1\":{\"153\":1}}],[\"主要是利用resourcehttprequesthandler\",{\"1\":{\"83\":1}}],[\"主要是基于\",{\"1\":{\"83\":1}}],[\"主要由\",{\"1\":{\"63\":1,\"64\":1}}],[\"主要对服务需要使用的pojo\",{\"1\":{\"21\":1}}],[\"主要对所有项目的依赖坐标进行管理\",{\"1\":{\"18\":1}}],[\"主动探活\",{\"1\":{\"33\":1}}],[\"会自动更新\",{\"1\":{\"158\":1}}],[\"会直接将\",{\"1\":{\"154\":1}}],[\"会抛出\",{\"1\":{\"138\":2}}],[\"会中断后续的所有操作\",{\"1\":{\"89\":1}}],[\"会按照如下顺序将\",{\"1\":{\"83\":1}}],[\"会影响\",{\"1\":{\"69\":1}}],[\"会在\",{\"1\":{\"51\":1,\"69\":1}}],[\"会把该服务所有的实例信息\",{\"1\":{\"46\":1}}],[\"会主动发送请求询问其是否活着\",{\"1\":{\"45\":1}}],[\"会将\",{\"1\":{\"95\":2,\"125\":1}}],[\"会将其从服务列表中剔除\",{\"1\":{\"45\":1}}],[\"会将这个持久化节点的状态标记为不健康\",{\"1\":{\"33\":1}}],[\"会开启服务保护模式\",{\"1\":{\"32\":1}}],[\"节点也不会被服务端删除\",{\"1\":{\"33\":1}}],[\"还需要在\",{\"1\":{\"155\":1}}],[\"还支持在\",{\"1\":{\"108\":1}}],[\"还支持自定义静态资源的存放路径\",{\"1\":{\"85\":1}}],[\"还实现了自己的一套监听机制\",{\"1\":{\"97\":1}}],[\"还是\",{\"1\":{\"132\":1}}],[\"还是客户端接口的调用\",{\"1\":{\"111\":1}}],[\"还是需要实现\",{\"1\":{\"85\":1}}],[\"还是可以起到分流的作用\",{\"1\":{\"46\":1}}],[\"还应该具有自动配置的功能\",{\"1\":{\"66\":1}}],[\"还可以通过⽇志实现以下功能\",{\"1\":{\"101\":1}}],[\"还可以扫描其他的\",{\"1\":{\"93\":1}}],[\"还可以创建一个\",{\"1\":{\"60\":1}}],[\"还可以为持久化节点设置健康检查模式\",{\"1\":{\"33\":1}}],[\"还提供了另一种配置文件\",{\"1\":{\"51\":1}}],[\"还有一部分是滚动条的箭头\",{\"1\":{\"144\":1}}],[\"还有的存储在数据库中\",{\"1\":{\"48\":1}}],[\"还有些配置对实时性要求很高\",{\"1\":{\"48\":1}}],[\"还有集群和实例的概念\",{\"1\":{\"31\":1}}],[\"还要保证连接的数据库地址的正确性\",{\"1\":{\"40\":1}}],[\"当中文文件名中存在空格时\",{\"1\":{\"154\":1}}],[\"当同时有垂直滚动条和水平滚动条时交汇的部分\",{\"1\":{\"145\":1}}],[\"当数据量增大\",{\"1\":{\"121\":1}}],[\"当然这种方式还存在一定的兼容性问题\",{\"1\":{\"145\":1}}],[\"当然\",{\"1\":{\"142\":1}}],[\"当然还要有切面\",{\"1\":{\"132\":1}}],[\"当然可以\",{\"1\":{\"119\":1}}],[\"当然异常是很多的\",{\"1\":{\"117\":1}}],[\"当不满足条件时抛出我们自定义的异常\",{\"1\":{\"119\":1}}],[\"当出现业务异常时\",{\"1\":{\"118\":1}}],[\"当程序发布事件时\",{\"1\":{\"97\":1}}],[\"当服务开启时\",{\"1\":{\"95\":1}}],[\"当服务关闭时\",{\"1\":{\"95\":1}}],[\"当服务的健康实例数与总实例的比例小于这个阈值的时候\",{\"1\":{\"32\":1}}],[\"当其返回值为\",{\"1\":{\"89\":2}}],[\"当项目被打成\",{\"1\":{\"85\":1}}],[\"当\",{\"1\":{\"52\":1,\"66\":1}}],[\"当配置信息发生变动时\",{\"1\":{\"48\":1}}],[\"当前服务总实例数\",{\"1\":{\"46\":2}}],[\"当前服务健康实例数\",{\"1\":{\"46\":2}}],[\"当实例运行失败后\",{\"1\":{\"27\":1}}],[\"数组\",{\"1\":{\"137\":1}}],[\"数组类型\",{\"1\":{\"69\":1}}],[\"数据和业务逻辑都在\",{\"1\":{\"158\":1}}],[\"数据层\",{\"1\":{\"158\":1}}],[\"数据源变了事务管理器自然也要变\",{\"1\":{\"133\":1}}],[\"数据源属于一个公共的资源\",{\"1\":{\"128\":1}}],[\"数据源切换如何保证线程隔离\",{\"0\":{\"128\":1}}],[\"数据源集合的解析后的key\",{\"1\":{\"123\":2}}],[\"数据监控\",{\"1\":{\"122\":1}}],[\"数据绑定异常\",{\"1\":{\"117\":2}}],[\"数据对前端来说是很不友好的\",{\"1\":{\"111\":1}}],[\"数据在之后传入\",{\"1\":{\"105\":1}}],[\"数据校验\",{\"1\":{\"88\":1}}],[\"数据持久化配置\",{\"0\":{\"40\":1}}],[\"数据模型\",{\"0\":{\"35\":1}}],[\"数据库加密等功能\",{\"1\":{\"122\":1}}],[\"数据库连接池的功能是十分强大的\",{\"1\":{\"122\":1}}],[\"数据库的数量\",{\"1\":{\"40\":1}}],[\"数据库进行存储\",{\"1\":{\"13\":1}}],[\"数据库设计\",{\"0\":{\"13\":1}}],[\"数据库\",{\"1\":{\"1\":1,\"12\":1,\"81\":1}}],[\"数字\",{\"1\":{\"32\":1}}],[\"中同步\",{\"1\":{\"158\":1}}],[\"中由于用户交互操作而改变的数据也会在\",{\"1\":{\"158\":1}}],[\"中看到\",{\"1\":{\"155\":1}}],[\"中直接使用汉字是非法的\",{\"1\":{\"154\":1}}],[\"中文件名中文乱码\",{\"0\":{\"154\":1}}],[\"中获取文件名\",{\"1\":{\"152\":1}}],[\"中还包含了其它待验证的对象\",{\"1\":{\"142\":1}}],[\"中内置的\",{\"1\":{\"137\":1}}],[\"中实现动态数据源的使用\",{\"1\":{\"131\":1}}],[\"中使用\",{\"1\":{\"131\":1}}],[\"中使用如下配置来整合单一数据源\",{\"1\":{\"122\":1}}],[\"中取值\",{\"1\":{\"128\":1}}],[\"中有如下一段代码\",{\"1\":{\"122\":1}}],[\"中存在上面的异常处理方法\",{\"1\":{\"113\":1}}],[\"中被\",{\"1\":{\"113\":1}}],[\"中处理\",{\"1\":{\"111\":1}}],[\"中是无法获取的\",{\"1\":{\"108\":1}}],[\"中移除\",{\"1\":{\"96\":1}}],[\"中属性的活化和钝化\",{\"1\":{\"95\":1}}],[\"中要想使过滤器生效\",{\"1\":{\"93\":1}}],[\"中默认使用的消息转换器是\",{\"1\":{\"81\":1}}],[\"中定义为\",{\"1\":{\"78\":1}}],[\"中定义的数据\",{\"1\":{\"108\":1}}],[\"中定义的\",{\"1\":{\"66\":1}}],[\"中可以通过如下代码读取\",{\"1\":{\"75\":1}}],[\"中应该会出现如下提示\",{\"1\":{\"73\":1}}],[\"中排除\",{\"1\":{\"68\":1}}],[\"中引入springboot\",{\"1\":{\"67\":1}}],[\"中引入对应的\",{\"1\":{\"58\":1}}],[\"中springboot\",{\"1\":{\"66\":1}}],[\"中的文本信息只能使用\",{\"1\":{\"154\":1}}],[\"中的数据改变时会触发\",{\"1\":{\"158\":1}}],[\"中的数据\",{\"1\":{\"142\":1}}],[\"中的一项子规范\",{\"1\":{\"136\":1}}],[\"中的所有\",{\"1\":{\"113\":1}}],[\"中的日志框架主要分为两大类\",{\"1\":{\"103\":1}}],[\"中的内容重新加载到内存\",{\"1\":{\"95\":1}}],[\"中的内容保存在硬盘上\",{\"1\":{\"95\":1}}],[\"中的效率是非常低的\",{\"1\":{\"85\":1}}],[\"中的空实现可以直接在\",{\"1\":{\"78\":1}}],[\"中的方法定义成接口\",{\"1\":{\"77\":1}}],[\"中的\",{\"1\":{\"60\":1,\"66\":1,\"119\":1,\"124\":1,\"125\":1,\"132\":1}}],[\"中的配置进行合并\",{\"1\":{\"52\":1}}],[\"中也集成了\",{\"1\":{\"60\":1}}],[\"中添加配置信息\",{\"0\":{\"52\":1}}],[\"中配置\",{\"1\":{\"78\":1}}],[\"中配置如下信息\",{\"1\":{\"51\":1}}],[\"中配置的\",{\"1\":{\"30\":1,\"42\":1}}],[\"中管理的配置\",{\"1\":{\"51\":1}}],[\"中\",{\"1\":{\"40\":1,\"60\":1,\"90\":1,\"96\":1,\"128\":1,\"131\":1,\"132\":1,\"141\":1,\"155\":1}}],[\"中服务的\",{\"1\":{\"37\":1}}],[\"中以\",{\"1\":{\"33\":1}}],[\"中位于最上层的概念\",{\"1\":{\"31\":1}}],[\"和异常信息\",{\"1\":{\"119\":1}}],[\"和servletrequest\",{\"1\":{\"95\":1}}],[\"和实际的业务无关\",{\"1\":{\"73\":1}}],[\"和面向切面编程\",{\"1\":{\"56\":1}}],[\"和自定义标签的数据集合\",{\"1\":{\"34\":1}}],[\"和\",{\"1\":{\"30\":2,\"35\":1,\"45\":1,\"52\":1,\"63\":1,\"64\":1,\"75\":1,\"78\":2,\"83\":1,\"84\":1,\"92\":1,\"95\":1,\"96\":1,\"103\":1,\"104\":1,\"107\":1,\"108\":1,\"113\":1,\"116\":1,\"122\":1,\"127\":1,\"141\":1,\"157\":1,\"158\":2}}],[\"和微服务有什么关系\",{\"1\":{\"10\":1}}],[\"提高系统性能\",{\"1\":{\"88\":1}}],[\"提供\",{\"1\":{\"131\":1}}],[\"提供了针对\",{\"1\":{\"136\":1}}],[\"提供了默认的异常处理机制\",{\"1\":{\"111\":1}}],[\"提供了自动化配置\",{\"1\":{\"103\":1}}],[\"提供了\",{\"1\":{\"93\":1}}],[\"提供了一种像后端依赖管理的方式\",{\"1\":{\"84\":1}}],[\"提供了一组简单易用的特性集\",{\"1\":{\"24\":1}}],[\"提供的\",{\"1\":{\"131\":1,\"140\":2}}],[\"提供的监听器分为如下三种类型\",{\"1\":{\"95\":1}}],[\"提供的各种注解将\",{\"1\":{\"77\":1}}],[\"提供的所有\",{\"1\":{\"59\":1}}],[\"提供的组件包\",{\"1\":{\"58\":1}}],[\"提供可以直接在生产环境中使用的功能特性\",{\"1\":{\"57\":1}}],[\"提供定制化的启动器\",{\"1\":{\"57\":1}}],[\"提示\",{\"1\":{\"30\":1,\"66\":1,\"71\":1,\"93\":2,\"97\":1,\"107\":1,\"113\":1,\"133\":1}}],[\"注意如下\",{\"1\":{\"69\":1}}],[\"注入的变量所在类上添加注解\",{\"1\":{\"53\":1}}],[\"注解即可实现嵌套验证\",{\"1\":{\"142\":1}}],[\"注解是\",{\"1\":{\"140\":1}}],[\"注解是不支持加载\",{\"1\":{\"75\":1}}],[\"注解中\",{\"1\":{\"132\":1}}],[\"注解中只有一个\",{\"1\":{\"132\":1}}],[\"注解就可以实现全局的异常处理\",{\"1\":{\"114\":1}}],[\"注解就能实现这一功能\",{\"1\":{\"114\":1}}],[\"注解虽然可以处理异常\",{\"1\":{\"114\":1}}],[\"注解的\",{\"1\":{\"113\":1}}],[\"注解的监听器\",{\"1\":{\"93\":1}}],[\"注解替代\",{\"1\":{\"105\":1}}],[\"注解两种方法\",{\"1\":{\"99\":1}}],[\"注解配合\",{\"1\":{\"96\":1}}],[\"注解不仅可以扫描\",{\"1\":{\"93\":1}}],[\"注解生效\",{\"1\":{\"93\":1}}],[\"注解来实现\",{\"1\":{\"96\":1}}],[\"注解来配置日期格式化\",{\"1\":{\"80\":1}}],[\"注解来使用\",{\"1\":{\"75\":1}}],[\"注解有一个属性\",{\"1\":{\"75\":1}}],[\"注解只是用于加载自定义配置文件的配置信息\",{\"1\":{\"75\":1}}],[\"注解可以读取单个配置项\",{\"1\":{\"74\":1}}],[\"注解向\",{\"1\":{\"65\":1}}],[\"注解组成\",{\"1\":{\"63\":1,\"64\":1}}],[\"注解标注的请求体\",{\"1\":{\"138\":1}}],[\"注解标注的异常处理方法\",{\"1\":{\"113\":1}}],[\"注解标注的\",{\"1\":{\"113\":1}}],[\"注解标注的方法\",{\"1\":{\"97\":1}}],[\"注解标注在\",{\"1\":{\"113\":1}}],[\"注解标注在实体类上\",{\"1\":{\"73\":1}}],[\"注解标注\",{\"1\":{\"63\":1,\"138\":1}}],[\"注解在使用处注入即可\",{\"1\":{\"53\":1}}],[\"注解定义\",{\"1\":{\"53\":1}}],[\"注解读取配置文件\",{\"1\":{\"53\":1}}],[\"注解\",{\"1\":{\"30\":1,\"53\":2,\"64\":1,\"78\":1,\"93\":1,\"96\":1,\"133\":1,\"138\":1,\"142\":2}}],[\"注解用于开启服务注册与发现的支持\",{\"1\":{\"30\":1}}],[\"注册创建的监听器\",{\"1\":{\"96\":1}}],[\"注册功能模块\",{\"1\":{\"81\":1}}],[\"注册持久化实例\",{\"1\":{\"45\":1}}],[\"注册到\",{\"1\":{\"45\":1}}],[\"注册中心\",{\"0\":{\"26\":1,\"28\":1},\"1\":{\"29\":1}}],[\"注册中心还应该具备剔除出现问题的服务的功能\",{\"1\":{\"5\":1}}],[\"注册时间\",{\"1\":{\"14\":1}}],[\"此种情况仅适用于多数据源下的单库事务操作\",{\"1\":{\"133\":1}}],[\"此时只会\",{\"1\":{\"155\":1}}],[\"此时抛出的异常可能为\",{\"1\":{\"119\":1}}],[\"此时可以将相同日志级别的包定义到同一个组中\",{\"1\":{\"104\":1}}],[\"此时就需要配合\",{\"1\":{\"75\":1}}],[\"此时\",{\"1\":{\"30\":1,\"73\":1,\"75\":1,\"85\":1,\"142\":1}}],[\"此外\",{\"1\":{\"5\":1,\"60\":1,\"75\":1,\"96\":1}}],[\"$\",{\"1\":{\"30\":2,\"36\":2,\"43\":2,\"44\":2,\"45\":2,\"51\":4,\"52\":9,\"53\":4,\"54\":4,\"70\":1,\"74\":1,\"75\":4,\"96\":4}}],[\"默认切换的数据源key\",{\"1\":{\"132\":1}}],[\"默认数据源对象\",{\"1\":{\"123\":1}}],[\"默认数据存储在内嵌数据库\",{\"1\":{\"40\":1}}],[\"默认返回的\",{\"1\":{\"111\":1}}],[\"默认支持的配置文件名为\",{\"1\":{\"108\":1}}],[\"默认提供了程序出错的结果映射路径\",{\"1\":{\"111\":1}}],[\"默认提供了名为\",{\"1\":{\"44\":1}}],[\"默认提供的日志级别从低到高分别为\",{\"1\":{\"104\":1}}],[\"默认值是\",{\"1\":{\"75\":1}}],[\"默认\",{\"1\":{\"68\":1,\"123\":1}}],[\"默认为\",{\"1\":{\"52\":1}}],[\"默认情况下所有微服务都属于\",{\"1\":{\"35\":1}}],[\"默认情况下\",{\"1\":{\"35\":1,\"44\":1,\"83\":1,\"107\":1}}],[\"默认是使用\",{\"1\":{\"79\":1}}],[\"默认是\",{\"1\":{\"30\":2}}],[\"默认的数据源\",{\"1\":{\"129\":1}}],[\"默认的日志级别是\",{\"1\":{\"104\":1}}],[\"默认的静态资源目录\",{\"0\":{\"83\":1}}],[\"默认的集群名字为\",{\"1\":{\"43\":1}}],[\"默认的用户名和密码都是\",{\"1\":{\"25\":1}}],[\"默认的启动模式是集群\",{\"1\":{\"25\":1}}],[\"搭建\",{\"0\":{\"28\":1,\"41\":1,\"49\":1},\"1\":{\"51\":2}}],[\"告知服务调用者不再调用本实例\",{\"1\":{\"27\":1}}],[\"将转码后的\",{\"1\":{\"154\":1}}],[\"将文件内容直接显示在页面\",{\"1\":{\"153\":1}}],[\"将下载连接和文件名挂载到下载元素上\",{\"1\":{\"152\":1}}],[\"将切换数据源的\",{\"1\":{\"128\":1,\"133\":1}}],[\"将日志门面和日志实现分离其实是一种典型的门面模式\",{\"1\":{\"103\":1}}],[\"将对应的\",{\"1\":{\"96\":1}}],[\"将静态资源的访问映射到磁盘的某个目录里\",{\"1\":{\"85\":1}}],[\"将上面的消息转换器对象追加到mvc框架的转换器集合中\",{\"1\":{\"81\":1}}],[\"将服务器扔到程序里\",{\"1\":{\"68\":1}}],[\"将服务提供者信息从注册中心下载到调用者本地\",{\"1\":{\"27\":1}}],[\"将服务提供者的信息主动提交到服务注册中心进行服务注册\",{\"1\":{\"27\":1}}],[\"将写好的程序扔到服务器里\",{\"1\":{\"68\":1}}],[\"将其统一集成进\",{\"1\":{\"58\":1}}],[\"将其它的配置信息都放到\",{\"1\":{\"52\":1}}],[\"将其坐标导入\",{\"1\":{\"50\":1}}],[\"将配置和发布包解藕进一步提升发布的成功率\",{\"1\":{\"48\":1}}],[\"将\",{\"1\":{\"42\":2,\"150\":1}}],[\"将所有的服务统一的\",{\"1\":{\"27\":1}}],[\"由于\",{\"1\":{\"58\":1}}],[\"由于支持的注解不是很多且功能尚不完善\",{\"1\":{\"56\":1}}],[\"由于所有的业务逻辑在一个应用中\",{\"1\":{\"1\":1}}],[\"由注册中心统一配置管理\",{\"1\":{\"27\":1}}],[\"所以必须将中文文件名转换成\",{\"1\":{\"154\":1}}],[\"所以在\",{\"1\":{\"154\":1}}],[\"所以不需要出现在项目打包后的\",{\"1\":{\"73\":1}}],[\"所以只能辅助使用\",{\"1\":{\"56\":1}}],[\"所以\",{\"1\":{\"46\":1}}],[\"所有的自动配置类都在这个文件中\",{\"1\":{\"66\":1}}],[\"所有的服务都需要注册到\",{\"1\":{\"29\":1}}],[\"所有的服务都与注册中心发生连接\",{\"1\":{\"27\":1}}],[\"所有人都能修改和发布配置\",{\"1\":{\"48\":1}}],[\"所有服务都部署到一个叫做\",{\"1\":{\"35\":1}}],[\"所谓持久化节点\",{\"1\":{\"33\":1}}],[\"所谓链路追踪\",{\"1\":{\"9\":1}}],[\"如扫描标注了\",{\"1\":{\"93\":1}}],[\"如上图所示我在电脑的\",{\"1\":{\"85\":1}}],[\"如日期的格式\",{\"1\":{\"79\":1}}],[\"如何从自定义配置文件中取值\",{\"0\":{\"75\":1}}],[\"如何从配置文件中取值\",{\"0\":{\"72\":1}}],[\"如何转移到别的实例上去处理请求\",{\"1\":{\"27\":1}}],[\"如下图\",{\"1\":{\"79\":1}}],[\"如下图所示\",{\"1\":{\"36\":1}}],[\"如下\",{\"1\":{\"68\":1,\"75\":1,\"93\":1,\"132\":1}}],[\"如性能指标\",{\"1\":{\"57\":1}}],[\"如\",{\"1\":{\"56\":1,\"57\":1,\"71\":2,\"73\":1,\"81\":1,\"103\":1,\"105\":1,\"113\":1,\"119\":2,\"122\":1,\"131\":1,\"136\":2}}],[\"如服务版本等\",{\"1\":{\"34\":1}}],[\"如果想使用\",{\"1\":{\"159\":1}}],[\"如果需要提示用户保存\",{\"1\":{\"153\":1}}],[\"如果需要加载\",{\"1\":{\"50\":1}}],[\"如果校验失败\",{\"1\":{\"138\":1}}],[\"如果数据源对象是datasource的实例对象\",{\"1\":{\"125\":1}}],[\"如果数据源不存在\",{\"1\":{\"124\":2}}],[\"如果数据源不存在是否回滚到默认数据源\",{\"1\":{\"123\":1}}],[\"如果lenientfallback回退属性为true\",{\"1\":{\"124\":1}}],[\"如果都没有找到\",{\"1\":{\"117\":1}}],[\"如果在成员变量\",{\"1\":{\"142\":1}}],[\"如果在\",{\"1\":{\"113\":1}}],[\"如果在每个请求控制器的方法中对\",{\"1\":{\"90\":1}}],[\"如果是浏览器支持的文件类型\",{\"1\":{\"153\":1}}],[\"如果是浏览器请求的调用更是会返回一个默认的\",{\"1\":{\"111\":1}}],[\"如果是字符串对象\",{\"1\":{\"125\":1}}],[\"如果是单体应用部署的话\",{\"1\":{\"1\":1}}],[\"如果不足在右边补\",{\"1\":{\"106\":1}}],[\"如果程序报错了\",{\"1\":{\"101\":1}}],[\"如果加\",{\"1\":{\"78\":1}}],[\"如果你想使用此功能\",{\"1\":{\"73\":1}}],[\"如果将动态数据源设置到\",{\"1\":{\"131\":1}}],[\"如果将这些前端框架都放在默认的静态资源目录下难免造成管理的混乱\",{\"1\":{\"84\":1}}],[\"如果将\",{\"1\":{\"68\":1}}],[\"如果遇到多个服务用到相同的配置\",{\"1\":{\"54\":1}}],[\"如果我们要为\",{\"1\":{\"52\":1}}],[\"如果\",{\"1\":{\"46\":1}}],[\"如果心跳停止\",{\"1\":{\"45\":1}}],[\"如果未给服务器设置权重\",{\"1\":{\"44\":1}}],[\"如果使用的是\",{\"1\":{\"96\":1}}],[\"如果使用\",{\"1\":{\"43\":1}}],[\"如果其中某个服务不可用\",{\"1\":{\"8\":1}}],[\"如果让客户端直接与各个微服务通信可能会出现如下问题\",{\"1\":{\"7\":1}}],[\"如果修改某一个微服务的\",{\"1\":{\"3\":1}}],[\"调用相应的方法即可打印不同级别的日志\",{\"1\":{\"105\":1}}],[\"调用者从本地的服务提供者列表中\",{\"1\":{\"27\":1}}],[\"调用方如何知晓调用哪个实例\",{\"1\":{\"27\":1}}],[\"调用的格式\",{\"1\":{\"6\":1}}],[\"++\",{\"1\":{\"96\":1}}],[\"+\",{\"1\":{\"27\":2,\"35\":2,\"52\":1,\"93\":1,\"103\":1,\"124\":2,\"125\":1,\"150\":1,\"152\":1,\"154\":4}}],[\"即该用户不是在线状态\",{\"1\":{\"96\":1}}],[\"即视图渲染结束之后执行\",{\"1\":{\"89\":1}}],[\"即为当前环境对应的\",{\"1\":{\"52\":1}}],[\"即使选择打开\",{\"1\":{\"153\":1}}],[\"即使它们挂掉了\",{\"1\":{\"46\":1}}],[\"即使你可能只要修改某一个参数\",{\"1\":{\"1\":1}}],[\"即可被正确加载\",{\"1\":{\"108\":1}}],[\"即可得到如下结果\",{\"1\":{\"77\":1}}],[\"即可\",{\"1\":{\"75\":1,\"103\":1,\"138\":1}}],[\"即可看到效果\",{\"1\":{\"61\":1}}],[\"即可访问\",{\"1\":{\"43\":1,\"84\":1}}],[\"即可进入新建配置页面\",{\"1\":{\"52\":1}}],[\"即可进入\",{\"1\":{\"25\":1}}],[\"即命名空间\",{\"1\":{\"35\":1}}],[\"即便该节点的客户端进程没有在运行\",{\"1\":{\"33\":1}}],[\"即\",{\"1\":{\"27\":1,\"106\":1}}],[\"启动所需的必须配置类\",{\"1\":{\"66\":1}}],[\"启动器的时候会引入相关的依赖\",{\"1\":{\"79\":1}}],[\"启动器\",{\"1\":{\"58\":1}}],[\"启动\",{\"1\":{\"43\":1}}],[\"启动后\",{\"1\":{\"25\":1}}],[\"启用\",{\"1\":{\"14\":1}}],[\"启用状态\",{\"1\":{\"14\":1}}],[\"文件即可\",{\"1\":{\"159\":1}}],[\"文件上传格式不对等等\",{\"1\":{\"118\":1}}],[\"文件类型错误\",{\"1\":{\"116\":1}}],[\"文件进行拦截\",{\"1\":{\"92\":1}}],[\"文件的\",{\"1\":{\"75\":1}}],[\"文件则是用于配置应用级别的参数\",{\"1\":{\"71\":1}}],[\"文件用于配置系统级别的参数\",{\"1\":{\"71\":1}}],[\"文件中的配置信息\",{\"1\":{\"75\":1}}],[\"文件中添加如下依赖坐标\",{\"1\":{\"73\":1}}],[\"文件中添加\",{\"1\":{\"61\":1}}],[\"文件中\",{\"1\":{\"51\":1}}],[\"文件重命名为\",{\"1\":{\"42\":1}}],[\"文件\",{\"1\":{\"25\":1,\"40\":2,\"43\":1,\"50\":2,\"51\":1,\"66\":1,\"75\":1}}],[\"文件如下\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"系统相关\",{\"1\":{\"116\":1}}],[\"系统逻辑设计是否合理等\",{\"1\":{\"110\":1}}],[\"系统操作日志\",{\"1\":{\"108\":1}}],[\"系统模块日志级别控制\",{\"1\":{\"108\":1}}],[\"系统日志输出\",{\"1\":{\"108\":1}}],[\"系统加载时进行信息初始化\",{\"1\":{\"95\":1}}],[\"系统\",{\"1\":{\"59\":1}}],[\"系统会自动生成\",{\"1\":{\"36\":1}}],[\"系统下双击执行\",{\"1\":{\"25\":1}}],[\"系统容错\",{\"1\":{\"3\":1}}],[\"目标数据源\",{\"1\":{\"129\":1}}],[\"目录\",{\"1\":{\"71\":1,\"83\":1,\"84\":1}}],[\"目录下放了一张图片\",{\"1\":{\"85\":1}}],[\"目录下进行管理\",{\"1\":{\"84\":1}}],[\"目录下同时存在名为\",{\"1\":{\"83\":1}}],[\"目录下有一个\",{\"1\":{\"75\":1}}],[\"目录下生成一个默认的全局配置文件\",{\"1\":{\"69\":1}}],[\"目录下的配置文件\",{\"1\":{\"71\":1}}],[\"目录下的\",{\"1\":{\"43\":1}}],[\"目录下\",{\"1\":{\"42\":1,\"71\":1,\"108\":1}}],[\"目录下找到\",{\"1\":{\"40\":2}}],[\"目录里存放的是\",{\"1\":{\"25\":1}}],[\"目前我们可以通过\",{\"1\":{\"145\":1}}],[\"目前只支持\",{\"1\":{\"52\":1}}],[\"目前已经列入了\",{\"1\":{\"10\":1}}],[\"目前主流的远程调用技术有基于\",{\"1\":{\"6\":1}}],[\"我们称它为滑块\",{\"1\":{\"144\":1}}],[\"我们需要自定义一个事务管理器\",{\"1\":{\"133\":1}}],[\"我们会在\",{\"1\":{\"122\":1}}],[\"我们会采用json\",{\"1\":{\"116\":1}}],[\"我们能不能仿照\",{\"1\":{\"119\":1}}],[\"我们只需要实现处理过滤器逻辑的\",{\"1\":{\"92\":1}}],[\"我们只需要在\",{\"1\":{\"84\":1}}],[\"我们可以直接通过\",{\"1\":{\"83\":1}}],[\"我们可以对其功能进行拓展\",{\"1\":{\"81\":1}}],[\"我们可以选择在配置文件中修改\",{\"1\":{\"79\":1}}],[\"我们可以自定义一个用来加载\",{\"1\":{\"75\":1}}],[\"我们可以通过如下插件在项目打包时\",{\"1\":{\"73\":1}}],[\"我们可以将从\",{\"1\":{\"60\":1}}],[\"我们可以在本地再启动一份\",{\"1\":{\"44\":1}}],[\"我们在引入第三方框架坐标时\",{\"1\":{\"67\":1}}],[\"我们在\",{\"1\":{\"54\":1}}],[\"我们希望性能好的机器承担更多的用户请求\",{\"1\":{\"44\":1}}],[\"我们习惯用单机模式快速构建一个\",{\"1\":{\"38\":1}}],[\"我们不需要太多的配置\",{\"1\":{\"131\":1}}],[\"我们不必填写命名空间\",{\"1\":{\"36\":1}}],[\"我们不得不考虑如下几个问题\",{\"1\":{\"27\":1}}],[\"我们又希望服务器的\",{\"1\":{\"1\":1}}],[\"我这里下载的是\",{\"1\":{\"25\":1}}],[\"云原生范式\",{\"1\":{\"24\":1}}],[\"交付和管理微服务平台\",{\"1\":{\"24\":1}}],[\"致力于帮助您发现\",{\"1\":{\"24\":1}}],[\"k2\",{\"1\":{\"69\":1}}],[\"k1\",{\"1\":{\"69\":1}}],[\"kəʊs\",{\"1\":{\"24\":1}}],[\"key\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"124\":1,\"125\":2,\"127\":1,\"128\":1,\"132\":2}}],[\"以前\",{\"1\":{\"136\":1}}],[\"以此来决定返回页面视图还是\",{\"1\":{\"111\":1}}],[\"以及\",{\"1\":{\"103\":1}}],[\"以下为修改滚动条样式用到的\",{\"1\":{\"145\":1}}],[\"以下位置的配置也会被加载\",{\"1\":{\"71\":1}}],[\"以下的\",{\"1\":{\"24\":1}}],[\"以\",{\"1\":{\"51\":1,\"108\":1}}],[\"以便更好地区分和管理\",{\"1\":{\"37\":1}}],[\"以免调用失败\",{\"1\":{\"27\":1}}],[\"以单例模式启动\",{\"1\":{\"25\":1}}],[\"以后很难在技术栈上做切换\",{\"1\":{\"1\":1}}],[\"概述\",{\"0\":{\"24\":1}}],[\"用来定义事件\",{\"1\":{\"97\":1}}],[\"用来监听自己感兴趣的事件\",{\"1\":{\"97\":1}}],[\"用来把发布的事件广播给支持当前事件的监听器\",{\"1\":{\"97\":1}}],[\"用来在业务逻辑中发布事件\",{\"1\":{\"97\":1}}],[\"用于指示浏览器即将下载的附件的文件名\",{\"1\":{\"153\":1}}],[\"用于指定需要处理异常的\",{\"1\":{\"113\":1}}],[\"用于控制滚动条的移动\",{\"1\":{\"144\":1}}],[\"用于从\",{\"1\":{\"128\":1}}],[\"用于存储要动态切换的datasource\",{\"1\":{\"123\":1}}],[\"用于拦截该\",{\"1\":{\"113\":1}}],[\"用于记录程序中的错误信息\",{\"1\":{\"104\":1}}],[\"用于记录程序的运行状态信息\",{\"1\":{\"104\":1}}],[\"用于记录程序的调试信息\",{\"1\":{\"104\":1}}],[\"用于记录程序的详细信息\",{\"1\":{\"104\":1}}],[\"用于记录警告信息\",{\"1\":{\"104\":1}}],[\"用于标注一个\",{\"1\":{\"93\":1}}],[\"用于注册\",{\"1\":{\"93\":1,\"96\":1}}],[\"用于读取一组配置\",{\"1\":{\"73\":1}}],[\"用于随机产生\",{\"1\":{\"70\":1}}],[\"用于集中管理各个微服务公共的配置\",{\"1\":{\"20\":1}}],[\"用以减轻服务器的压力\",{\"1\":{\"27\":1}}],[\"用户主键\",{\"1\":{\"127\":1}}],[\"用户id\",{\"1\":{\"16\":1,\"105\":1}}],[\"用户名或密码错误\",{\"1\":{\"116\":1}}],[\"用户名不能为空\",{\"1\":{\"116\":1,\"138\":1}}],[\"用户名已存在\",{\"1\":{\"116\":1}}],[\"用户名\",{\"1\":{\"14\":1,\"127\":1}}],[\"用户服务的数据库名设计为\",{\"1\":{\"14\":1}}],[\"用户服务\",{\"0\":{\"14\":1},\"1\":{\"17\":1}}],[\"用户模块\",{\"1\":{\"11\":1}}],[\"whitelabel\",{\"1\":{\"111\":1}}],[\"whitelist\",{\"1\":{\"90\":2}}],[\"warn\",{\"1\":{\"104\":2,\"108\":1}}],[\"writevalueasstring\",{\"1\":{\"90\":2}}],[\"window\",{\"0\":{\"151\":1},\"1\":{\"149\":1,\"151\":2,\"152\":3}}],[\"windows\",{\"1\":{\"25\":1,\"43\":1}}],[\"width\",{\"1\":{\"146\":2}}],[\"withoutfeatures\",{\"1\":{\"81\":1}}],[\"world\",{\"1\":{\"61\":1}}],[\"webkit\",{\"1\":{\"145\":7,\"146\":6}}],[\"weblistener\",{\"1\":{\"96\":2}}],[\"weblintener\",{\"1\":{\"93\":1}}],[\"webfilter\",{\"1\":{\"93\":4}}],[\"webjars<\",{\"1\":{\"84\":1}}],[\"webjars\",{\"0\":{\"84\":1},\"1\":{\"84\":3}}],[\"webapp\",{\"1\":{\"83\":1,\"84\":2}}],[\"webmvcconfig\",{\"1\":{\"81\":1,\"85\":1,\"90\":1}}],[\"webmvcconfigurationsupport\",{\"1\":{\"78\":2}}],[\"webmvcconfigurer接口也能实现相同的功能\",{\"1\":{\"78\":1}}],[\"webmvcconfigurer接口中的不同方法可以实现对\",{\"1\":{\"78\":1}}],[\"webmvcconfigureradapter\",{\"1\":{\"78\":2}}],[\"webmvcconfigurer\",{\"1\":{\"78\":2,\"81\":1,\"85\":3,\"90\":1}}],[\"web\",{\"1\":{\"57\":1,\"61\":4,\"68\":3,\"76\":1,\"79\":1,\"83\":2,\"84\":2,\"92\":2,\"95\":1,\"136\":1,\"138\":1}}],[\"web<\",{\"1\":{\"22\":1,\"61\":1,\"68\":1,\"76\":1}}],[\"w3\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"www\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"96\":1}}],[\"xlsx\",{\"1\":{\"153\":1}}],[\"xxx\",{\"1\":{\"71\":2,\"75\":2}}],[\"x\",{\"1\":{\"56\":5}}],[\"xsd\",{\"1\":{\"18\":2,\"19\":2,\"20\":2,\"21\":2,\"22\":2}}],[\"xsi\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"xsi=\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"xmlschema\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"xmlns\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"96\":1}}],[\"xmlns=\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"xml\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"48\":1,\"56\":4,\"57\":1,\"67\":1,\"108\":7,\"131\":2}}],[\"><\",{\"1\":{\"96\":3,\"159\":1}}],[\">>\",{\"1\":{\"81\":1}}],[\">\",{\"0\":{\"150\":1},\"1\":{\"18\":5,\"19\":2,\"20\":2,\"21\":2,\"22\":3,\"61\":2,\"64\":1,\"68\":2,\"75\":1,\"96\":4,\"108\":37,\"117\":4,\"118\":2,\"125\":1,\"139\":3,\"150\":2,\"159\":5}}],[\"el\",{\"1\":{\"159\":1}}],[\"elementtype\",{\"1\":{\"132\":1}}],[\"else\",{\"1\":{\"113\":2,\"125\":2,\"135\":1}}],[\"error\",{\"1\":{\"104\":2,\"105\":1,\"108\":5,\"111\":4,\"116\":3,\"117\":4,\"141\":2}}],[\"event\",{\"1\":{\"99\":2}}],[\"eventlistener\",{\"1\":{\"97\":1,\"99\":1}}],[\"each=\",{\"1\":{\"96\":1}}],[\"embed\",{\"1\":{\"68\":1}}],[\"embed<\",{\"1\":{\"68\":1}}],[\"email\",{\"1\":{\"14\":1,\"116\":2,\"136\":1,\"137\":1}}],[\"ejb\",{\"1\":{\"56\":1}}],[\"expose\",{\"1\":{\"155\":3}}],[\"export\",{\"1\":{\"152\":1}}],[\"expires\",{\"1\":{\"155\":1}}],[\"exist\",{\"1\":{\"116\":4,\"118\":1}}],[\"excel\",{\"1\":{\"147\":1}}],[\"exceptionallhandler\",{\"1\":{\"117\":1}}],[\"exception异常\",{\"1\":{\"117\":1}}],[\"exception异常写在全局异常处理器最下面\",{\"1\":{\"117\":1}}],[\"exceptionhandler\",{\"0\":{\"113\":1},\"1\":{\"112\":2,\"113\":5,\"114\":3,\"117\":4,\"139\":3}}],[\"exception\",{\"0\":{\"119\":1},\"1\":{\"90\":1,\"113\":1,\"117\":3,\"131\":1}}],[\"exclusions>\",{\"1\":{\"68\":2}}],[\"exclusion>\",{\"1\":{\"68\":2}}],[\"excludepathpatterns\",{\"1\":{\"90\":1}}],[\"excludes>\",{\"1\":{\"73\":1}}],[\"exclude>\",{\"1\":{\"73\":1}}],[\"excludename\",{\"1\":{\"64\":1}}],[\"exclude\",{\"1\":{\"64\":1}}],[\"extends\",{\"1\":{\"81\":1,\"99\":1,\"118\":1,\"123\":1,\"129\":1,\"141\":2}}],[\"extendhandlerexceptionresolvers\",{\"1\":{\"78\":1}}],[\"extendmessageconverters\",{\"1\":{\"78\":1,\"81\":1}}],[\"extension\",{\"1\":{\"51\":1,\"52\":4,\"54\":1}}],[\"exetension\",{\"1\":{\"52\":1}}],[\"example\",{\"1\":{\"42\":1,\"104\":5}}],[\"ephemeral\",{\"1\":{\"45\":1}}],[\"eureka\",{\"1\":{\"45\":1}}],[\"e\",{\"1\":{\"40\":1,\"75\":4,\"113\":3,\"117\":9,\"139\":6}}],[\"etc\",{\"1\":{\"40\":1}}],[\"enum\",{\"1\":{\"116\":1}}],[\"en\",{\"1\":{\"96\":1,\"159\":1}}],[\"encode\",{\"1\":{\"154\":3}}],[\"encoder>\",{\"1\":{\"108\":3}}],[\"encodedresource\",{\"1\":{\"75\":2}}],[\"encoding\",{\"1\":{\"75\":1}}],[\"encoding=\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"108\":1}}],[\"enablewebmvc\",{\"1\":{\"78\":1}}],[\"enableautoconfiguration\",{\"0\":{\"64\":1},\"1\":{\"63\":2,\"64\":3,\"66\":1}}],[\"enabled\",{\"1\":{\"44\":1,\"64\":1}}],[\"enablediscoveryclient\",{\"1\":{\"30\":2}}],[\"enterprise\",{\"1\":{\"56\":1}}],[\"viewmodel\",{\"1\":{\"158\":7}}],[\"view\",{\"1\":{\"157\":1,\"158\":11}}],[\"vjuː\",{\"1\":{\"157\":1}}],[\"vuejs\",{\"1\":{\"159\":1}}],[\"vue\",{\"0\":{\"157\":1,\"159\":1,\"166\":1},\"1\":{\"157\":2,\"158\":1,\"159\":9}}],[\"vue的介绍与安装\",{\"0\":{\"156\":1}}],[\"verifycode\",{\"1\":{\"90\":1}}],[\"version\",{\"1\":{\"18\":7,\"75\":4}}],[\"version>1\",{\"1\":{\"18\":2}}],[\"version>8\",{\"1\":{\"18\":1}}],[\"version>3\",{\"1\":{\"18\":1}}],[\"version>2021\",{\"1\":{\"18\":2}}],[\"version>2\",{\"1\":{\"18\":1}}],[\"version>\",{\"1\":{\"18\":16,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"61\":1,\"67\":1,\"68\":2,\"84\":1,\"122\":1,\"131\":1}}],[\"version=11\",{\"1\":{\"75\":1}}],[\"version=\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"108\":1}}],[\"v2\",{\"1\":{\"69\":1}}],[\"v1\",{\"1\":{\"69\":1}}],[\"vaild\",{\"1\":{\"142\":1}}],[\"valid可以用在方法\",{\"1\":{\"142\":1}}],[\"valid\",{\"0\":{\"140\":1},\"1\":{\"138\":3,\"140\":2,\"141\":2,\"142\":3}}],[\"validated可以用在类\",{\"1\":{\"142\":1}}],[\"validated提供了一个分组功能\",{\"1\":{\"141\":1}}],[\"validated\",{\"0\":{\"140\":1},\"1\":{\"138\":6,\"140\":2,\"141\":4}}],[\"validator\",{\"1\":{\"136\":1,\"137\":1}}],[\"validation<\",{\"1\":{\"136\":1}}],[\"validation\",{\"0\":{\"136\":1},\"1\":{\"136\":7,\"137\":1,\"138\":2,\"139\":1,\"140\":2}}],[\"values\",{\"1\":{\"131\":2}}],[\"value对象\",{\"1\":{\"123\":2}}],[\"value=\",{\"1\":{\"108\":2}}],[\"value\",{\"0\":{\"74\":1},\"1\":{\"53\":5,\"74\":2,\"75\":7,\"113\":1,\"125\":3,\"132\":7,\"137\":4,\"141\":1}}],[\"var\",{\"1\":{\"40\":1}}],[\"varchar\",{\"1\":{\"14\":6,\"15\":3,\"16\":4,\"127\":2}}],[\"v\",{\"1\":{\"40\":3}}],[\"void\",{\"1\":{\"61\":1,\"65\":1,\"81\":1,\"85\":1,\"90\":1,\"96\":3,\"99\":2,\"119\":3,\"125\":1,\"128\":2,\"131\":4,\"132\":1,\"138\":3}}],[\"vo\",{\"1\":{\"21\":1}}],[\"<div\",{\"1\":{\"159\":2}}],[\"<dependency>\",{\"1\":{\"18\":7,\"21\":2,\"22\":5,\"29\":1,\"50\":2,\"61\":1,\"68\":4,\"73\":1,\"76\":1,\"84\":1,\"122\":1,\"131\":1,\"136\":1}}],[\"<dependencymanagement>\",{\"1\":{\"18\":1}}],[\"<dependencies>\",{\"1\":{\"18\":1,\"21\":1,\"22\":1,\"50\":1,\"61\":1,\"68\":1}}],[\"<root\",{\"1\":{\"108\":2}}],[\"<rollingpolicy\",{\"1\":{\"108\":2}}],[\"<onmismatch>deny<\",{\"1\":{\"108\":2}}],[\"<onmatch>accept<\",{\"1\":{\"108\":2}}],[\"<optional>true<\",{\"1\":{\"73\":1}}],[\"<logger\",{\"1\":{\"108\":2}}],[\"<lombok\",{\"1\":{\"18\":1}}],[\"<level>error<\",{\"1\":{\"108\":1}}],[\"<level>info<\",{\"1\":{\"108\":1}}],[\"<filter\",{\"1\":{\"108\":2}}],[\"<filenamepattern>$\",{\"1\":{\"108\":2}}],[\"<file>$\",{\"1\":{\"108\":2}}],[\"<encoder>\",{\"1\":{\"108\":3}}],[\"<exclude>\",{\"1\":{\"73\":1}}],[\"<excludes>\",{\"1\":{\"73\":1}}],[\"<exclusion>\",{\"1\":{\"68\":2}}],[\"<exclusions>\",{\"1\":{\"68\":2}}],[\"<a\",{\"0\":{\"150\":1},\"1\":{\"150\":2}}],[\"<appender\",{\"1\":{\"108\":6}}],[\"<artifactid>druid\",{\"1\":{\"122\":1}}],[\"<artifactid>jquery<\",{\"1\":{\"84\":1}}],[\"<artifactid>tomcat\",{\"1\":{\"68\":2}}],[\"<artifactid>mall\",{\"1\":{\"18\":3,\"19\":1,\"20\":1,\"21\":1,\"22\":4}}],[\"<artifactid>mall<\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"<artifactid>mysql\",{\"1\":{\"18\":1,\"21\":1}}],[\"<artifactid>mybatis\",{\"1\":{\"18\":1,\"21\":1,\"131\":1}}],[\"<artifactid>spring\",{\"1\":{\"18\":3,\"22\":2,\"29\":1,\"50\":2,\"61\":2,\"67\":1,\"68\":4,\"73\":3,\"76\":1,\"136\":1}}],[\"<configuration\",{\"1\":{\"108\":1}}],[\"<configuration>\",{\"1\":{\"73\":1}}],[\"<body>\",{\"1\":{\"96\":1,\"159\":1}}],[\"<build>\",{\"1\":{\"73\":1}}],[\"<title>首页<\",{\"1\":{\"159\":1}}],[\"<title>title<\",{\"1\":{\"96\":1}}],[\"<t>\",{\"1\":{\"116\":4}}],[\"<type>pom<\",{\"1\":{\"18\":2}}],[\"<h1>\",{\"1\":{\"159\":1}}],[\"<head>\",{\"1\":{\"96\":1,\"159\":1}}],[\"<html\",{\"1\":{\"96\":1,\"159\":1}}],[\"<script>\",{\"1\":{\"159\":1}}],[\"<script\",{\"1\":{\"159\":1}}],[\"<scope>compile<\",{\"1\":{\"68\":2}}],[\"<scope>import<\",{\"1\":{\"18\":2}}],[\"<span\",{\"1\":{\"96\":4}}],[\"<spring\",{\"1\":{\"18\":3}}],[\"<meta\",{\"1\":{\"96\":1,\"159\":1}}],[\"<maxhistory>60<\",{\"1\":{\"108\":2}}],[\"<mall\",{\"1\":{\"18\":1}}],[\"<maven\",{\"1\":{\"18\":2,\"19\":2,\"20\":2,\"21\":2,\"22\":2}}],[\"<mysql\",{\"1\":{\"18\":1}}],[\"<mybatis\",{\"1\":{\"18\":1}}],[\"<module>mall\",{\"1\":{\"18\":4,\"22\":3}}],[\"<modules>\",{\"1\":{\"18\":1,\"22\":1}}],[\"<modelversion>4\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"<version>3\",{\"1\":{\"84\":1}}],[\"<version>9\",{\"1\":{\"68\":1}}],[\"<version>$\",{\"1\":{\"18\":7}}],[\"<version>2\",{\"1\":{\"18\":1,\"61\":1,\"67\":1,\"68\":1,\"131\":1}}],[\"<version>1\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"122\":1}}],[\"<groupid>mysql<\",{\"1\":{\"18\":1,\"21\":1}}],[\"<groupid>org\",{\"1\":{\"18\":2,\"22\":2,\"50\":1,\"61\":2,\"67\":1,\"68\":6,\"73\":3,\"76\":1,\"84\":1,\"131\":1,\"136\":1}}],[\"<groupid>com\",{\"1\":{\"18\":6,\"19\":1,\"20\":1,\"21\":2,\"22\":5,\"29\":1,\"50\":1,\"122\":1}}],[\"<plugin>\",{\"1\":{\"73\":1}}],[\"<plugins>\",{\"1\":{\"73\":1}}],[\"<property\",{\"1\":{\"108\":2}}],[\"<properties>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"<project\",{\"1\":{\"18\":1,\"19\":2,\"20\":1,\"21\":2,\"22\":2}}],[\"<pattern>$\",{\"1\":{\"108\":3}}],[\"<parent>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"61\":1,\"67\":1}}],[\"<packaging>pom<\",{\"1\":{\"18\":1,\"22\":1}}],[\"<\",{\"1\":{\"18\":25,\"19\":4,\"20\":4,\"21\":7,\"22\":12,\"29\":1,\"46\":1,\"50\":3,\"61\":5,\"67\":1,\"68\":11,\"73\":7,\"76\":1,\"84\":1,\"96\":5,\"108\":36,\"122\":1,\"131\":1,\"136\":1,\"159\":8}}],[\"公共模块\",{\"0\":{\"20\":1},\"1\":{\"17\":1,\"20\":1}}],[\"├─mall\",{\"1\":{\"17\":7}}],[\"聚合服务\",{\"0\":{\"18\":1},\"1\":{\"17\":1,\"18\":1}}],[\"案例项目的目录结构如下\",{\"1\":{\"17\":1}}],[\"obj\",{\"1\":{\"119\":4}}],[\"objecterror\",{\"1\":{\"117\":8,\"139\":6}}],[\"object>\",{\"1\":{\"90\":2,\"113\":2,\"123\":1,\"129\":1,\"130\":1}}],[\"objectmapper\",{\"1\":{\"81\":1}}],[\"object\",{\"1\":{\"77\":1,\"90\":1,\"99\":1,\"119\":5,\"123\":1,\"124\":1,\"125\":2,\"129\":1,\"132\":1}}],[\"open\",{\"0\":{\"151\":1},\"1\":{\"151\":2}}],[\"operator\",{\"1\":{\"116\":1}}],[\"optional>\",{\"1\":{\"73\":1}}],[\"ofpattern\",{\"1\":{\"81\":6}}],[\"only\",{\"1\":{\"125\":1}}],[\"onlinesessionlistener\",{\"1\":{\"96\":2}}],[\"onlinerequestlistener\",{\"1\":{\"96\":3}}],[\"onlineuser\",{\"1\":{\"96\":4}}],[\"onlinenumber\",{\"1\":{\"96\":8}}],[\"onlinelistener\",{\"1\":{\"96\":1}}],[\"onmismatch>\",{\"1\":{\"108\":2}}],[\"onmatch>\",{\"1\":{\"108\":2}}],[\"onapplicationevent\",{\"1\":{\"99\":1}}],[\"onapplicationevent方法\",{\"1\":{\"97\":1}}],[\"on\",{\"1\":{\"81\":2}}],[\"one\",{\"1\":{\"69\":1}}],[\"override\",{\"1\":{\"64\":1,\"75\":1,\"81\":1,\"85\":1,\"90\":2,\"96\":3,\"99\":1,\"129\":1}}],[\"orm\",{\"1\":{\"131\":1,\"136\":1}}],[\"org\",{\"1\":{\"18\":4,\"19\":4,\"20\":4,\"21\":4,\"22\":4,\"61\":4,\"66\":1,\"96\":1,\"108\":1,\"119\":1,\"123\":1,\"131\":2,\"138\":2,\"159\":1}}],[\"ordered\",{\"1\":{\"132\":1}}],[\"ordercontroller\",{\"1\":{\"77\":1}}],[\"order\",{\"1\":{\"16\":3,\"17\":1,\"22\":1,\"77\":9,\"132\":1,\"133\":1}}],[\"oms\",{\"1\":{\"16\":1}}],[\"种状态\",{\"1\":{\"16\":1}}],[\"订单状态\",{\"1\":{\"16\":1}}],[\"订单状态也只设计了\",{\"1\":{\"16\":1}}],[\"订单备注\",{\"1\":{\"16\":1}}],[\"订单总额\",{\"1\":{\"16\":1}}],[\"订单创建时间\",{\"1\":{\"16\":1}}],[\"订单号\",{\"1\":{\"16\":1}}],[\"订单模块的数据库名设计为\",{\"1\":{\"16\":1}}],[\"订单服务\",{\"0\":{\"16\":1},\"1\":{\"17\":1}}],[\"下项目开发时\",{\"1\":{\"90\":1}}],[\"下的所有资源访问映射到以下目录\",{\"1\":{\"83\":1}}],[\"下表展示了该接口中可以实现的方法及其功能\",{\"1\":{\"78\":1}}],[\"下meta\",{\"1\":{\"66\":1}}],[\"下\",{\"1\":{\"66\":2}}],[\"下图是\",{\"1\":{\"39\":1}}],[\"下线状态或者配置路由权重等等\",{\"1\":{\"34\":1}}],[\"下载完成移除元素\",{\"1\":{\"152\":1}}],[\"下载完成后在本地解压即可\",{\"1\":{\"25\":1}}],[\"下载地址为\",{\"1\":{\"25\":1}}],[\"下架\",{\"1\":{\"15\":1}}],[\"下面直接贴出全局异常处理类\",{\"1\":{\"139\":1}}],[\"下面在一个控制器方法中列举出来了校验注解使用的各种情况\",{\"1\":{\"138\":1}}],[\"下面就来讲讲如何在\",{\"1\":{\"135\":1}}],[\"下面就以这种方式创建一个\",{\"1\":{\"60\":1}}],[\"下面介绍如何在\",{\"1\":{\"131\":1}}],[\"下面介绍配置数据源的另一种方式\",{\"1\":{\"122\":1}}],[\"下面给出一个\",{\"1\":{\"108\":1}}],[\"下面给出了一组本人常用的版本参考\",{\"1\":{\"10\":1}}],[\"下面演示基于\",{\"1\":{\"99\":1}}],[\"下面写一个统计在线人数的案例来演示\",{\"1\":{\"96\":1}}],[\"下面的图描述了从\",{\"1\":{\"98\":1}}],[\"下面的\",{\"1\":{\"83\":1}}],[\"下面一一介绍\",{\"1\":{\"72\":1}}],[\"下面编写一个\",{\"1\":{\"61\":1}}],[\"下面以阿里云短信服务来介绍两种\",{\"1\":{\"53\":1}}],[\"下面是一个最简单的\",{\"1\":{\"159\":1}}],[\"下面是常用校验注解\",{\"1\":{\"137\":1}}],[\"下面是常用日志配置参数的说明\",{\"1\":{\"106\":1}}],[\"下面是该类的部分源码\",{\"1\":{\"123\":1}}],[\"下面是注册\",{\"1\":{\"93\":1}}],[\"下面是对应属性的描述\",{\"1\":{\"70\":1}}],[\"下面是对单体应用所面临问题的总结\",{\"1\":{\"1\":1}}],[\"下面是将\",{\"1\":{\"68\":1}}],[\"下面是\",{\"1\":{\"52\":1,\"69\":1,\"119\":1,\"131\":1}}],[\"下面是我本地配置的三台\",{\"1\":{\"42\":1}}],[\"下面是微服务架构针对需要解决的问题提出的一些相关概念\",{\"1\":{\"4\":1}}],[\"已经内置了一个\",{\"1\":{\"68\":1}}],[\"已经给出了一套最优的组合\",{\"1\":{\"67\":1}}],[\"已发货\",{\"1\":{\"16\":1}}],[\"已完成\",{\"1\":{\"16\":2}}],[\"已创建\",{\"1\":{\"16\":1}}],[\"已上架\",{\"1\":{\"15\":1}}],[\"已删除\",{\"1\":{\"14\":1,\"15\":1,\"16\":1}}],[\"商品详情\",{\"1\":{\"15\":1}}],[\"商品价格\",{\"1\":{\"15\":1}}],[\"商品名称\",{\"1\":{\"15\":1}}],[\"商品服务等等\",{\"1\":{\"35\":1}}],[\"商品服务和订单服务三个微服务\",{\"1\":{\"22\":1}}],[\"商品服务的数据库名设计为\",{\"1\":{\"15\":1}}],[\"商品服务\",{\"0\":{\"15\":1},\"1\":{\"17\":1}}],[\"商品模块和订单模块为例\",{\"1\":{\"11\":1}}],[\"div>\",{\"1\":{\"159\":1}}],[\"dist\",{\"1\":{\"159\":1}}],[\"disposition进行处理\",{\"1\":{\"153\":1}}],[\"disposition\",{\"0\":{\"153\":1,\"154\":1,\"155\":1},\"1\":{\"152\":2,\"153\":6,\"154\":1,\"155\":2}}],[\"discovery\",{\"1\":{\"30\":2,\"36\":1,\"43\":1,\"44\":1,\"45\":1,\"51\":1,\"52\":1,\"54\":1}}],[\"discovery<\",{\"1\":{\"29\":1}}],[\"digits\",{\"1\":{\"137\":1}}],[\"druiddatasourcebuilder\",{\"1\":{\"130\":2}}],[\"druiddatasourcewrapper\",{\"1\":{\"122\":1}}],[\"druiddatasourceautoconfigure\",{\"1\":{\"122\":1}}],[\"druiddatasource\",{\"1\":{\"122\":4}}],[\"druid\",{\"1\":{\"122\":4,\"127\":1}}],[\"driver\",{\"1\":{\"52\":2,\"122\":3,\"127\":4}}],[\"dd\",{\"1\":{\"80\":3,\"81\":2,\"106\":2,\"108\":2}}],[\"dysmsapi\",{\"1\":{\"53\":1}}],[\"dynamicdatasource\",{\"1\":{\"129\":2,\"130\":3,\"131\":2,\"133\":1}}],[\"dynamic\",{\"1\":{\"24\":1}}],[\"dom\",{\"1\":{\"158\":1}}],[\"domain\",{\"1\":{\"53\":1,\"131\":2}}],[\"downloadelement\",{\"1\":{\"152\":6}}],[\"downloadblob\",{\"1\":{\"152\":1}}],[\"downloadhtml\",{\"1\":{\"150\":6}}],[\"downloadlink\",{\"1\":{\"150\":1}}],[\"download\",{\"1\":{\"149\":1,\"150\":2,\"151\":1,\"152\":2}}],[\"document\",{\"1\":{\"150\":3,\"152\":3}}],[\"documented\",{\"1\":{\"132\":1}}],[\"doctype\",{\"1\":{\"96\":1,\"159\":1}}],[\"docker\",{\"1\":{\"40\":5}}],[\"dofilter\",{\"1\":{\"92\":2}}],[\"dbeffd\",{\"1\":{\"146\":1}}],[\"db2\",{\"1\":{\"127\":3,\"130\":1}}],[\"db1usermapper\",{\"1\":{\"131\":1}}],[\"db1\",{\"1\":{\"127\":3,\"130\":1}}],[\"db\",{\"1\":{\"40\":1,\"122\":2}}],[\"d\",{\"1\":{\"40\":2,\"85\":2,\"106\":3,\"107\":1,\"108\":3}}],[\"date\",{\"1\":{\"69\":1,\"77\":1,\"80\":2,\"81\":8}}],[\"datetimeformatter\",{\"1\":{\"81\":6}}],[\"datetime\",{\"1\":{\"14\":1,\"16\":1}}],[\"datasourcetransactionmanager\",{\"1\":{\"133\":1}}],[\"datasourceaspect\",{\"1\":{\"132\":1}}],[\"datasources\",{\"1\":{\"128\":4}}],[\"datasourceholder\",{\"1\":{\"128\":2,\"129\":1,\"131\":8,\"132\":3}}],[\"datasource>\",{\"1\":{\"123\":1}}],[\"datasourcelookup\",{\"1\":{\"123\":2,\"125\":1}}],[\"datasourceconfig\",{\"1\":{\"122\":1,\"130\":1,\"131\":1}}],[\"datasource\",{\"1\":{\"40\":1,\"52\":1,\"122\":12,\"123\":2,\"124\":9,\"125\":14,\"127\":1,\"128\":2,\"129\":1,\"130\":11,\"131\":9,\"133\":3}}],[\"data\",{\"1\":{\"40\":1,\"52\":2,\"53\":1,\"54\":1,\"73\":1,\"75\":2,\"116\":3,\"125\":1,\"141\":1,\"142\":2,\"152\":2,\"159\":1}}],[\"dataid\",{\"1\":{\"35\":3,\"52\":1}}],[\"dto\",{\"1\":{\"21\":1}}],[\"decodeuricomponent\",{\"1\":{\"152\":1}}],[\"decimalmax\",{\"1\":{\"137\":1}}],[\"decimalmin\",{\"1\":{\"137\":1}}],[\"determine\",{\"1\":{\"124\":1}}],[\"determinecurrentlookupkey\",{\"1\":{\"124\":1,\"129\":1}}],[\"determinetargetdatasource\",{\"0\":{\"124\":1},\"1\":{\"124\":2}}],[\"debug=\",{\"1\":{\"108\":1}}],[\"debug\",{\"1\":{\"104\":6}}],[\"destroy\",{\"1\":{\"92\":2}}],[\"deserializationfeature\",{\"1\":{\"81\":1}}],[\"desc\",{\"1\":{\"15\":1,\"73\":1}}],[\"dev\",{\"1\":{\"51\":1,\"52\":2,\"54\":1}}],[\"derby\",{\"1\":{\"40\":1}}],[\"deploydnsvipmode\",{\"1\":{\"39\":1}}],[\"dependencymanagement>\",{\"1\":{\"18\":1}}],[\"dependency>\",{\"1\":{\"18\":7,\"21\":2,\"22\":5,\"29\":1,\"50\":2,\"61\":1,\"68\":4,\"73\":1,\"76\":1,\"84\":1,\"122\":1,\"131\":1,\"136\":1}}],[\"dependencies\",{\"1\":{\"67\":2}}],[\"dependencies>\",{\"1\":{\"18\":1,\"21\":1,\"22\":1,\"50\":1,\"61\":1,\"68\":1}}],[\"dependencies<\",{\"1\":{\"18\":2}}],[\"deleted\",{\"1\":{\"14\":1,\"15\":1,\"16\":1}}],[\"defaulttargetdatasource\",{\"1\":{\"123\":1,\"125\":3,\"129\":2}}],[\"default\",{\"1\":{\"14\":7,\"15\":3,\"16\":9,\"35\":1,\"43\":1,\"64\":2,\"78\":2,\"81\":12,\"127\":2,\"132\":3,\"141\":2}}],[\"禁用\",{\"1\":{\"14\":1}}],[\"头像\",{\"1\":{\"14\":1}}],[\"邮箱不能为空\",{\"1\":{\"116\":1}}],[\"邮箱已存在\",{\"1\":{\"116\":1}}],[\"邮箱\",{\"1\":{\"14\":1}}],[\"昵称已存在\",{\"1\":{\"116\":1}}],[\"昵称不能为空\",{\"1\":{\"116\":1}}],[\"昵称\",{\"1\":{\"14\":1}}],[\"密码不能为空\",{\"1\":{\"116\":1,\"138\":1}}],[\"密码\",{\"1\":{\"14\":1,\"127\":1}}],[\"ie\",{\"1\":{\"153\":1,\"154\":2}}],[\"ibatis\",{\"1\":{\"131\":2}}],[\"illegal\",{\"1\":{\"125\":1}}],[\"illegalargumentexception\",{\"1\":{\"119\":1,\"125\":3}}],[\"illegalstateexception\",{\"1\":{\"75\":1,\"124\":1}}],[\"if\",{\"1\":{\"75\":1,\"90\":3,\"96\":3,\"113\":2,\"118\":1,\"119\":4,\"124\":2,\"125\":4,\"135\":1}}],[\"ignoreresourcenotfound\",{\"1\":{\"75\":1}}],[\"img\",{\"1\":{\"83\":3}}],[\"implements\",{\"1\":{\"75\":1,\"81\":1,\"85\":1,\"90\":2,\"93\":1,\"96\":2,\"99\":1,\"116\":1,\"123\":1}}],[\"imports\",{\"1\":{\"66\":1}}],[\"import\",{\"1\":{\"61\":4,\"64\":2,\"65\":1}}],[\"image\",{\"1\":{\"25\":1,\"31\":1,\"35\":1,\"36\":1,\"43\":1,\"44\":1,\"61\":1,\"73\":1,\"79\":1,\"98\":1,\"103\":1,\"110\":1}}],[\"ipv4\",{\"1\":{\"43\":1}}],[\"ip\",{\"1\":{\"27\":1,\"34\":1,\"42\":5,\"96\":2,\"106\":1}}],[\"ioexception\",{\"1\":{\"75\":1}}],[\"ioc\",{\"1\":{\"56\":1}}],[\"io\",{\"1\":{\"24\":1,\"60\":1}}],[\"inline\",{\"1\":{\"153\":2}}],[\"insertdb2userbymybatis\",{\"1\":{\"131\":1}}],[\"insertdb2user\",{\"1\":{\"131\":2}}],[\"insertdb1userbymybatis\",{\"1\":{\"131\":1}}],[\"insertdb1user\",{\"1\":{\"131\":2}}],[\"insert\",{\"1\":{\"131\":2,\"141\":4,\"142\":1}}],[\"instanceof\",{\"1\":{\"75\":1,\"90\":1,\"113\":2,\"125\":2}}],[\"instance\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"81\":2}}],[\"inheritablethreadlocal<>\",{\"1\":{\"128\":1}}],[\"indexof\",{\"1\":{\"152\":1}}],[\"index\",{\"1\":{\"111\":1}}],[\"initialized\",{\"1\":{\"124\":1}}],[\"initializingbean\",{\"1\":{\"123\":1}}],[\"initializr\",{\"1\":{\"60\":5,\"69\":1}}],[\"initmethod\",{\"1\":{\"122\":1}}],[\"initbinder\",{\"1\":{\"112\":1}}],[\"init\",{\"1\":{\"92\":2,\"122\":2}}],[\"into\",{\"1\":{\"131\":2}}],[\"integer\",{\"1\":{\"116\":2,\"118\":2,\"137\":1}}],[\"interceptorregistry\",{\"1\":{\"90\":1}}],[\"interceptor\",{\"1\":{\"87\":1,\"88\":1}}],[\"interface\",{\"1\":{\"63\":1,\"64\":1,\"132\":1,\"141\":2}}],[\"int\",{\"1\":{\"70\":3,\"96\":1,\"116\":2,\"127\":1}}],[\"info\",{\"1\":{\"75\":1,\"104\":5,\"106\":1,\"108\":8,\"122\":1}}],[\"inf\",{\"1\":{\"66\":3,\"83\":1}}],[\"increment\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"127\":1}}],[\"is\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"125\":1,\"141\":2}}],[\"id=\",{\"1\":{\"159\":2}}],[\"ide\",{\"1\":{\"73\":1}}],[\"idea\",{\"1\":{\"60\":3,\"61\":1,\"73\":1}}],[\"id\",{\"1\":{\"14\":2,\"15\":2,\"16\":3,\"36\":2,\"52\":2,\"54\":1,\"77\":5,\"81\":1,\"141\":3,\"142\":2}}],[\"npm\",{\"1\":{\"159\":1}}],[\"network\",{\"1\":{\"155\":1}}],[\"net\",{\"1\":{\"154\":1,\"159\":1}}],[\"need\",{\"1\":{\"116\":1}}],[\"newhashmap\",{\"1\":{\"125\":1}}],[\"new\",{\"1\":{\"53\":2,\"65\":4,\"75\":2,\"77\":2,\"81\":10,\"90\":5,\"93\":2,\"96\":6,\"99\":1,\"113\":1,\"116\":1,\"118\":1,\"119\":3,\"122\":2,\"123\":1,\"124\":1,\"125\":2,\"128\":1,\"130\":2,\"131\":4,\"133\":1,\"152\":1,\"159\":1}}],[\"n\",{\"1\":{\"106\":2,\"108\":1}}],[\"number\",{\"1\":{\"116\":1}}],[\"num=1\",{\"1\":{\"40\":1}}],[\"nullable\",{\"1\":{\"119\":1,\"123\":4}}],[\"null\",{\"1\":{\"14\":15,\"15\":7,\"16\":18,\"75\":2,\"79\":1,\"96\":3,\"116\":5,\"119\":5,\"124\":3,\"125\":2,\"127\":3,\"137\":3,\"141\":1,\"142\":1}}],[\"nginx\",{\"0\":{\"43\":1},\"1\":{\"39\":3,\"43\":3}}],[\"nɑ\",{\"1\":{\"24\":1}}],[\"noargsconstructor\",{\"1\":{\"141\":1,\"142\":2}}],[\"no\",{\"1\":{\"16\":1,\"111\":1,\"116\":1}}],[\"notblank\",{\"1\":{\"137\":1,\"138\":2}}],[\"notnull\",{\"1\":{\"119\":3,\"124\":1,\"136\":1,\"137\":1,\"141\":1,\"142\":2}}],[\"notempty\",{\"1\":{\"137\":1,\"142\":1}}],[\"note\",{\"1\":{\"16\":1}}],[\"not\",{\"1\":{\"14\":5,\"15\":5,\"16\":2,\"111\":1,\"116\":4,\"124\":1,\"127\":1}}],[\"naming\",{\"1\":{\"24\":1}}],[\"name=\",{\"1\":{\"108\":7}}],[\"namespace\",{\"0\":{\"36\":1},\"1\":{\"35\":3,\"36\":1,\"37\":1,\"45\":1}}],[\"name\",{\"1\":{\"15\":1,\"16\":1,\"30\":4,\"36\":2,\"40\":1,\"43\":4,\"44\":3,\"45\":3,\"51\":3,\"52\":5,\"54\":3,\"69\":1,\"73\":1,\"74\":3,\"75\":3,\"107\":2,\"122\":1,\"127\":2,\"130\":2,\"132\":2,\"159\":2}}],[\"nacosloadbalancer\",{\"1\":{\"44\":1}}],[\"nacosrule\",{\"1\":{\"44\":1}}],[\"nacos服务注册与配置中心\",{\"0\":{\"23\":1}}],[\"nacos\",{\"0\":{\"24\":1,\"25\":1,\"26\":1,\"28\":1,\"30\":1,\"31\":1,\"35\":1,\"38\":1,\"39\":1,\"41\":1,\"42\":1,\"47\":1,\"49\":1,\"51\":1,\"52\":1},\"1\":{\"10\":1,\"24\":9,\"25\":11,\"29\":3,\"30\":10,\"31\":3,\"32\":1,\"33\":5,\"34\":1,\"35\":1,\"36\":5,\"37\":2,\"38\":4,\"39\":4,\"40\":5,\"42\":18,\"43\":8,\"44\":10,\"45\":7,\"46\":7,\"50\":2,\"51\":12,\"52\":10,\"53\":3,\"54\":4}}],[\"nickname\",{\"1\":{\"14\":1,\"116\":2}}],[\"blob\",{\"1\":{\"152\":7}}],[\"beforeopt\",{\"1\":{\"132\":1}}],[\"bean\",{\"1\":{\"93\":2,\"96\":3,\"122\":4,\"130\":3,\"131\":2,\"133\":1,\"136\":3,\"137\":1}}],[\"beandefinitionregistry\",{\"1\":{\"65\":1}}],[\"bd2usermapper\",{\"1\":{\"131\":1}}],[\"btree\",{\"1\":{\"127\":1}}],[\"body\",{\"1\":{\"150\":3,\"152\":2}}],[\"body>\",{\"1\":{\"96\":1,\"159\":1}}],[\"border\",{\"1\":{\"146\":4}}],[\"boolean\",{\"1\":{\"90\":1,\"123\":1}}],[\"bootsrap\",{\"1\":{\"75\":1}}],[\"bootstarp\",{\"1\":{\"71\":1}}],[\"bootstrap等等\",{\"1\":{\"84\":1}}],[\"bootstrap\",{\"1\":{\"50\":2,\"51\":3,\"52\":1,\"71\":1}}],[\"bootstrap<\",{\"1\":{\"50\":1}}],[\"boot\",{\"0\":{\"67\":1},\"1\":{\"18\":4,\"21\":1,\"22\":2,\"56\":4,\"58\":5,\"61\":6,\"64\":1,\"66\":4,\"67\":4,\"68\":6,\"73\":3,\"76\":1,\"93\":1,\"103\":1,\"122\":2,\"131\":3,\"132\":1,\"136\":2}}],[\"boot<\",{\"1\":{\"18\":1,\"22\":2,\"61\":2,\"67\":1,\"68\":4,\"73\":3,\"76\":1,\"131\":1,\"136\":1}}],[\"back\",{\"0\":{\"161\":1}}],[\"background\",{\"1\":{\"146\":5}}],[\"baseexception\",{\"1\":{\"118\":4,\"119\":2}}],[\"basicerrorcontroller\",{\"1\":{\"111\":1}}],[\"baadnzxajnimku3wroxzllpaacpy02\",{\"1\":{\"53\":1}}],[\"baomidou<\",{\"1\":{\"18\":1,\"21\":1}}],[\"b5683b5050a7\",{\"1\":{\"45\":1}}],[\"bcd1\",{\"1\":{\"45\":1}}],[\"bindexception\",{\"1\":{\"117\":3,\"138\":1,\"139\":3}}],[\"bind\",{\"1\":{\"61\":2,\"138\":1}}],[\"bin\",{\"1\":{\"25\":1}}],[\"biginteger\",{\"1\":{\"81\":1}}],[\"bigint\",{\"1\":{\"14\":1,\"15\":1,\"16\":2}}],[\"button\",{\"1\":{\"145\":1}}],[\"build>\",{\"1\":{\"73\":1}}],[\"build\",{\"1\":{\"19\":2,\"21\":2,\"22\":2,\"116\":5,\"130\":2}}],[\"bus\",{\"1\":{\"10\":1}}],[\"bug\",{\"1\":{\"1\":1}}],[\"using\",{\"1\":{\"127\":1}}],[\"user`\",{\"1\":{\"127\":1}}],[\"usernotfoundexception\",{\"1\":{\"119\":1}}],[\"username\",{\"1\":{\"14\":1,\"52\":1,\"116\":2,\"118\":1,\"122\":1,\"127\":2,\"131\":2,\"138\":1}}],[\"usermapper2\",{\"1\":{\"131\":2}}],[\"usermapper1\",{\"1\":{\"131\":2}}],[\"usermapper\",{\"1\":{\"118\":1}}],[\"userid\",{\"1\":{\"105\":1}}],[\"userservice\",{\"1\":{\"99\":1,\"131\":3}}],[\"userregisterlistener\",{\"1\":{\"99\":1}}],[\"userregisterevent\",{\"1\":{\"99\":4}}],[\"userlist\",{\"1\":{\"96\":15,\"118\":2}}],[\"usercontroller\",{\"1\":{\"53\":1,\"105\":3,\"113\":2,\"138\":1,\"141\":1}}],[\"user\",{\"1\":{\"14\":2,\"16\":1,\"17\":1,\"22\":1,\"30\":2,\"36\":2,\"43\":1,\"44\":3,\"45\":1,\"51\":2,\"52\":4,\"53\":1,\"54\":1,\"59\":2,\"69\":1,\"75\":3,\"77\":1,\"96\":14,\"99\":13,\"105\":2,\"118\":3,\"127\":1,\"131\":16,\"138\":5,\"141\":12,\"142\":2}}],[\"util\",{\"1\":{\"103\":1,\"119\":1}}],[\"utf\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"75\":1,\"96\":1,\"108\":1,\"154\":2,\"159\":1}}],[\"updateuser\",{\"1\":{\"138\":1,\"141\":1}}],[\"update\",{\"1\":{\"131\":2,\"138\":1,\"141\":5,\"142\":1}}],[\"upload\",{\"1\":{\"85\":2}}],[\"upstream\",{\"1\":{\"43\":1}}],[\"underscore\",{\"1\":{\"131\":1}}],[\"undertow\",{\"1\":{\"68\":1}}],[\"unknown\",{\"1\":{\"81\":2}}],[\"uuid\",{\"1\":{\"70\":2}}],[\"ums\",{\"1\":{\"14\":3,\"52\":1}}],[\"urlencoder\",{\"1\":{\"154\":4}}],[\"urlpatterns\",{\"1\":{\"93\":1}}],[\"url\",{\"1\":{\"7\":1,\"52\":1,\"78\":1,\"83\":1,\"92\":1,\"122\":1,\"127\":2,\"137\":1,\"149\":2,\"151\":2,\"152\":5}}],[\"piece\",{\"1\":{\"145\":1}}],[\"pivotal\",{\"1\":{\"56\":1}}],[\"png等\",{\"1\":{\"153\":1}}],[\"png\",{\"1\":{\"83\":3}}],[\"publishevent\",{\"1\":{\"99\":1}}],[\"publisher\",{\"1\":{\"99\":2}}],[\"public\",{\"1\":{\"35\":1,\"36\":1,\"45\":1,\"53\":5,\"61\":4,\"63\":1,\"64\":1,\"65\":1,\"73\":1,\"74\":2,\"75\":4,\"77\":2,\"81\":8,\"83\":2,\"85\":2,\"90\":4,\"93\":5,\"96\":8,\"99\":7,\"105\":3,\"113\":1,\"116\":6,\"117\":5,\"118\":4,\"119\":4,\"122\":3,\"123\":1,\"125\":1,\"128\":4,\"129\":2,\"130\":4,\"131\":10,\"132\":4,\"133\":1,\"138\":4,\"139\":4,\"141\":6,\"142\":2}}],[\"put\",{\"1\":{\"53\":8,\"90\":4,\"113\":6,\"125\":1,\"130\":2}}],[\"platformtransactionmanager\",{\"1\":{\"133\":2}}],[\"platform=mysql\",{\"1\":{\"40\":1}}],[\"plugins>\",{\"1\":{\"73\":1}}],[\"plugin>\",{\"1\":{\"73\":1}}],[\"plugin<\",{\"1\":{\"73\":1}}],[\"plus\",{\"1\":{\"12\":1,\"18\":4,\"21\":1}}],[\"p\",{\"1\":{\"40\":1}}],[\"pojo\",{\"1\":{\"142\":1}}],[\"postmapping\",{\"1\":{\"138\":2,\"141\":2}}],[\"posthandle\",{\"1\":{\"89\":1}}],[\"pointcut\",{\"1\":{\"132\":3}}],[\"pool\",{\"1\":{\"122\":1}}],[\"port\",{\"1\":{\"27\":1,\"43\":1,\"44\":1,\"52\":1,\"54\":1}}],[\"pom\",{\"1\":{\"18\":3,\"19\":3,\"20\":3,\"21\":3,\"22\":3,\"61\":1,\"67\":1,\"73\":1,\"84\":1}}],[\"parm\",{\"1\":{\"153\":3}}],[\"parent\",{\"0\":{\"67\":1},\"1\":{\"67\":1}}],[\"parent>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"61\":1,\"67\":1}}],[\"parent<\",{\"1\":{\"18\":1,\"61\":1,\"67\":1}}],[\"past\",{\"1\":{\"137\":1}}],[\"pass\",{\"1\":{\"43\":1}}],[\"password=root\",{\"1\":{\"40\":1}}],[\"password\",{\"1\":{\"14\":1,\"52\":1,\"116\":1,\"122\":1,\"127\":2,\"131\":2,\"138\":1}}],[\"page\",{\"1\":{\"111\":1}}],[\"pathmatchingresourcepatternresolver\",{\"1\":{\"131\":1}}],[\"path\",{\"1\":{\"107\":3,\"108\":5,\"111\":1,\"150\":4,\"152\":2}}],[\"pathvariable\",{\"1\":{\"77\":1}}],[\"pattern>\",{\"1\":{\"108\":3}}],[\"pattern\",{\"1\":{\"80\":1,\"106\":1,\"108\":4,\"137\":1}}],[\"packageimports\",{\"1\":{\"65\":2}}],[\"package\",{\"1\":{\"61\":2,\"65\":4,\"66\":1,\"131\":1}}],[\"packaging>\",{\"1\":{\"18\":1,\"22\":1}}],[\"phone\",{\"1\":{\"16\":1,\"116\":1}}],[\"pms\",{\"1\":{\"15\":3}}],[\"pragma\",{\"1\":{\"155\":1}}],[\"precedence\",{\"1\":{\"132\":1}}],[\"prehandle\",{\"1\":{\"89\":1,\"90\":1}}],[\"prefix\",{\"1\":{\"51\":1,\"52\":5,\"53\":1,\"54\":1,\"73\":2,\"130\":2}}],[\"println\",{\"1\":{\"90\":2}}],[\"private\",{\"1\":{\"53\":9,\"73\":2,\"74\":1,\"75\":5,\"80\":1,\"90\":1,\"93\":2,\"96\":1,\"99\":2,\"116\":3,\"118\":2,\"123\":6,\"128\":1,\"131\":3,\"141\":1,\"142\":4}}],[\"price\",{\"1\":{\"15\":1,\"77\":1}}],[\"primary\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"127\":1}}],[\"proceed\",{\"1\":{\"132\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"132\":1}}],[\"processor<\",{\"1\":{\"73\":2}}],[\"protected\",{\"1\":{\"124\":1,\"125\":1,\"129\":1}}],[\"propertysource<\",{\"1\":{\"75\":1}}],[\"propertysourcefactory\",{\"1\":{\"75\":2}}],[\"propertysource\",{\"1\":{\"75\":7}}],[\"property\",{\"1\":{\"64\":1,\"125\":1}}],[\"propertiespropertysource\",{\"1\":{\"75\":1}}],[\"propertiesfromyaml\",{\"1\":{\"75\":2}}],[\"properties\",{\"1\":{\"40\":1,\"42\":1,\"48\":1,\"52\":1,\"69\":3,\"71\":2,\"75\":7,\"81\":2}}],[\"properties>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"profile\",{\"1\":{\"52\":1,\"73\":2,\"74\":1}}],[\"profiles\",{\"1\":{\"51\":1,\"52\":4,\"54\":1}}],[\"proxy\",{\"1\":{\"43\":1}}],[\"project\",{\"1\":{\"19\":1,\"21\":1,\"22\":1}}],[\"project>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"product\",{\"1\":{\"15\":2,\"17\":1,\"22\":1}}],[\"promote\",{\"1\":{\"6\":1}}],[\"技术上来说当然没问题\",{\"1\":{\"103\":1}}],[\"技术\",{\"1\":{\"92\":1,\"95\":1}}],[\"技术中最实用的技术\",{\"1\":{\"92\":1}}],[\"技术选型\",{\"0\":{\"12\":1}}],[\"技术栈不易扩展\",{\"1\":{\"1\":1}}],[\"组件化的编程模型\",{\"1\":{\"157\":1}}],[\"组件\",{\"1\":{\"11\":1,\"93\":2,\"136\":1}}],[\"来实现下载文件\",{\"1\":{\"152\":1}}],[\"来实现滚动条的样式修改\",{\"1\":{\"145\":1}}],[\"来设置数据源\",{\"1\":{\"132\":1}}],[\"来看看如何使用\",{\"1\":{\"131\":1}}],[\"来处理具体的解析业务\",{\"1\":{\"125\":1}}],[\"来处理静态内容的\",{\"1\":{\"83\":1}}],[\"来说\",{\"1\":{\"111\":1}}],[\"来说明\",{\"1\":{\"42\":1}}],[\"来区分请求是来自客户端浏览器\",{\"1\":{\"111\":1}}],[\"来区分的\",{\"1\":{\"52\":1}}],[\"来管理诸多的前端框架\",{\"1\":{\"84\":1}}],[\"来使用\",{\"1\":{\"70\":1}}],[\"来讲\",{\"1\":{\"69\":1}}],[\"来创建\",{\"1\":{\"60\":1}}],[\"来配置\",{\"1\":{\"52\":1}}],[\"来指定\",{\"1\":{\"52\":1}}],[\"来检查是否代理成功\",{\"1\":{\"43\":1}}],[\"来分发到具体的\",{\"1\":{\"39\":1}}],[\"来学习\",{\"1\":{\"11\":1}}],[\"来保存了大量的热点数据\",{\"1\":{\"1\":1}}],[\"98\",{\"1\":{\"46\":1}}],[\"9\",{\"1\":{\"10\":1}}],[\"8000\",{\"1\":{\"116\":1}}],[\"8080\",{\"1\":{\"61\":1,\"77\":1,\"83\":1,\"84\":1,\"85\":1}}],[\"80\",{\"1\":{\"43\":3,\"44\":1,\"45\":1}}],[\"8868\",{\"1\":{\"42\":3,\"43\":1}}],[\"8858\",{\"1\":{\"42\":3,\"43\":1}}],[\"8848\",{\"1\":{\"25\":1,\"30\":1,\"36\":1,\"42\":3,\"43\":1,\"51\":1,\"52\":1,\"54\":1}}],[\"8995\",{\"1\":{\"36\":1}}],[\"8<\",{\"1\":{\"19\":1,\"21\":1,\"22\":1}}],[\"8\",{\"1\":{\"10\":1,\"12\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"40\":1,\"75\":1,\"90\":2,\"96\":1,\"108\":1,\"154\":2,\"159\":1}}],[\"05\",{\"1\":{\"111\":1}}],[\"02\",{\"1\":{\"77\":1}}],[\"07\",{\"1\":{\"77\":1}}],[\"03\",{\"1\":{\"69\":1}}],[\"0~1\",{\"1\":{\"32\":1,\"44\":1}}],[\"0<\",{\"1\":{\"18\":3,\"19\":2,\"20\":2,\"21\":2,\"22\":2}}],[\"008\",{\"0\":{\"134\":1}}],[\"007\",{\"0\":{\"120\":1}}],[\"006\",{\"0\":{\"109\":1}}],[\"005\",{\"0\":{\"100\":1}}],[\"00\",{\"1\":{\"77\":1}}],[\"004\",{\"0\":{\"76\":1}}],[\"003\",{\"0\":{\"23\":1,\"69\":1}}],[\"002\",{\"0\":{\"11\":1,\"60\":1}}],[\"001\",{\"0\":{\"0\":1,\"55\":1,\"143\":1,\"147\":1,\"156\":1}}],[\"0\",{\"1\":{\"10\":3,\"12\":1,\"14\":2,\"15\":2,\"16\":1,\"18\":14,\"19\":9,\"20\":9,\"21\":9,\"22\":9,\"30\":2,\"36\":2,\"40\":1,\"42\":3,\"43\":10,\"44\":2,\"45\":1,\"51\":1,\"52\":1,\"54\":1,\"56\":2,\"65\":2,\"68\":1,\"70\":2,\"78\":2,\"81\":1,\"93\":1,\"96\":1,\"106\":1,\"108\":1,\"117\":3,\"118\":1,\"139\":3}}],[\"6010\",{\"1\":{\"116\":1}}],[\"6009\",{\"1\":{\"116\":1}}],[\"6008\",{\"1\":{\"116\":1}}],[\"6007\",{\"1\":{\"116\":1}}],[\"6006\",{\"1\":{\"116\":1}}],[\"6005\",{\"1\":{\"116\":1}}],[\"6004\",{\"1\":{\"116\":1}}],[\"6003\",{\"1\":{\"116\":1}}],[\"6002\",{\"1\":{\"116\":1}}],[\"6001\",{\"1\":{\"116\":2}}],[\"60天\",{\"1\":{\"108\":2}}],[\"60\",{\"1\":{\"108\":1}}],[\"64\",{\"1\":{\"14\":4,\"15\":1}}],[\"6\",{\"0\":{\"46\":1,\"132\":1,\"140\":1,\"141\":1,\"142\":1},\"1\":{\"10\":1,\"18\":2,\"84\":2,\"136\":1}}],[\"及其组件版本的参考\",{\"1\":{\"10\":1}}],[\"globalexceptionhandler\",{\"1\":{\"117\":1,\"139\":1}}],[\"g\",{\"1\":{\"108\":1}}],[\"gt\",{\"1\":{\"108\":1}}],[\"gtzk\",{\"1\":{\"53\":1}}],[\"groovy\",{\"1\":{\"108\":2}}],[\"groups\",{\"1\":{\"141\":2,\"142\":2}}],[\"group\",{\"0\":{\"37\":1},\"1\":{\"35\":5,\"37\":5,\"104\":1}}],[\"groupid>\",{\"1\":{\"18\":9,\"19\":1,\"20\":1,\"21\":3,\"22\":7,\"29\":1,\"50\":2,\"61\":2,\"67\":1,\"68\":6,\"73\":3,\"76\":1,\"84\":1,\"122\":1,\"131\":1,\"136\":1}}],[\"gmt+8\",{\"1\":{\"80\":2,\"81\":1}}],[\"getpassword\",{\"1\":{\"131\":2}}],[\"getpackagenames\",{\"1\":{\"65\":2}}],[\"gethisdatasource\",{\"1\":{\"130\":1}}],[\"getheader\",{\"1\":{\"90\":1}}],[\"getdatesource\",{\"1\":{\"130\":1}}],[\"getdatasource\",{\"1\":{\"125\":1,\"128\":1,\"129\":1}}],[\"getdefaultmessage\",{\"1\":{\"117\":4,\"139\":2}}],[\"getdeserializationconfig\",{\"1\":{\"81\":1}}],[\"get\",{\"1\":{\"117\":3,\"124\":1,\"128\":1,\"139\":3,\"152\":1}}],[\"getbindingresult\",{\"1\":{\"117\":2,\"139\":2}}],[\"getbyorderid\",{\"1\":{\"77\":1}}],[\"getmethod\",{\"1\":{\"132\":1}}],[\"getmessage\",{\"1\":{\"116\":1,\"117\":3,\"118\":1,\"139\":1}}],[\"getmapping\",{\"1\":{\"53\":2,\"61\":2,\"74\":1,\"77\":1,\"138\":1}}],[\"getconstraintviolations\",{\"1\":{\"117\":1,\"139\":1}}],[\"getcode\",{\"1\":{\"116\":1,\"118\":1,\"119\":1}}],[\"getcause\",{\"1\":{\"75\":2}}],[\"getlogger\",{\"1\":{\"105\":1}}],[\"getusername\",{\"1\":{\"118\":1,\"131\":2}}],[\"getuser\",{\"1\":{\"99\":2}}],[\"getuserbysessionid\",{\"1\":{\"96\":2}}],[\"getremoteaddr\",{\"1\":{\"96\":1}}],[\"getresources\",{\"1\":{\"131\":1}}],[\"getresource\",{\"1\":{\"75\":2}}],[\"getid\",{\"1\":{\"96\":2}}],[\"getannotation\",{\"1\":{\"132\":1}}],[\"getallerrors\",{\"1\":{\"117\":2,\"139\":2}}],[\"getattribute\",{\"1\":{\"96\":2}}],[\"getaccesskeysecret\",{\"1\":{\"53\":1}}],[\"getaccesskey\",{\"1\":{\"53\":1}}],[\"getsignature\",{\"1\":{\"132\":1}}],[\"getsignname\",{\"1\":{\"53\":1}}],[\"getservletrequest\",{\"1\":{\"96\":1}}],[\"getservletcontext\",{\"1\":{\"96\":6}}],[\"getsession\",{\"1\":{\"96\":6}}],[\"getwriter\",{\"1\":{\"90\":2}}],[\"getter\",{\"1\":{\"116\":1,\"118\":1}}],[\"gettemplatecode\",{\"1\":{\"53\":1}}],[\"gettimezone\",{\"1\":{\"81\":1}}],[\"getobject\",{\"1\":{\"75\":1,\"131\":1}}],[\"getfilename\",{\"1\":{\"75\":1}}],[\"github地址\",{\"1\":{\"24\":1}}],[\"github\",{\"1\":{\"10\":1,\"24\":1,\"25\":2}}],[\"goods\",{\"1\":{\"15\":1}}],[\"go\",{\"1\":{\"1\":1}}],[\"使得\",{\"1\":{\"158\":2}}],[\"使得微服务架构有了更多的选择\",{\"1\":{\"10\":1}}],[\"使其管理的数据源是动态数据源\",{\"1\":{\"133\":1}}],[\"使用上面任意一种方法都可以实现文件下载\",{\"1\":{\"152\":1}}],[\"使用的\",{\"1\":{\"131\":1}}],[\"使用的时候只需要在\",{\"1\":{\"58\":1}}],[\"使用起来略微不同\",{\"1\":{\"131\":1}}],[\"使用assert替换throw\",{\"0\":{\"119\":1}}],[\"使用如下配置自定义配置日志文件名\",{\"1\":{\"108\":1}}],[\"使用配置文件实现则更加合适\",{\"1\":{\"108\":1}}],[\"使用mysql数据库\",{\"1\":{\"40\":1}}],[\"使用\",{\"1\":{\"37\":1,\"53\":3,\"61\":1,\"73\":1,\"93\":2,\"135\":1,\"138\":1}}],[\"使用微服务构建的是分布式系统\",{\"1\":{\"3\":1}}],[\"使用不同的数据存储技术\",{\"1\":{\"2\":1}}],[\"断路器\",{\"1\":{\"10\":1}}],[\"包含了有帮助的命令行警告\",{\"1\":{\"159\":1}}],[\"包含的所有功能的应用程序\",{\"1\":{\"1\":1}}],[\"包下\",{\"1\":{\"123\":1}}],[\"包中\",{\"1\":{\"73\":1}}],[\"包\",{\"1\":{\"68\":1}}],[\"包括日志级别控制\",{\"1\":{\"103\":1}}],[\"包括调用下一个拦截器和控制器类中的方法执行等\",{\"1\":{\"89\":1}}],[\"包括\",{\"1\":{\"10\":1}}],[\"容器中注入\",{\"1\":{\"131\":1}}],[\"容器中注入一个\",{\"1\":{\"122\":1}}],[\"容器中导入了\",{\"1\":{\"65\":1}}],[\"容器管理\",{\"1\":{\"68\":1}}],[\"容器\",{\"1\":{\"57\":1,\"63\":1}}],[\"容易将测试环境的配置带到生产上\",{\"1\":{\"48\":1}}],[\"容易部署的分布式系统开发工具包\",{\"1\":{\"10\":1}}],[\"容错能力\",{\"1\":{\"7\":1}}],[\"屏蔽掉了复杂的配置和实现原理\",{\"1\":{\"10\":1}}],[\"风格的封装\",{\"1\":{\"10\":1}}],[\"是包含在\",{\"1\":{\"136\":1}}],[\"是对这个规范的实现\",{\"1\":{\"136\":1}}],[\"是其升级版本\",{\"1\":{\"136\":1}}],[\"是不是就可以实现数据源的动态切换呢\",{\"1\":{\"131\":1}}],[\"是由\",{\"1\":{\"131\":1}}],[\"是如何使用动态数据源的\",{\"1\":{\"131\":1}}],[\"是如何实现监听的呢\",{\"1\":{\"97\":1}}],[\"是否存在\",{\"1\":{\"96\":1}}],[\"是否合法\",{\"1\":{\"90\":1}}],[\"是一款用于构建用户界面的\",{\"1\":{\"157\":1}}],[\"是一个类似于\",{\"1\":{\"159\":1}}],[\"是一个用于验证参数或状态的工具类\",{\"1\":{\"119\":1}}],[\"是一个\",{\"1\":{\"68\":1}}],[\"是一种特殊的组件\",{\"1\":{\"87\":1}}],[\"是一种新式的格式\",{\"1\":{\"69\":1}}],[\"是一种软件设计范式\",{\"1\":{\"59\":1}}],[\"是一种会保存到\",{\"1\":{\"33\":1}}],[\"是一种架构理念\",{\"1\":{\"2\":1}}],[\"是诞生于\",{\"1\":{\"56\":1}}],[\"是同集群内随机挑选\",{\"1\":{\"44\":1}}],[\"是构建以\",{\"1\":{\"24\":1}}],[\"是\",{\"1\":{\"24\":1,\"93\":1,\"131\":1,\"136\":1,\"140\":1,\"158\":2}}],[\"是阿里研发的一套微服务架构的落地技术方案\",{\"1\":{\"10\":1}}],[\"是微服务架构的一站式解决方案\",{\"1\":{\"10\":1}}],[\"src=\",{\"1\":{\"159\":1}}],[\"sre\",{\"1\":{\"96\":4}}],[\"switchsource\",{\"1\":{\"132\":2}}],[\"switchdatasource\",{\"1\":{\"132\":5}}],[\"system\",{\"1\":{\"116\":1}}],[\"substring\",{\"1\":{\"150\":1,\"152\":1}}],[\"supported\",{\"1\":{\"125\":1}}],[\"super\",{\"1\":{\"81\":1,\"99\":1,\"129\":3}}],[\"success\",{\"1\":{\"116\":3,\"141\":2}}],[\"slf4j\",{\"1\":{\"103\":2,\"105\":2,\"117\":1,\"141\":1}}],[\"slb\",{\"1\":{\"39\":2}}],[\"span>\",{\"1\":{\"96\":3}}],[\"span><br\",{\"1\":{\"96\":1}}],[\"spring日志级别控制\",{\"1\":{\"108\":1}}],[\"spring容器中\",{\"1\":{\"65\":1}}],[\"springapplication\",{\"1\":{\"61\":2}}],[\"spring4\",{\"1\":{\"56\":1}}],[\"springframework\",{\"1\":{\"18\":2,\"22\":2,\"50\":1,\"61\":6,\"66\":1,\"67\":1,\"68\":4,\"73\":3,\"76\":1,\"108\":1,\"119\":1,\"123\":1,\"136\":1,\"138\":2}}],[\"spring\",{\"0\":{\"67\":1,\"78\":1,\"136\":1},\"1\":{\"10\":2,\"18\":5,\"30\":9,\"36\":3,\"40\":1,\"43\":3,\"44\":4,\"45\":3,\"51\":5,\"52\":12,\"54\":5,\"56\":15,\"57\":2,\"58\":6,\"60\":7,\"63\":1,\"64\":1,\"65\":1,\"66\":5,\"67\":3,\"68\":3,\"69\":1,\"76\":2,\"77\":2,\"78\":6,\"80\":1,\"81\":4,\"83\":2,\"97\":1,\"103\":1,\"107\":1,\"108\":6,\"112\":1,\"119\":1,\"122\":4,\"127\":1,\"130\":2,\"131\":5,\"133\":2,\"136\":4,\"139\":1,\"140\":1}}],[\"springboot参数校验\",{\"0\":{\"134\":1}}],[\"springboot多数据源配置\",{\"0\":{\"120\":1}}],[\"springboot默认异常处理机制\",{\"0\":{\"111\":1}}],[\"springboot默认日志管理\",{\"0\":{\"102\":1}}],[\"springboot统一异常处理\",{\"0\":{\"109\":1}}],[\"springboot日志管理\",{\"0\":{\"100\":1}}],[\"springboot的启动器就是这么神奇\",{\"1\":{\"76\":1}}],[\"springboot开发web入门\",{\"0\":{\"76\":1}}],[\"springboot配置文件\",{\"0\":{\"69\":1}}],[\"springboot应用启动时默认会将引导类所在的\",{\"1\":{\"65\":1}}],[\"springbootconfiguration\",{\"1\":{\"63\":2}}],[\"springbootapplication\",{\"0\":{\"63\":1},\"1\":{\"61\":2,\"63\":2,\"93\":1}}],[\"springboot项目父坐标\",{\"1\":{\"61\":1}}],[\"springboot2\",{\"1\":{\"56\":1}}],[\"springboot概述\",{\"0\":{\"55\":1}}],[\"springboot\",{\"0\":{\"56\":1,\"57\":1,\"58\":1,\"89\":1,\"93\":1,\"97\":1,\"162\":1},\"1\":{\"10\":3,\"51\":1,\"56\":5,\"57\":2,\"58\":7,\"59\":2,\"60\":4,\"61\":1,\"63\":1,\"66\":4,\"67\":3,\"68\":3,\"69\":3,\"70\":1,\"71\":4,\"72\":1,\"73\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":1,\"83\":2,\"84\":2,\"85\":1,\"90\":1,\"93\":4,\"96\":1,\"97\":4,\"99\":1,\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":6,\"111\":1,\"122\":2,\"127\":1,\"131\":1,\"135\":1,\"136\":1}}],[\"springcloud案例项目搭建\",{\"0\":{\"11\":1}}],[\"springcloud\",{\"0\":{\"10\":1,\"160\":1},\"1\":{\"10\":11,\"11\":2,\"18\":2,\"25\":2,\"44\":1,\"50\":1}}],[\"size\",{\"1\":{\"118\":1,\"125\":1,\"137\":1}}],[\"simplemodule\",{\"1\":{\"81\":4}}],[\"simpledateformat\",{\"1\":{\"81\":1}}],[\"signname\",{\"1\":{\"53\":7}}],[\"sss\",{\"1\":{\"108\":1}}],[\"ss\",{\"1\":{\"80\":3,\"81\":2,\"106\":1,\"108\":1}}],[\"shared\",{\"1\":{\"54\":1}}],[\"shanghai\",{\"1\":{\"43\":1,\"44\":2,\"45\":1,\"127\":2}}],[\"stream\",{\"1\":{\"117\":1,\"139\":1}}],[\"stringutils\",{\"1\":{\"90\":1}}],[\"string>\",{\"1\":{\"53\":4}}],[\"string\",{\"1\":{\"53\":8,\"61\":2,\"64\":2,\"65\":3,\"73\":2,\"74\":2,\"75\":6,\"81\":4,\"90\":1,\"96\":1,\"116\":4,\"117\":1,\"118\":2,\"119\":2,\"125\":3,\"128\":2,\"131\":2,\"132\":2,\"138\":2,\"139\":1,\"141\":2,\"142\":1}}],[\"standardcharsets\",{\"1\":{\"154\":2}}],[\"standalone\",{\"1\":{\"25\":1}}],[\"start\",{\"1\":{\"60\":1}}],[\"startup\",{\"1\":{\"25\":2}}],[\"starters\",{\"1\":{\"58\":1}}],[\"starter<\",{\"1\":{\"18\":1,\"21\":1,\"122\":1,\"131\":1}}],[\"starter\",{\"0\":{\"58\":1,\"67\":1},\"1\":{\"18\":1,\"22\":2,\"29\":1,\"50\":2,\"57\":1,\"58\":8,\"59\":1,\"61\":4,\"67\":2,\"68\":10,\"76\":2,\"103\":2,\"122\":1,\"136\":3}}],[\"static\",{\"1\":{\"61\":1,\"81\":4,\"83\":4,\"90\":1,\"105\":1,\"116\":4,\"119\":3,\"128\":4}}],[\"status\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"111\":1}}],[\"state\",{\"1\":{\"6\":1}}],[\"sms\",{\"1\":{\"53\":8}}],[\"sqlsession\",{\"1\":{\"131\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"131\":2}}],[\"sqlsessionfactory\",{\"1\":{\"131\":5}}],[\"sql\",{\"1\":{\"40\":1,\"104\":2,\"125\":1,\"131\":4}}],[\"source\",{\"1\":{\"99\":2,\"125\":1}}],[\"sourcename\",{\"1\":{\"75\":3}}],[\"sourceencoding>\",{\"1\":{\"19\":1,\"21\":1,\"22\":1}}],[\"sourceencoding>utf\",{\"1\":{\"19\":1,\"21\":1,\"22\":1}}],[\"source>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"source>11<\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"script>\",{\"1\":{\"159\":2}}],[\"scrollbar\",{\"1\":{\"145\":6,\"146\":6}}],[\"scanperiod=\",{\"1\":{\"108\":1}}],[\"scan=\",{\"1\":{\"108\":1}}],[\"scope>\",{\"1\":{\"18\":2,\"68\":2}}],[\"schemalocation=\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"selectbyname\",{\"1\":{\"118\":1}}],[\"selectimports\",{\"1\":{\"66\":1}}],[\"serializable\",{\"1\":{\"116\":1}}],[\"servletlistenerregistrationbean<onlinerequestlistener>\",{\"1\":{\"96\":2}}],[\"servletlistenerregistrationbean<onlinesessionlistener>\",{\"1\":{\"96\":2}}],[\"servletlistenerregistrationbean<>\",{\"1\":{\"96\":2}}],[\"servletlistenerregistrationbean\",{\"1\":{\"96\":2}}],[\"servletrequestevent\",{\"1\":{\"96\":1}}],[\"servletrequestattributelistener\",{\"1\":{\"95\":1}}],[\"servletrequest\",{\"1\":{\"95\":2,\"96\":3}}],[\"servletrequestlistener\",{\"1\":{\"95\":1,\"96\":3}}],[\"servletcontextattributelistener\",{\"1\":{\"95\":1}}],[\"servletcontextlistener\",{\"1\":{\"95\":1}}],[\"servletcontext\",{\"1\":{\"95\":3}}],[\"servletcomponentscan\",{\"1\":{\"93\":4,\"96\":1}}],[\"servlet3\",{\"1\":{\"93\":1}}],[\"servlet\",{\"0\":{\"96\":1},\"1\":{\"92\":3,\"93\":1,\"95\":2,\"97\":1}}],[\"service\",{\"1\":{\"24\":1,\"30\":2,\"35\":3,\"36\":1,\"43\":1,\"44\":1,\"45\":1,\"51\":1,\"52\":1,\"54\":1,\"56\":1,\"99\":1,\"104\":2,\"110\":1,\"131\":2}}],[\"service<\",{\"1\":{\"22\":1}}],[\"services<\",{\"1\":{\"18\":1,\"22\":1}}],[\"services\",{\"0\":{\"22\":1},\"1\":{\"17\":1,\"29\":1,\"50\":1}}],[\"servertimezone=asia\",{\"1\":{\"127\":2}}],[\"server<\",{\"1\":{\"22\":3}}],[\"server\",{\"1\":{\"17\":3,\"30\":7,\"36\":3,\"42\":3,\"43\":9,\"44\":7,\"45\":3,\"51\":7,\"52\":10,\"53\":1,\"54\":7,\"104\":2}}],[\"seconds\",{\"1\":{\"108\":1}}],[\"se\",{\"1\":{\"96\":7}}],[\"sessionutil\",{\"1\":{\"96\":2}}],[\"sessiondestroyed\",{\"1\":{\"96\":1}}],[\"sessioncreated\",{\"1\":{\"96\":1}}],[\"sessionid\",{\"1\":{\"96\":11}}],[\"session\",{\"1\":{\"95\":2,\"96\":1,\"131\":2}}],[\"setheader\",{\"1\":{\"153\":1,\"155\":1}}],[\"setmapunderscoretocamelcase\",{\"1\":{\"131\":1}}],[\"setmapperlocations\",{\"1\":{\"131\":1}}],[\"set\",{\"1\":{\"128\":1}}],[\"setdefaulttargetdatasource\",{\"1\":{\"129\":1}}],[\"setdatasource\",{\"1\":{\"131\":5,\"132\":1}}],[\"setdatasources\",{\"1\":{\"128\":1,\"132\":1}}],[\"setdateformat\",{\"1\":{\"81\":1}}],[\"setdriverclassname\",{\"1\":{\"122\":1}}],[\"setpassword\",{\"1\":{\"122\":1}}],[\"setprice\",{\"1\":{\"77\":1}}],[\"setusername\",{\"1\":{\"122\":1}}],[\"seturl\",{\"1\":{\"122\":1}}],[\"settypealiasespackage\",{\"1\":{\"131\":1}}],[\"settargetdatasources\",{\"1\":{\"129\":1}}],[\"setter\",{\"1\":{\"118\":1}}],[\"settimezone\",{\"1\":{\"81\":1}}],[\"settitle\",{\"1\":{\"77\":1}}],[\"setlistener\",{\"1\":{\"96\":2}}],[\"setip\",{\"1\":{\"96\":1}}],[\"setid\",{\"1\":{\"77\":1}}],[\"setsessionid\",{\"1\":{\"96\":1}}],[\"setattribute\",{\"1\":{\"96\":4}}],[\"setorder\",{\"1\":{\"93\":2}}],[\"setobjectmapper\",{\"1\":{\"81\":1}}],[\"setname\",{\"1\":{\"93\":2}}],[\"setfilter\",{\"1\":{\"93\":2}}],[\"setconfiguration\",{\"1\":{\"131\":1}}],[\"setcontenttype\",{\"1\":{\"90\":2}}],[\"setcreatetime\",{\"1\":{\"77\":1}}],[\"setresources\",{\"1\":{\"75\":1}}],[\"seata\",{\"1\":{\"10\":1}}],[\"sentinel\",{\"1\":{\"10\":1}}],[\"性能监控\",{\"1\":{\"9\":1}}],[\"就导致了客户\",{\"1\":{\"155\":1}}],[\"就要利用content\",{\"1\":{\"153\":1}}],[\"就不得不提\",{\"1\":{\"136\":1}}],[\"就像下面这样\",{\"1\":{\"104\":1}}],[\"就属于这一类\",{\"1\":{\"103\":1}}],[\"就能自动扫描到要加载的信息并启动相应的默认配置\",{\"1\":{\"58\":1}}],[\"就能够自动感知相应的变化\",{\"1\":{\"48\":1}}],[\"就可以下载其\",{\"1\":{\"150\":1}}],[\"就可以根据这两种情况进行分组\",{\"1\":{\"141\":1}}],[\"就可以看到这张图片\",{\"1\":{\"85\":1}}],[\"就可以实现数据源的配置\",{\"1\":{\"122\":1}}],[\"就可以实现\",{\"1\":{\"68\":1}}],[\"就可以实现配置的热更新\",{\"1\":{\"53\":1}}],[\"就可以将这些服务分配到同一个组中\",{\"1\":{\"37\":1}}],[\"就可以精准定位到一个具体的微服务\",{\"1\":{\"35\":1}}],[\"就可以启动\",{\"1\":{\"25\":1,\"63\":1}}],[\"就是\",{\"1\":{\"158\":1}}],[\"就是控制响应头\",{\"1\":{\"155\":1}}],[\"就是异常处理器的意思\",{\"1\":{\"112\":1}}],[\"就是导入组件实例的具体实现\",{\"1\":{\"65\":1}}],[\"就是实现灰度发布的关键\",{\"1\":{\"37\":1}}],[\"就是具体的微服务了\",{\"1\":{\"35\":1}}],[\"就是对一次请求涉及的很多个服务链路进行日志记录\",{\"1\":{\"9\":1}}],[\"就需要对一次请求涉及的多个服务链路进行日志记录\",{\"1\":{\"9\":1}}],[\"横跨多个不同的数据中心\",{\"1\":{\"9\":1}}],[\"互联网应用构建在不同的软件模块集上\",{\"1\":{\"9\":1}}],[\"链路追踪\",{\"0\":{\"9\":1}}],[\"507\",{\"1\":{\"116\":1}}],[\"502\",{\"1\":{\"113\":1}}],[\"501\",{\"1\":{\"113\":1}}],[\"50\",{\"1\":{\"106\":2,\"127\":1}}],[\"500\",{\"1\":{\"14\":1,\"16\":1,\"113\":1}}],[\"5level\",{\"1\":{\"106\":3,\"108\":1}}],[\"548+00\",{\"1\":{\"77\":1}}],[\"54\",{\"1\":{\"69\":1}}],[\"5\",{\"0\":{\"9\":1,\"10\":1,\"45\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":2,\"107\":1,\"119\":1,\"131\":1,\"139\":1},\"1\":{\"18\":1,\"78\":2,\"106\":2}}],[\"极有可能会造成一连串的服务不可用\",{\"1\":{\"8\":1}}],[\"没多少了\",{\"1\":{\"32\":1}}],[\"没有做服务容错的话\",{\"1\":{\"8\":1}}],[\"没法引入其他语言\",{\"1\":{\"1\":1}}],[\"流量洪峰的到来可能会直接打垮这两个服务\",{\"1\":{\"46\":1}}],[\"流量\",{\"1\":{\"7\":1}}],[\"流量管控\",{\"1\":{\"7\":1}}],[\"各个场景提供的默认配置类\",{\"1\":{\"66\":1}}],[\"各个\",{\"1\":{\"7\":1}}],[\"长短链接支持\",{\"1\":{\"7\":1}}],[\"网关路由\",{\"1\":{\"10\":1}}],[\"网关更专注于安全\",{\"1\":{\"7\":1}}],[\"网关应运而生\",{\"1\":{\"7\":1}}],[\"网络延迟\",{\"1\":{\"3\":1}}],[\"为各个日志实现配置了默认的配置文件名\",{\"1\":{\"108\":1}}],[\"为常见的日志框架\",{\"1\":{\"103\":1}}],[\"为啥要记录发生了什么呢\",{\"1\":{\"101\":1}}],[\"为什么要进行参数校验\",{\"0\":{\"135\":1}}],[\"为什么要用日志\",{\"0\":{\"101\":1}}],[\"为什么\",{\"1\":{\"78\":1}}],[\"为什么我们会需要配置中心\",{\"1\":{\"48\":1}}],[\"为\",{\"1\":{\"52\":1,\"66\":1}}],[\"为配置内容的数据格式\",{\"1\":{\"52\":1}}],[\"为空时\",{\"1\":{\"52\":1}}],[\"为本机电脑的\",{\"1\":{\"43\":1}}],[\"为例\",{\"1\":{\"40\":1,\"43\":1,\"108\":1}}],[\"为高可用做了非常多的特性支持\",{\"1\":{\"38\":1}}],[\"为中心的现代应用架构\",{\"1\":{\"24\":1}}],[\"为每个独立的模块创建自己的数据库\",{\"1\":{\"13\":1}}],[\"为了美观\",{\"1\":{\"144\":1}}],[\"为了让页面更加美观\",{\"1\":{\"84\":1}}],[\"为了简化开发\",{\"1\":{\"56\":1}}],[\"为了保证高可用\",{\"1\":{\"39\":1}}],[\"为了方便操作且更低耦合\",{\"1\":{\"132\":1}}],[\"为了方便响应数据的返回\",{\"1\":{\"116\":1}}],[\"为了方便学习\",{\"1\":{\"16\":1}}],[\"为了方便学习这里仅仅创建一张商品表\",{\"1\":{\"15\":1}}],[\"为了方便\",{\"1\":{\"11\":1}}],[\"为了解决这些问题\",{\"1\":{\"7\":1}}],[\"为服务的调用增加了难度\",{\"1\":{\"7\":1}}],[\"地址访问\",{\"1\":{\"83\":1}}],[\"地址为\",{\"1\":{\"60\":1}}],[\"地址和端口\",{\"1\":{\"34\":1}}],[\"地址已经给出了详细的\",{\"1\":{\"10\":1}}],[\"地址\",{\"1\":{\"7\":1,\"25\":1,\"43\":1,\"106\":1}}],[\"客户端再不同的场景下需要调用不同的\",{\"1\":{\"7\":1}}],[\"并无直接关联\",{\"1\":{\"158\":1}}],[\"并提供了一套声明式的\",{\"1\":{\"157\":1}}],[\"并添加了自动校验功能\",{\"1\":{\"136\":1}}],[\"并在控制器上标注\",{\"1\":{\"138\":1}}],[\"并在它的基础上增加了一些新的校验注解\",{\"1\":{\"136\":1}}],[\"并在其中校验\",{\"1\":{\"90\":1}}],[\"并且有特定的异常码\",{\"1\":{\"119\":1}}],[\"并且与本地的\",{\"1\":{\"51\":1}}],[\"并进行处理\",{\"1\":{\"113\":1}}],[\"并放入到\",{\"1\":{\"96\":1}}],[\"并重写其中的\",{\"1\":{\"85\":1}}],[\"并将校验信息封装进了特定的类中\",{\"1\":{\"136\":1}}],[\"并将其导入项目即可\",{\"1\":{\"84\":1}}],[\"并将新的变化统一发送到相应程序上\",{\"1\":{\"48\":1}}],[\"并不在上面六个响应头中\",{\"1\":{\"155\":1}}],[\"并不支持\",{\"1\":{\"81\":1}}],[\"并不需要指定版本信息\",{\"1\":{\"67\":1}}],[\"并不需要关心底层通信细节和调用过程\",{\"1\":{\"6\":1}}],[\"并指定你自定义的配置文件即可完成\",{\"1\":{\"75\":1}}],[\"并没有校验其中的数据\",{\"1\":{\"142\":1}}],[\"并没有配置\",{\"1\":{\"68\":1}}],[\"并没有重复造轮子\",{\"1\":{\"10\":1}}],[\"并基于spring\",{\"1\":{\"56\":1}}],[\"并为运维的细力度管控\",{\"1\":{\"48\":1}}],[\"并通知服务调用者集群中的每一个实例\",{\"1\":{\"27\":1}}],[\"并通过这些信息去请求相关服务的过程就是服务发现\",{\"1\":{\"5\":1}}],[\"序列化方式和通信细节\",{\"1\":{\"6\":1}}],[\"框架无关\",{\"1\":{\"136\":1}}],[\"框架却是\",{\"1\":{\"131\":1}}],[\"框架应该假定合理的默认值\",{\"1\":{\"59\":1}}],[\"框架中各种复杂的手动配置\",{\"1\":{\"56\":1}}],[\"框架本身并不提供\",{\"1\":{\"56\":1}}],[\"框架\",{\"1\":{\"56\":1,\"157\":1,\"159\":1}}],[\"框架开发了全新的\",{\"1\":{\"56\":1}}],[\"框架的应用\",{\"1\":{\"56\":1}}],[\"框架的核心特性以及扩展功能\",{\"1\":{\"56\":1}}],[\"框架的使用\",{\"1\":{\"56\":1}}],[\"框架的基础上通过注解的方式进一步简化了\",{\"1\":{\"56\":1}}],[\"框架的主要目标就是让远程服务调用更简单\",{\"1\":{\"6\":1}}],[\"框架是轻量级的\",{\"1\":{\"56\":1}}],[\"框架负责屏蔽底层的传输方式\",{\"1\":{\"6\":1}}],[\"透明\",{\"1\":{\"6\":1}}],[\"允许像调用本地服务一样调用远程服务\",{\"1\":{\"6\":1}}],[\"cdn\",{\"1\":{\"159\":1}}],[\"c0c0c0\",{\"1\":{\"146\":1}}],[\"c\",{\"1\":{\"106\":2}}],[\"chain\",{\"1\":{\"116\":1}}],[\"charset=\",{\"1\":{\"96\":1,\"159\":1}}],[\"charset=utf\",{\"1\":{\"90\":2}}],[\"char\",{\"1\":{\"16\":1}}],[\"ch\",{\"1\":{\"108\":7}}],[\"checktoken\",{\"1\":{\"90\":1}}],[\"css伪类\",{\"1\":{\"145\":1}}],[\"css\",{\"0\":{\"145\":1,\"163\":1},\"1\":{\"84\":1,\"145\":1,\"157\":1}}],[\"cache\",{\"1\":{\"155\":1}}],[\"case\",{\"1\":{\"131\":1}}],[\"camel\",{\"1\":{\"131\":1}}],[\"cannot\",{\"1\":{\"124\":1}}],[\"cause\",{\"1\":{\"75\":2}}],[\"catch\",{\"1\":{\"75\":1}}],[\"call\",{\"1\":{\"6\":1}}],[\"cn\",{\"1\":{\"53\":1}}],[\"cj\",{\"1\":{\"52\":1,\"122\":2,\"127\":2}}],[\"click\",{\"1\":{\"150\":1,\"152\":1}}],[\"client\",{\"1\":{\"34\":2}}],[\"cleardatasource\",{\"1\":{\"128\":1,\"131\":4,\"132\":1}}],[\"classic\",{\"1\":{\"108\":2}}],[\"class=\",{\"1\":{\"108\":7}}],[\"classpath\",{\"1\":{\"71\":2,\"75\":2,\"83\":4,\"108\":1,\"131\":2}}],[\"class<\",{\"1\":{\"64\":1}}],[\"class\",{\"1\":{\"52\":1,\"53\":3,\"61\":3,\"64\":2,\"65\":1,\"73\":1,\"74\":1,\"75\":5,\"77\":1,\"81\":10,\"85\":1,\"90\":2,\"93\":3,\"96\":3,\"99\":3,\"105\":3,\"106\":1,\"113\":3,\"116\":1,\"117\":5,\"118\":1,\"119\":1,\"122\":2,\"123\":1,\"127\":2,\"128\":1,\"129\":1,\"130\":1,\"131\":4,\"132\":2,\"138\":1,\"139\":4,\"141\":6,\"142\":4}}],[\"cluster\",{\"1\":{\"42\":3,\"43\":3,\"44\":1,\"45\":1}}],[\"cloud<\",{\"1\":{\"18\":2,\"29\":1,\"50\":2}}],[\"cloud\",{\"1\":{\"10\":2,\"18\":8,\"29\":1,\"30\":6,\"36\":2,\"43\":2,\"44\":3,\"45\":2,\"50\":2,\"51\":3,\"52\":5,\"54\":3}}],[\"cmd\",{\"1\":{\"25\":2}}],[\"color\",{\"1\":{\"146\":5}}],[\"collectionutils\",{\"1\":{\"125\":1}}],[\"collectors\",{\"1\":{\"117\":1,\"139\":1}}],[\"collect\",{\"1\":{\"117\":1,\"139\":1}}],[\"cors\",{\"1\":{\"155\":1}}],[\"corner\",{\"1\":{\"145\":1}}],[\"core\",{\"1\":{\"108\":6}}],[\"core<\",{\"1\":{\"68\":1}}],[\"code\",{\"1\":{\"90\":2,\"113\":3,\"116\":9,\"118\":5}}],[\"control\",{\"1\":{\"155\":4}}],[\"controlleradvice\",{\"0\":{\"114\":1},\"1\":{\"112\":1,\"114\":1}}],[\"controller\",{\"1\":{\"61\":2,\"77\":2,\"90\":1,\"104\":2,\"113\":2,\"114\":1,\"141\":1}}],[\"contentdisposition\",{\"1\":{\"152\":3}}],[\"content\",{\"0\":{\"153\":1,\"154\":1,\"155\":1},\"1\":{\"152\":2,\"153\":2,\"154\":1,\"155\":4}}],[\"conditionalonmissingbean\",{\"1\":{\"122\":2}}],[\"const\",{\"1\":{\"150\":1,\"152\":5,\"159\":1}}],[\"constraint\",{\"1\":{\"137\":2}}],[\"constraintviolation\",{\"1\":{\"117\":1,\"139\":1}}],[\"constraintviolationexceptionhandler\",{\"1\":{\"117\":1,\"139\":1}}],[\"constraintviolationexception\",{\"1\":{\"117\":2,\"138\":1,\"139\":2}}],[\"consoleappender\",{\"1\":{\"108\":1}}],[\"console\",{\"1\":{\"106\":1,\"108\":2,\"152\":1}}],[\"converters\",{\"1\":{\"81\":2}}],[\"converter\",{\"1\":{\"78\":1}}],[\"conf\",{\"1\":{\"40\":4,\"42\":4,\"43\":2}}],[\"configure\",{\"1\":{\"81\":1}}],[\"configurehandlerexceptionresolvers\",{\"1\":{\"78\":1}}],[\"configuremessageconverters\",{\"1\":{\"78\":1}}],[\"configureviewresolvers\",{\"1\":{\"78\":1}}],[\"configuredefaultservlethanding\",{\"1\":{\"78\":1}}],[\"configureasyncsupport\",{\"1\":{\"78\":1}}],[\"configurecontentnegotiation\",{\"1\":{\"78\":1}}],[\"configurepathmatch\",{\"1\":{\"78\":1}}],[\"configuration>\",{\"1\":{\"73\":1,\"108\":1}}],[\"configurationproperties\",{\"0\":{\"73\":1},\"1\":{\"53\":4,\"73\":2,\"75\":1,\"130\":2}}],[\"configuration\",{\"1\":{\"24\":1,\"73\":2,\"81\":1,\"85\":1,\"90\":1,\"93\":1,\"96\":1,\"122\":1,\"130\":1,\"131\":8}}],[\"configs\",{\"1\":{\"54\":1}}],[\"config<\",{\"1\":{\"50\":1}}],[\"config\",{\"1\":{\"10\":1,\"40\":1,\"51\":1,\"52\":3,\"54\":1,\"71\":4,\"108\":1}}],[\"connector\",{\"1\":{\"18\":1,\"21\":1}}],[\"component\",{\"1\":{\"53\":1,\"56\":1,\"73\":1,\"75\":2,\"132\":1}}],[\"compiler\",{\"1\":{\"18\":4,\"19\":4,\"20\":4,\"21\":4,\"22\":4}}],[\"com\",{\"1\":{\"24\":1,\"25\":1,\"52\":1,\"53\":1,\"61\":2,\"93\":1,\"104\":5,\"108\":1,\"122\":3,\"127\":2,\"131\":2,\"132\":1}}],[\"commons\",{\"1\":{\"103\":1}}],[\"common<\",{\"1\":{\"18\":2,\"20\":1,\"22\":1}}],[\"common\",{\"0\":{\"20\":1},\"1\":{\"17\":1,\"20\":1,\"54\":2}}],[\"comment\",{\"1\":{\"14\":10,\"15\":6,\"16\":10,\"127\":3}}],[\"createobjecturl\",{\"1\":{\"152\":2}}],[\"createelement\",{\"1\":{\"150\":1,\"152\":1}}],[\"createtime\",{\"1\":{\"77\":1,\"80\":1}}],[\"createpropertysource\",{\"1\":{\"75\":1}}],[\"created\",{\"1\":{\"69\":1}}],[\"create\",{\"1\":{\"14\":2,\"15\":1,\"16\":2,\"127\":1,\"130\":2}}],[\"cpu\",{\"1\":{\"1\":1}}],[\"更新用户id不能为空\",{\"1\":{\"141\":1,\"142\":1}}],[\"更多的状态码可根据实际业务需求定义\",{\"1\":{\"116\":1}}],[\"更多的服务意味着更多的运维投入\",{\"1\":{\"3\":1}}],[\"更加年轻\",{\"1\":{\"69\":1}}],[\"更轻量级\",{\"1\":{\"68\":1}}],[\"更通用\",{\"1\":{\"6\":1}}],[\"更标准\",{\"1\":{\"6\":1}}],[\"type\",{\"1\":{\"116\":1,\"122\":1,\"131\":1,\"152\":2,\"153\":2,\"155\":1}}],[\"type>\",{\"1\":{\"18\":2}}],[\"t\",{\"1\":{\"106\":1,\"116\":1,\"131\":2}}],[\"then\",{\"1\":{\"152\":1}}],[\"thumb\",{\"1\":{\"145\":1,\"146\":2}}],[\"th\",{\"1\":{\"96\":4}}],[\"th=\",{\"1\":{\"96\":1}}],[\"thymeleaf\",{\"1\":{\"96\":2}}],[\"thymeleaf页面模板引擎等\",{\"1\":{\"58\":1}}],[\"this\",{\"1\":{\"81\":5,\"99\":2,\"116\":2,\"118\":4,\"124\":4,\"125\":9}}],[\"threadlocal<string>\",{\"1\":{\"128\":1}}],[\"threadlocal\",{\"1\":{\"128\":3,\"132\":1}}],[\"thread\",{\"1\":{\"106\":3,\"108\":1}}],[\"three\",{\"1\":{\"69\":1}}],[\"throw\",{\"1\":{\"75\":2,\"118\":1,\"119\":3,\"124\":1,\"125\":2}}],[\"throwable\",{\"1\":{\"75\":1,\"132\":1}}],[\"throws\",{\"1\":{\"75\":2,\"90\":1,\"125\":1,\"131\":1,\"132\":1}}],[\"two\",{\"1\":{\"69\":1}}],[\"to\",{\"1\":{\"131\":1}}],[\"tolist\",{\"1\":{\"117\":1,\"139\":1}}],[\"tokenfilter\",{\"1\":{\"93\":2}}],[\"tokenutil\",{\"1\":{\"90\":1}}],[\"tokenverifyinterceptor\",{\"1\":{\"90\":2}}],[\"token\",{\"0\":{\"90\":1},\"1\":{\"90\":12,\"152\":1}}],[\"tostringserializer\",{\"1\":{\"81\":2}}],[\"toarray\",{\"1\":{\"65\":2}}],[\"tomcat<\",{\"1\":{\"68\":3}}],[\"tomcat\",{\"0\":{\"68\":1},\"1\":{\"57\":1,\"68\":13}}],[\"total\",{\"1\":{\"16\":1}}],[\"template\",{\"1\":{\"131\":1}}],[\"templatecode\",{\"1\":{\"53\":7}}],[\"text\",{\"1\":{\"111\":1}}],[\"text=\",{\"1\":{\"96\":3}}],[\"test<\",{\"1\":{\"22\":1}}],[\"transparent\",{\"1\":{\"146\":2}}],[\"transfer\",{\"1\":{\"6\":1}}],[\"track\",{\"1\":{\"145\":2,\"146\":2}}],[\"trace\",{\"1\":{\"104\":2}}],[\"try\",{\"1\":{\"75\":1,\"132\":1}}],[\"true\",{\"1\":{\"44\":1,\"69\":1,\"89\":1,\"90\":2,\"104\":1,\"108\":1,\"116\":1,\"123\":2,\"131\":2,\"137\":1}}],[\"targetdatasource\",{\"1\":{\"130\":5}}],[\"targetdatasources\",{\"1\":{\"123\":1,\"125\":5,\"128\":1,\"129\":2}}],[\"target\",{\"1\":{\"124\":1,\"132\":1}}],[\"target>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"target>11<\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"tab\",{\"1\":{\"69\":1}}],[\"table\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"127\":1}}],[\"title>\",{\"1\":{\"96\":1,\"159\":1}}],[\"title\",{\"1\":{\"77\":1}}],[\"timestamp\",{\"1\":{\"111\":1}}],[\"timebasedrollingpolicy\",{\"1\":{\"108\":2}}],[\"timezone\",{\"1\":{\"80\":1,\"81\":1}}],[\"time\",{\"1\":{\"14\":1,\"16\":1,\"80\":1,\"81\":9}}],[\"tinyint\",{\"1\":{\"14\":2,\"15\":2,\"16\":2}}],[\"tcp\",{\"1\":{\"6\":1}}],[\"协议适配\",{\"1\":{\"7\":1}}],[\"协议\",{\"1\":{\"6\":2}}],[\"rfc822\",{\"1\":{\"154\":1}}],[\"radius\",{\"1\":{\"146\":4}}],[\"range\",{\"1\":{\"136\":1,\"137\":1}}],[\"random\",{\"1\":{\"70\":10}}],[\"r\",{\"1\":{\"117\":4,\"139\":3}}],[\"r<\",{\"1\":{\"117\":4,\"118\":1,\"139\":3}}],[\"r<>\",{\"1\":{\"116\":1}}],[\"r<t>\",{\"1\":{\"116\":5}}],[\"rolename\",{\"1\":{\"142\":1}}],[\"role\",{\"1\":{\"142\":4}}],[\"rolelist\",{\"1\":{\"142\":6}}],[\"rollingpolicy>\",{\"1\":{\"108\":2}}],[\"rollingfileappender\",{\"1\":{\"108\":2}}],[\"rolling\",{\"1\":{\"108\":4}}],[\"router\",{\"1\":{\"124\":1}}],[\"root>\",{\"1\":{\"108\":2}}],[\"root\",{\"1\":{\"40\":1,\"52\":2,\"85\":2,\"104\":4,\"122\":4,\"127\":4}}],[\"rocketmq\",{\"1\":{\"10\":1}}],[\"runtime\",{\"1\":{\"132\":1}}],[\"runtimeexception\",{\"1\":{\"113\":3,\"118\":1}}],[\"run\",{\"1\":{\"40\":1,\"61\":1,\"107\":1}}],[\"rpc\",{\"1\":{\"6\":4}}],[\"replaceall\",{\"1\":{\"154\":1}}],[\"representational\",{\"1\":{\"6\":1}}],[\"revokeobjecturl\",{\"1\":{\"152\":1}}],[\"regex=\",{\"1\":{\"137\":1}}],[\"registeruser\",{\"1\":{\"99\":1,\"118\":1,\"138\":1}}],[\"registermodule\",{\"1\":{\"81\":1}}],[\"register\",{\"1\":{\"65\":2,\"138\":1}}],[\"registerbeandefinitions\",{\"1\":{\"65\":2}}],[\"registrationbean\",{\"1\":{\"96\":6}}],[\"registration\",{\"1\":{\"93\":12}}],[\"registrar\",{\"1\":{\"65\":2}}],[\"registry\",{\"1\":{\"65\":2,\"85\":2,\"90\":2}}],[\"regionid\",{\"1\":{\"53\":1}}],[\"retentionpolicy\",{\"1\":{\"132\":1}}],[\"retention\",{\"1\":{\"132\":1}}],[\"return\",{\"1\":{\"53\":2,\"61\":1,\"74\":1,\"75\":2,\"77\":1,\"90\":4,\"93\":2,\"96\":2,\"99\":1,\"113\":1,\"116\":4,\"117\":4,\"122\":2,\"124\":1,\"125\":2,\"128\":1,\"129\":1,\"130\":3,\"131\":2,\"132\":1,\"133\":1,\"139\":3,\"141\":2}}],[\"required\",{\"1\":{\"125\":1}}],[\"requestbody\",{\"1\":{\"138\":2,\"141\":2}}],[\"requestinitialized\",{\"1\":{\"96\":1}}],[\"requestresourcehandler\",{\"1\":{\"90\":1}}],[\"request\",{\"1\":{\"90\":2,\"96\":3}}],[\"requestmapping\",{\"1\":{\"77\":1,\"105\":2,\"113\":2,\"138\":1,\"141\":1}}],[\"ref=\",{\"1\":{\"108\":3}}],[\"ref\",{\"1\":{\"108\":3}}],[\"refreshscope\",{\"1\":{\"53\":3}}],[\"removechild\",{\"1\":{\"150\":1,\"152\":1}}],[\"remove\",{\"1\":{\"96\":1,\"128\":1}}],[\"remote\",{\"1\":{\"6\":1}}],[\"resolvespecifieddatasource\",{\"1\":{\"125\":4}}],[\"resolvespecifiedlookupkey\",{\"1\":{\"125\":1}}],[\"resolveddefaultdatasource\",{\"1\":{\"123\":1,\"124\":1,\"125\":1}}],[\"resolveddatasources\",{\"1\":{\"123\":1,\"124\":2,\"125\":2}}],[\"resourcehandlerregistry\",{\"1\":{\"85\":1}}],[\"resource\",{\"1\":{\"75\":5,\"131\":3}}],[\"resources\",{\"1\":{\"69\":1,\"71\":1,\"75\":1,\"83\":2,\"108\":1}}],[\"responsetype\",{\"1\":{\"152\":1}}],[\"responsebody\",{\"1\":{\"141\":1}}],[\"responseenum\",{\"1\":{\"116\":8,\"118\":5,\"119\":4}}],[\"response\",{\"1\":{\"90\":5,\"152\":6,\"153\":1,\"155\":1}}],[\"result\",{\"1\":{\"53\":12,\"90\":8,\"113\":8}}],[\"restcontrolleradvice\",{\"1\":{\"117\":1,\"139\":1}}],[\"restcontroller\",{\"1\":{\"53\":2,\"61\":2,\"74\":1,\"77\":1,\"105\":2,\"138\":1,\"141\":1}}],[\"rest\",{\"1\":{\"6\":1}}],[\"restful接口及基于\",{\"1\":{\"6\":1}}],[\"restful\",{\"1\":{\"2\":1}}],[\"releases\",{\"1\":{\"25\":1}}],[\"receiver\",{\"1\":{\"16\":2}}],[\"redis\",{\"1\":{\"1\":1}}],[\"的连接器\",{\"1\":{\"158\":1}}],[\"的缩写\",{\"1\":{\"158\":1}}],[\"的开关\",{\"1\":{\"155\":1}}],[\"的开发步骤一致\",{\"1\":{\"77\":1}}],[\"的含义是\",{\"1\":{\"155\":1}}],[\"的具体实现\",{\"1\":{\"136\":1}}],[\"的具体配置\",{\"1\":{\"52\":1}}],[\"的事务也是基于\",{\"1\":{\"133\":1}}],[\"的事务是基于数据源的\",{\"1\":{\"133\":1}}],[\"的全局配置文件中\",{\"1\":{\"127\":1}}],[\"的全局配置文件\",{\"1\":{\"122\":1}}],[\"的静态方法\",{\"1\":{\"119\":1}}],[\"的源码\",{\"1\":{\"119\":1}}],[\"的方法上\",{\"1\":{\"113\":1}}],[\"的方式\",{\"1\":{\"78\":1}}],[\"的方式存在\",{\"1\":{\"33\":1}}],[\"的方式来对持久化节点做健康检查\",{\"1\":{\"33\":1}}],[\"的内容是否为text\",{\"1\":{\"111\":1}}],[\"的内核坐标\",{\"1\":{\"68\":1}}],[\"的常用配置文件\",{\"1\":{\"108\":1}}],[\"的文件名作为日志配置\",{\"1\":{\"108\":1}}],[\"的日志\",{\"1\":{\"108\":1}}],[\"的日志级别\",{\"1\":{\"104\":1}}],[\"的名称\",{\"1\":{\"106\":1}}],[\"的监听器\",{\"1\":{\"97\":1}}],[\"的使用\",{\"1\":{\"96\":1}}],[\"的一个注解\",{\"1\":{\"93\":1}}],[\"的执行顺序\",{\"1\":{\"93\":1}}],[\"的执行过程抽取为一个对象\",{\"1\":{\"68\":1}}],[\"的例子\",{\"1\":{\"93\":1}}],[\"的生命周期\",{\"1\":{\"92\":1}}],[\"的有效性以及合法性\",{\"1\":{\"90\":1}}],[\"的如下\",{\"1\":{\"85\":1}}],[\"的项目来说\",{\"1\":{\"84\":1}}],[\"的图片\",{\"1\":{\"83\":1}}],[\"的消息转换器中\",{\"1\":{\"81\":1}}],[\"的转换\",{\"1\":{\"81\":1}}],[\"的默认消息转换器并不能满足实际需求\",{\"1\":{\"81\":1}}],[\"的映射关系\",{\"1\":{\"78\":1}}],[\"的个性化定制\",{\"1\":{\"78\":1}}],[\"的相关依赖\",{\"1\":{\"76\":1}}],[\"的父项目\",{\"1\":{\"67\":1}}],[\"的表\",{\"1\":{\"59\":1}}],[\"的类\",{\"1\":{\"59\":1}}],[\"的核心设计思想是\",{\"1\":{\"59\":1}}],[\"的规范提供了针对\",{\"1\":{\"58\":1}}],[\"的流行\",{\"1\":{\"58\":1}}],[\"的特性\",{\"0\":{\"57\":1}}],[\"的设计目的简单一句话\",{\"1\":{\"56\":1}}],[\"的早期版本专注于\",{\"1\":{\"56\":1}}],[\"的思想进行更轻松的企业应用开发\",{\"1\":{\"56\":1}}],[\"的配置文件中将上面创建的\",{\"1\":{\"81\":1}}],[\"的配置文件名是固定的\",{\"1\":{\"69\":1}}],[\"的配置文件\",{\"1\":{\"54\":1,\"71\":1}}],[\"的配置\",{\"1\":{\"53\":1,\"79\":1,\"131\":1}}],[\"的配置中心\",{\"1\":{\"51\":1}}],[\"的配置中心信息放到\",{\"1\":{\"51\":1}}],[\"的拼接格式变成\",{\"1\":{\"52\":1}}],[\"的值\",{\"1\":{\"52\":1}}],[\"的保护阈值息息相关\",{\"1\":{\"46\":1}}],[\"的权重配置可以在\",{\"1\":{\"44\":1}}],[\"的权重策略\",{\"1\":{\"44\":1}}],[\"的权重选择是关闭的\",{\"1\":{\"44\":1}}],[\"的负载均衡规则\",{\"1\":{\"44\":1}}],[\"的集群部署\",{\"1\":{\"42\":1}}],[\"的数据自动同步\",{\"1\":{\"158\":1}}],[\"的数据库中执行这个文件\",{\"1\":{\"40\":1}}],[\"的数据模型有三个层次结构\",{\"1\":{\"35\":1}}],[\"的最常用的场景就是配置分组\",{\"1\":{\"37\":1}}],[\"的注册配置中将服务注册到此命名空间下\",{\"1\":{\"36\":1}}],[\"的公共命名空间\",{\"1\":{\"35\":1}}],[\"的实例也返回给消费者\",{\"1\":{\"32\":1}}],[\"的服务实例默认都是临时实例\",{\"1\":{\"45\":1}}],[\"的服务领域模型是以服务为维度构建起来的\",{\"1\":{\"31\":1}}],[\"的服务基础设施\",{\"1\":{\"24\":1}}],[\"的前提下\",{\"1\":{\"30\":1}}],[\"的控制台的登陆界面\",{\"1\":{\"25\":1}}],[\"的启动脚本\",{\"1\":{\"25\":1}}],[\"的下载与安装\",{\"0\":{\"25\":1}}],[\"的首字母简称\",{\"1\":{\"24\":1}}],[\"的学习\",{\"1\":{\"11\":1}}],[\"的子项目\",{\"1\":{\"10\":1}}],[\"的\",{\"0\":{\"96\":1,\"97\":1},\"1\":{\"6\":1,\"10\":1,\"25\":1,\"37\":1,\"42\":3,\"44\":2,\"53\":1,\"58\":1,\"66\":2,\"68\":2,\"79\":1,\"96\":2,\"103\":1,\"105\":1,\"133\":2,\"141\":2,\"159\":1}}],[\"的微服务都需要做调整\",{\"1\":{\"3\":1}}],[\"而不是\",{\"1\":{\"153\":1}}],[\"而不是指望完善异常处理来给系统缺陷擦屁股\",{\"1\":{\"110\":1}}],[\"而不需要自己操作\",{\"1\":{\"158\":1}}],[\"而不需要改动任何代码\",{\"1\":{\"103\":1}}],[\"而不需要逐一对单个的服务器进行管理\",{\"1\":{\"48\":1}}],[\"而且代码可读性极差\",{\"1\":{\"135\":1}}],[\"而且后期扩展不易\",{\"1\":{\"103\":1}}],[\"而且发生在拉取\",{\"1\":{\"51\":1}}],[\"而对于修改操作来说是需要携带\",{\"1\":{\"141\":1}}],[\"而对于\",{\"1\":{\"84\":1}}],[\"而自定义扩展配置则需要实现webmvcconfigurer接口\",{\"1\":{\"78\":1}}],[\"而我们自定义的属性是不具备自动提示的功能的\",{\"1\":{\"73\":1}}],[\"而更换默认的\",{\"1\":{\"68\":1}}],[\"而非要求提供不必要的配置\",{\"1\":{\"59\":1}}],[\"而配置中心区别于传统的配置信息分散到系统各个角落的方式\",{\"1\":{\"48\":1}}],[\"而并不是剔除\",{\"1\":{\"45\":1}}],[\"而这些高可用特性大多数都依赖于集群部署模式\",{\"1\":{\"38\":1}}],[\"而在\",{\"1\":{\"78\":1}}],[\"而在生产中\",{\"1\":{\"38\":1}}],[\"而在微服务中\",{\"1\":{\"3\":1}}],[\"而是通过\",{\"1\":{\"158\":1}}],[\"而是通过控制反转\",{\"1\":{\"56\":1}}],[\"而是要反思系统架构设计是否合理\",{\"1\":{\"110\":1}}],[\"而是由\",{\"1\":{\"108\":1}}],[\"而是指微服务的服务名\",{\"1\":{\"31\":1}}],[\"而是对现有的技术进行封装和维护\",{\"1\":{\"10\":1}}],[\"而\",{\"1\":{\"7\":1,\"10\":1,\"67\":1,\"68\":1,\"71\":1,\"83\":1,\"133\":1,\"140\":1,\"155\":1}}],[\"而外部客户端可能需要调用多个服务的接口才能完成一个业务需求\",{\"1\":{\"7\":1}}],[\"而服务实例通过注册中心获取到其中的实例的服务信息\",{\"1\":{\"5\":1}}],[\"其值必须在可接受的范围内\",{\"1\":{\"137\":1}}],[\"其值必须小于等于指定的最大值\",{\"1\":{\"137\":2}}],[\"其值必须大于等于指定的最小值\",{\"1\":{\"137\":2}}],[\"其值介于\",{\"1\":{\"44\":1}}],[\"其源码如下\",{\"1\":{\"124\":1,\"125\":1}}],[\"其内部是通过判断请求头中的\",{\"1\":{\"111\":1}}],[\"其实就是帮我们把\",{\"1\":{\"119\":1}}],[\"其实在\",{\"1\":{\"78\":1}}],[\"其实和\",{\"1\":{\"77\":1}}],[\"其实\",{\"1\":{\"73\":1,\"133\":1}}],[\"其运行也是符合\",{\"1\":{\"68\":1}}],[\"其依赖的坐标\",{\"1\":{\"68\":1}}],[\"其核心在于其\",{\"1\":{\"58\":1}}],[\"其核心是服务的注册与发现\",{\"1\":{\"5\":1}}],[\"其命名规则为\",{\"1\":{\"52\":1}}],[\"其负载均衡规则首先会选择同一个集群下的服务\",{\"1\":{\"44\":1}}],[\"其\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"其中\",{\"1\":{\"46\":1,\"65\":1,\"92\":1,\"104\":1,\"116\":1,\"140\":1,\"153\":1}}],[\"其中的\",{\"1\":{\"39\":1,\"65\":1}}],[\"其中包含了服务注册与发现\",{\"1\":{\"10\":1}}],[\"其中服务实例将自身服务信息注册到注册中心就叫做服务注册\",{\"1\":{\"5\":1}}],[\"49b1f5\",{\"1\":{\"146\":1}}],[\"45\",{\"1\":{\"111\":1}}],[\"404\",{\"1\":{\"111\":2}}],[\"401\",{\"1\":{\"90\":2}}],[\"4743\",{\"1\":{\"45\":1}}],[\"47d7\",{\"1\":{\"36\":1}}],[\"48d1\",{\"1\":{\"36\":1}}],[\"4331959a\",{\"1\":{\"36\":1}}],[\"4\",{\"0\":{\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":2,\"9\":1,\"22\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":2,\"45\":1,\"46\":1,\"53\":1,\"59\":1,\"66\":1,\"68\":1,\"75\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":2,\"98\":2,\"99\":2,\"106\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":2,\"131\":1,\"132\":1,\"133\":1,\"138\":1},\"1\":{\"10\":3,\"12\":1,\"14\":2,\"15\":2,\"16\":2,\"18\":3,\"19\":3,\"20\":3,\"21\":3,\"22\":3,\"25\":1,\"56\":1,\"71\":1}}],[\"对文件名进行编码\",{\"1\":{\"154\":1}}],[\"对接口参数进行校验\",{\"1\":{\"135\":1}}],[\"对象的\",{\"1\":{\"152\":1}}],[\"对象进行校验\",{\"1\":{\"142\":1}}],[\"对象参数的校验\",{\"1\":{\"138\":1}}],[\"对象\",{\"1\":{\"125\":1,\"152\":1}}],[\"对象类型\",{\"1\":{\"69\":1}}],[\"对异常按阶段进行分类\",{\"1\":{\"110\":1}}],[\"对\",{\"1\":{\"83\":1,\"92\":1}}],[\"对返回结果进行处理\",{\"1\":{\"79\":1}}],[\"对应横向滚动条的宽度\",{\"1\":{\"146\":2}}],[\"对应纵向滚动条的宽度\",{\"1\":{\"146\":2}}],[\"对应\",{\"1\":{\"76\":1}}],[\"对应的连接符\",{\"1\":{\"52\":1}}],[\"对应的\",{\"1\":{\"25\":1}}],[\"对系统中的配置文件进行集中统一管理\",{\"1\":{\"48\":1}}],[\"对于需要让客户端访问的响应头不仅需要将其添加到\",{\"1\":{\"155\":1}}],[\"对于后端返回下载地址的静态资源\",{\"1\":{\"152\":1}}],[\"对于单文件下载没有什么问题\",{\"1\":{\"149\":1}}],[\"对于插入操作来说\",{\"1\":{\"141\":1}}],[\"对于使用\",{\"1\":{\"138\":1}}],[\"对于对象类型的参数\",{\"1\":{\"138\":1}}],[\"对于简单类型的参数\",{\"1\":{\"138\":1}}],[\"对于登录接口需要校验用户名和密码是否为空\",{\"1\":{\"135\":1}}],[\"对于其他控制器的异常\",{\"1\":{\"114\":1}}],[\"对于比较负杂的场景\",{\"1\":{\"108\":1}}],[\"对于文件上传功能来说如果将上传的文件放到那些默认的资源目录下\",{\"1\":{\"85\":1}}],[\"对于\",{\"1\":{\"84\":1,\"111\":1}}],[\"对于默认的静态资源目录下的资源\",{\"1\":{\"83\":1}}],[\"对于创建\",{\"1\":{\"60\":1}}],[\"对于永久实例来说\",{\"1\":{\"46\":1}}],[\"对于持久化实例\",{\"1\":{\"45\":1}}],[\"对于一个分布式系统\",{\"1\":{\"3\":1}}],[\"对微服务的定义似乎更具有权威性和指导意义\",{\"1\":{\"2\":1}}],[\"只会输出日志到控制台\",{\"1\":{\"107\":1}}],[\"只会返回健康实例\",{\"1\":{\"46\":1}}],[\"只是语法不同\",{\"1\":{\"69\":1}}],[\"只是用于快速\",{\"1\":{\"56\":1}}],[\"只有一个\",{\"1\":{\"76\":1}}],[\"只有一个保留空间\",{\"1\":{\"36\":1}}],[\"只有\",{\"1\":{\"66\":1}}],[\"只有在偏离这个约定时才需要做相关的配置\",{\"1\":{\"59\":1}}],[\"只返回其中的两个健康实例的话\",{\"1\":{\"46\":1}}],[\"只不过\",{\"1\":{\"33\":1}}],[\"只需要指定\",{\"1\":{\"141\":1}}],[\"只需要配置一个\",{\"1\":{\"107\":1}}],[\"只需要实现\",{\"1\":{\"89\":1,\"92\":1}}],[\"只需要将日志文件放到\",{\"1\":{\"108\":1}}],[\"只需要将\",{\"1\":{\"75\":1}}],[\"只需要将配置文件放到\",{\"1\":{\"71\":1}}],[\"只需要在当前页面导入\",{\"1\":{\"159\":1}}],[\"只需要在配置文件添加几个简单的配置即可\",{\"1\":{\"107\":1}}],[\"只需要在配置类上标注\",{\"1\":{\"75\":1}}],[\"只需要在自定义的\",{\"1\":{\"93\":1}}],[\"只需要在\",{\"1\":{\"68\":1}}],[\"只需要在各个服务的启动类或配置类上加上\",{\"1\":{\"30\":1}}],[\"只需要保证一个应用的正常运行\",{\"1\":{\"3\":1}}],[\"只关注某个特定的功能\",{\"1\":{\"2\":1}}],[\"运行时异常\",{\"1\":{\"113\":1}}],[\"运行和测试\",{\"1\":{\"1\":1}}],[\"运维要求较高\",{\"1\":{\"3\":1}}],[\"至少存在如下挑战\",{\"1\":{\"3\":1}}],[\"但在\",{\"1\":{\"154\":1}}],[\"但在⾼并发\",{\"1\":{\"46\":1}}],[\"但后端若是返回二进制文件流\",{\"1\":{\"152\":1}}],[\"但实际开发中经常使用的\",{\"1\":{\"131\":1}}],[\"但有时也会遇到需要在项目中操作多个数据库的情况\",{\"1\":{\"121\":1}}],[\"但至少包含如下三个属性\",{\"1\":{\"116\":1}}],[\"但从整体上来说\",{\"1\":{\"116\":1}}],[\"但只能处理其所在控制器抛出的异常\",{\"1\":{\"114\":1}}],[\"但我们不能认为完善异常处理机制是系统的核心\",{\"1\":{\"110\":1}}],[\"但我们应该尽可能地做好服务容错\",{\"1\":{\"8\":1}}],[\"但也不意味对这些异常可以不管不顾\",{\"1\":{\"110\":1}}],[\"但不可否认的是很大程度上提升了我们的编码体验\",{\"1\":{\"119\":1}}],[\"但不会影响程序的正常运行\",{\"1\":{\"104\":1}}],[\"但不能用\",{\"1\":{\"69\":1}}],[\"但是新的窗口不会关闭\",{\"1\":{\"151\":1}}],[\"但是如果下载多文件\",{\"1\":{\"149\":1}}],[\"但是不能用在成员属性\",{\"1\":{\"142\":1}}],[\"但是不利于我们去排查或者定位问题\",{\"1\":{\"117\":1}}],[\"但是为了避免用户绕过客户端\",{\"1\":{\"135\":1}}],[\"但是为了区分\",{\"1\":{\"75\":1}}],[\"但是在生产环境通常都需要将日志持久化到文件中\",{\"1\":{\"107\":1}}],[\"但是在实际项目中\",{\"1\":{\"104\":1}}],[\"但是在其实内部引入了\",{\"1\":{\"76\":1}}],[\"但是我们一般不会这样做\",{\"1\":{\"103\":1}}],[\"但是作为微服务这名词的发明人\",{\"1\":{\"2\":1}}],[\"但如果\",{\"1\":{\"71\":1}}],[\"但负载性能远不及\",{\"1\":{\"68\":1}}],[\"但它的配置却是重量级的\",{\"1\":{\"56\":1}}],[\"但本地尚未读取\",{\"1\":{\"51\":1}}],[\"但当触发保护阈值时\",{\"1\":{\"46\":1}}],[\"但这属于局部配置\",{\"1\":{\"80\":1}}],[\"但这样也⽐造成雪崩要好\",{\"1\":{\"46\":1}}],[\"但这个功能并没有达到分解成一个微服务的程度\",{\"1\":{\"3\":1}}],[\"但默认情况下\",{\"1\":{\"44\":1}}],[\"但经过实际测试不加\",{\"1\":{\"30\":1}}],[\"但模块\",{\"1\":{\"27\":1}}],[\"但此时会报错\",{\"1\":{\"25\":1}}],[\"但微服务并非是完美的\",{\"1\":{\"3\":1}}],[\"相关示例如下\",{\"1\":{\"141\":1}}],[\"相对于\",{\"1\":{\"69\":1}}],[\"相对单体应用架构来说\",{\"1\":{\"3\":1}}],[\"相当于随机\",{\"1\":{\"44\":1}}],[\"相当于每一次的修改都是牵一发而动全身的操作\",{\"1\":{\"1\":1}}],[\"相应的集群\",{\"1\":{\"43\":2}}],[\"349\",{\"1\":{\"136\":1}}],[\"303\",{\"1\":{\"136\":1}}],[\"30\",{\"1\":{\"69\":1}}],[\"31\",{\"1\":{\"69\":1}}],[\"3306\",{\"1\":{\"40\":2,\"52\":1,\"122\":2,\"127\":2}}],[\"3<\",{\"1\":{\"18\":2,\"84\":1}}],[\"32px\",{\"1\":{\"146\":2}}],[\"32\",{\"1\":{\"16\":2,\"70\":1}}],[\"3\",{\"0\":{\"3\":1,\"7\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":2,\"22\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"33\":1,\"34\":2,\"35\":1,\"36\":1,\"37\":1,\"41\":1,\"42\":1,\"43\":1,\"52\":1,\"58\":1,\"65\":1,\"67\":1,\"72\":1,\"73\":1,\"74\":1,\"79\":1,\"80\":1,\"81\":1,\"85\":1,\"90\":1,\"94\":1,\"95\":1,\"96\":1,\"105\":1,\"108\":1,\"112\":1,\"113\":1,\"114\":1,\"118\":1,\"123\":1,\"124\":1,\"125\":1,\"129\":1,\"137\":1,\"151\":1,\"155\":1},\"1\":{\"10\":2,\"12\":1,\"16\":1,\"56\":1,\"71\":1,\"84\":2,\"112\":1,\"131\":1,\"136\":1}}],[\"不能为0\",{\"1\":{\"137\":1}}],[\"不能为null\",{\"1\":{\"137\":1}}],[\"不能我这边切换了影响其他线程的执行\",{\"1\":{\"128\":1}}],[\"不能指定日志文件的名字\",{\"1\":{\"107\":1}}],[\"不要忘了将自定义异常加入全局异常处理器中\",{\"1\":{\"118\":1}}],[\"不过跟异常处理相关的只有注解\",{\"1\":{\"112\":1}}],[\"不记录\",{\"1\":{\"108\":2}}],[\"不匹配时的操作\",{\"1\":{\"108\":2}}],[\"不让你打开控制台看⽇志\",{\"1\":{\"101\":1}}],[\"不存在就可构造\",{\"1\":{\"96\":1}}],[\"不存在\",{\"1\":{\"90\":1,\"105\":1}}],[\"不仅十分繁琐\",{\"1\":{\"135\":1}}],[\"不仅实现了\",{\"1\":{\"97\":1}}],[\"不仅仅加载\",{\"1\":{\"71\":1}}],[\"不仅会注册\",{\"1\":{\"43\":1}}],[\"不需要加\",{\"1\":{\"53\":1}}],[\"不会考虑机器性能问题\",{\"1\":{\"44\":1}}],[\"不属于生产可用的数据库\",{\"1\":{\"40\":1}}],[\"不特殊设置的情况下\",{\"1\":{\"36\":1}}],[\"不同服务的配置是通过\",{\"1\":{\"52\":1}}],[\"不同机器之间存在性能差异\",{\"1\":{\"44\":1}}],[\"不同频率和不同负载的服务\",{\"1\":{\"37\":1}}],[\"不同分组间的微服务是相互隔离的\",{\"1\":{\"35\":1}}],[\"不同的架构师\",{\"1\":{\"116\":1}}],[\"不同的命名空间逻辑上是隔离的\",{\"1\":{\"36\":1}}],[\"不同的服务一般会有不同的网络地址\",{\"1\":{\"7\":1}}],[\"不同的微服务可以使用不同的语言和数据存储技术\",{\"1\":{\"2\":1}}],[\"不再主动剔除服务实例\",{\"1\":{\"32\":1}}],[\"不再由实例自身直接调用\",{\"1\":{\"27\":1}}],[\"不被下游请求拖垮\",{\"1\":{\"8\":1}}],[\"不被上游请求压垮\",{\"1\":{\"8\":1}}],[\"不被外界环境影响\",{\"1\":{\"8\":1}}],[\"不易拓展\",{\"1\":{\"1\":1}}],[\"例如多个部门独立管理的系统\",{\"1\":{\"121\":1}}],[\"例如实现\",{\"1\":{\"92\":1}}],[\"例如在模型中存在一个名为\",{\"1\":{\"59\":1}}],[\"例如这里将\",{\"1\":{\"36\":1}}],[\"例如\",{\"1\":{\"25\":1,\"54\":1,\"81\":1,\"83\":1,\"84\":2,\"92\":1,\"118\":1,\"135\":1}}],[\"例如微服务范式\",{\"1\":{\"24\":1}}],[\"例如通过\",{\"1\":{\"2\":1}}],[\"例如使用\",{\"1\":{\"1\":1}}],[\"attachment\",{\"1\":{\"153\":3}}],[\"axios\",{\"1\":{\"152\":2}}],[\"abstractdatasource\",{\"1\":{\"123\":1}}],[\"abstract\",{\"1\":{\"123\":1}}],[\"abstractroutingdatasource\",{\"0\":{\"123\":1},\"1\":{\"123\":2,\"124\":1,\"125\":1,\"129\":1,\"131\":1}}],[\"allargsconstructor\",{\"1\":{\"116\":1,\"141\":1,\"142\":2}}],[\"aliases\",{\"1\":{\"131\":1}}],[\"alismsproperties\",{\"1\":{\"53\":7}}],[\"alismscontroller\",{\"1\":{\"53\":1}}],[\"aliyuncs\",{\"1\":{\"53\":1}}],[\"alibaba<\",{\"1\":{\"122\":1}}],[\"alibaba依赖\",{\"1\":{\"18\":1}}],[\"alibaba\",{\"1\":{\"10\":4,\"18\":5,\"24\":1,\"25\":2,\"29\":2,\"44\":1,\"50\":2,\"122\":1}}],[\"auth\",{\"1\":{\"116\":1}}],[\"autoconfiguration\",{\"1\":{\"66\":1}}],[\"autoconfigurationimportselector\",{\"0\":{\"66\":1},\"1\":{\"64\":2,\"66\":2}}],[\"autoconfigurationpackages\",{\"1\":{\"65\":3}}],[\"autoconfigurationpackage\",{\"0\":{\"65\":1},\"1\":{\"64\":2}}],[\"autoconfigure\",{\"1\":{\"61\":1,\"66\":4}}],[\"autowired\",{\"1\":{\"53\":2,\"93\":2,\"99\":1,\"131\":3}}],[\"auto\",{\"1\":{\"14\":1,\"15\":1,\"16\":1,\"127\":1}}],[\"available\",{\"1\":{\"111\":1}}],[\"avatar\",{\"1\":{\"14\":1}}],[\"ascll\",{\"1\":{\"154\":3}}],[\"ascii\",{\"1\":{\"154\":1}}],[\"aspect\",{\"1\":{\"132\":2,\"133\":1}}],[\"aslist\",{\"1\":{\"90\":1}}],[\"assertfalse\",{\"1\":{\"137\":1}}],[\"asserttrue\",{\"1\":{\"137\":1}}],[\"assertnotnull\",{\"1\":{\"119\":2}}],[\"assert\",{\"1\":{\"75\":1,\"119\":5,\"124\":1}}],[\"aftercompletion\",{\"1\":{\"89\":1}}],[\"afterpropertiesset\",{\"0\":{\"125\":1},\"1\":{\"75\":1,\"125\":2,\"129\":1}}],[\"adduser\",{\"1\":{\"141\":1}}],[\"addurlpatterns\",{\"1\":{\"93\":2}}],[\"addpathpatterns\",{\"1\":{\"90\":1}}],[\"addinterceptor\",{\"1\":{\"90\":1}}],[\"addinterceptors\",{\"1\":{\"78\":1,\"90\":1}}],[\"add\",{\"1\":{\"81\":1,\"96\":1,\"141\":1}}],[\"addserializer\",{\"1\":{\"81\":5}}],[\"adddeserializer\",{\"1\":{\"81\":3}}],[\"addargumentresolvers\",{\"1\":{\"78\":1}}],[\"addviewcontrollers\",{\"1\":{\"78\":1}}],[\"addcorsmappings\",{\"1\":{\"78\":1}}],[\"addformatters\",{\"1\":{\"78\":1}}],[\"addreturnvaluehandlers\",{\"1\":{\"78\":1}}],[\"addresourcelocations\",{\"1\":{\"85\":1}}],[\"addresourcehandler\",{\"1\":{\"85\":1}}],[\"addresourcehandlers\",{\"1\":{\"78\":1,\"85\":2}}],[\"address\",{\"1\":{\"69\":1}}],[\"addr\",{\"1\":{\"30\":5,\"36\":3,\"43\":3,\"44\":3,\"45\":3,\"51\":5,\"52\":5,\"54\":5}}],[\"age\",{\"1\":{\"69\":1}}],[\"annotations\",{\"1\":{\"68\":1}}],[\"annotationmetadata\",{\"1\":{\"65\":1}}],[\"annotation\",{\"1\":{\"61\":2,\"132\":2}}],[\"and\",{\"1\":{\"24\":1,\"125\":1}}],[\"aop\",{\"1\":{\"56\":1,\"133\":2}}],[\"access\",{\"1\":{\"155\":3}}],[\"accessors\",{\"1\":{\"116\":1}}],[\"accesskeysecret\",{\"1\":{\"53\":7}}],[\"accesskey\",{\"1\":{\"53\":7}}],[\"accept\",{\"1\":{\"111\":1}}],[\"active\",{\"1\":{\"51\":1,\"52\":4,\"54\":1,\"69\":1}}],[\"a\",{\"1\":{\"46\":1,\"150\":5,\"152\":2}}],[\"aibaba\",{\"1\":{\"25\":1}}],[\"around\",{\"1\":{\"132\":1}}],[\"arraylist<>\",{\"1\":{\"96\":1}}],[\"arraylist<onlineuser>\",{\"1\":{\"96\":1}}],[\"arrays\",{\"1\":{\"90\":1}}],[\"args\",{\"1\":{\"61\":2}}],[\"artifactid>\",{\"1\":{\"18\":9,\"19\":2,\"20\":2,\"21\":4,\"22\":7,\"29\":1,\"50\":2,\"61\":2,\"67\":1,\"68\":6,\"73\":3,\"76\":1,\"84\":1,\"122\":1,\"131\":1,\"136\":1}}],[\"architecture\",{\"1\":{\"2\":1}}],[\"app\",{\"1\":{\"159\":4}}],[\"appendchild\",{\"1\":{\"150\":1,\"152\":1}}],[\"appender>\",{\"1\":{\"108\":3}}],[\"applicationlistener<userregisterevent>\",{\"1\":{\"99\":1}}],[\"applicationlistener\",{\"1\":{\"97\":3,\"99\":2}}],[\"applicationevent\",{\"1\":{\"97\":1,\"99\":1}}],[\"applicationeventmulticaster\",{\"1\":{\"97\":1}}],[\"applicationeventpublisher\",{\"1\":{\"97\":1,\"98\":1,\"99\":2}}],[\"application\",{\"1\":{\"30\":5,\"36\":2,\"40\":1,\"42\":1,\"43\":2,\"44\":2,\"45\":2,\"51\":7,\"52\":5,\"54\":3,\"69\":4,\"71\":2,\"73\":1,\"75\":1,\"80\":1,\"90\":2,\"96\":2,\"104\":1,\"108\":2,\"122\":1,\"131\":1}}],[\"apache\",{\"1\":{\"18\":3,\"19\":3,\"20\":3,\"21\":3,\"22\":3,\"68\":2,\"103\":1,\"131\":2}}],[\"api<\",{\"1\":{\"18\":2,\"19\":1,\"22\":1,\"68\":1}}],[\"api\",{\"0\":{\"19\":1},\"1\":{\"2\":2,\"3\":2,\"7\":3,\"17\":1,\"19\":1,\"81\":1,\"103\":1}}],[\"amount\",{\"1\":{\"16\":1}}],[\"资源目录的根目录\",{\"1\":{\"71\":1}}],[\"资源目录下的\",{\"1\":{\"71\":1}}],[\"资源\",{\"1\":{\"2\":1}}],[\"服务消费者从\",{\"1\":{\"46\":1}}],[\"服务分类\",{\"1\":{\"37\":1}}],[\"服务不会跨命名空间请求\",{\"1\":{\"36\":1}}],[\"服务器向浏览器发送文件时\",{\"1\":{\"153\":1}}],[\"服务器管理的所有web资源\",{\"1\":{\"92\":1}}],[\"服务器的例子\",{\"1\":{\"68\":1}}],[\"服务器更换为\",{\"1\":{\"68\":1}}],[\"服务器也很简单\",{\"1\":{\"68\":1}}],[\"服务器上面\",{\"1\":{\"39\":1}}],[\"服务器\",{\"1\":{\"33\":1,\"68\":1}}],[\"服务端的数据校验也是不能忽视的\",{\"1\":{\"135\":1}}],[\"服务端的节点\",{\"1\":{\"33\":1}}],[\"服务端⼝等\",{\"1\":{\"70\":1}}],[\"服务端处理\",{\"1\":{\"1\":1}}],[\"服务阈值是一个\",{\"1\":{\"32\":1}}],[\"服务是\",{\"1\":{\"31\":1}}],[\"服务也能注册到\",{\"1\":{\"30\":1}}],[\"服务就可以注册到\",{\"1\":{\"30\":1}}],[\"服务注册到此命名空间下\",{\"1\":{\"36\":1}}],[\"服务注册的地址\",{\"1\":{\"30\":1}}],[\"服务注册的名称\",{\"1\":{\"30\":1}}],[\"服务注册中心能够感知服务提供者某个实例下线\",{\"1\":{\"27\":1}}],[\"服务注册中心便是为了解决上述问题\",{\"1\":{\"27\":1}}],[\"服务注册中心介绍\",{\"0\":{\"27\":1}}],[\"服务地址\",{\"1\":{\"30\":1}}],[\"服务为例\",{\"1\":{\"30\":1,\"51\":1}}],[\"服务发现的具体信息为\",{\"1\":{\"30\":1}}],[\"服务发现配置\",{\"0\":{\"30\":1}}],[\"服务发现与注册的坐标导入\",{\"1\":{\"29\":1}}],[\"服务提供者启动时\",{\"1\":{\"27\":1}}],[\"服务提供团队可以专注于自己的的业务逻辑处理\",{\"1\":{\"7\":1}}],[\"服务管理的过程大致如下\",{\"1\":{\"27\":1}}],[\"服务通常都是多实例集群部署\",{\"1\":{\"27\":1}}],[\"服务\",{\"0\":{\"32\":1},\"1\":{\"24\":1,\"27\":1,\"42\":1,\"46\":1}}],[\"服务元数据及流量管理\",{\"1\":{\"24\":1}}],[\"服务配置中心介绍\",{\"0\":{\"48\":1}}],[\"服务配置\",{\"1\":{\"24\":1}}],[\"服务模块\",{\"0\":{\"22\":1},\"1\":{\"17\":1}}],[\"服务按照不同的维度进行拆分\",{\"1\":{\"9\":1}}],[\"服务容错的三个核心思想是\",{\"1\":{\"8\":1}}],[\"服务容错\",{\"0\":{\"8\":1}}],[\"服务网关\",{\"0\":{\"7\":1},\"1\":{\"10\":1}}],[\"服务调用者启动时\",{\"1\":{\"27\":1}}],[\"服务调用模块\",{\"0\":{\"19\":1},\"1\":{\"17\":1,\"19\":1}}],[\"服务调用\",{\"0\":{\"6\":1}}],[\"服务治理就是通过注册中心进行服务的自动化管理\",{\"1\":{\"5\":1}}],[\"服务治理\",{\"0\":{\"5\":1}}],[\"服务可用不同的语言开发\",{\"1\":{\"2\":1}}],[\"服务间通信采用轻量级通信机制\",{\"1\":{\"2\":1}}],[\"msg\",{\"1\":{\"106\":3,\"108\":1}}],[\"mvvm\",{\"0\":{\"158\":1},\"1\":{\"158\":5}}],[\"mv\",{\"1\":{\"85\":1}}],[\"mvc的配置接口webmvcconfigurer的实现类中重写addinterceptors\",{\"1\":{\"89\":1}}],[\"mvc\",{\"0\":{\"78\":1},\"1\":{\"76\":1,\"77\":2,\"78\":4,\"81\":4,\"83\":2}}],[\"message=\",{\"1\":{\"137\":1}}],[\"message\",{\"1\":{\"90\":2,\"106\":2,\"111\":2,\"113\":3,\"116\":9,\"117\":3,\"118\":5,\"119\":4,\"137\":1,\"138\":2,\"139\":2,\"141\":2,\"142\":4}}],[\"messageconverter\",{\"1\":{\"81\":3}}],[\"meta\",{\"1\":{\"66\":2,\"83\":1}}],[\"metadata\",{\"1\":{\"65\":3}}],[\"methodsignature\",{\"1\":{\"132\":1}}],[\"methodargumentnotvalidexceptionhandler\",{\"1\":{\"117\":1,\"139\":1}}],[\"methodargumentnotvalidexception\",{\"1\":{\"113\":3,\"117\":2,\"138\":1,\"139\":2}}],[\"method\",{\"1\":{\"106\":1,\"108\":1,\"132\":4,\"152\":1}}],[\"method2\",{\"1\":{\"53\":2}}],[\"method1\",{\"1\":{\"53\":2}}],[\"mm\",{\"1\":{\"80\":6,\"81\":4,\"106\":3,\"108\":3}}],[\"min=\",{\"1\":{\"137\":3}}],[\"min等\",{\"1\":{\"136\":1}}],[\"min\",{\"1\":{\"70\":4,\"137\":1}}],[\"microservice\",{\"1\":{\"2\":1}}],[\"m\",{\"1\":{\"25\":1,\"106\":2}}],[\"modified\",{\"1\":{\"155\":1}}],[\"modules>\",{\"1\":{\"18\":1,\"22\":1}}],[\"module>\",{\"1\":{\"18\":4,\"22\":3}}],[\"modelattribute\",{\"1\":{\"112\":1}}],[\"model<\",{\"1\":{\"18\":2,\"21\":1,\"22\":1}}],[\"modelversion>\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"model\",{\"0\":{\"21\":1},\"1\":{\"17\":1,\"21\":1,\"158\":11}}],[\"mobile\",{\"1\":{\"14\":1}}],[\"map等size\",{\"1\":{\"137\":1}}],[\"map<object\",{\"1\":{\"123\":2,\"129\":1,\"130\":1}}],[\"map<string\",{\"1\":{\"53\":4,\"90\":2,\"113\":2}}],[\"map\",{\"1\":{\"117\":1,\"131\":1,\"139\":1}}],[\"mapper\",{\"1\":{\"104\":1,\"131\":3}}],[\"mappingjackson2httpmessageconverter\",{\"1\":{\"81\":3}}],[\"max=\",{\"1\":{\"137\":3}}],[\"maxhistory>\",{\"1\":{\"108\":2}}],[\"max\",{\"1\":{\"70\":8,\"137\":1}}],[\"main\",{\"1\":{\"61\":1,\"63\":1}}],[\"mall<\",{\"1\":{\"18\":4,\"19\":1,\"20\":1,\"21\":1,\"22\":4}}],[\"mall\",{\"0\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1},\"1\":{\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":5,\"20\":1,\"21\":1,\"22\":1,\"29\":1,\"30\":2,\"36\":2,\"43\":1,\"44\":3,\"45\":1,\"50\":1,\"51\":2,\"52\":5,\"53\":1,\"54\":1}}],[\"maven\",{\"1\":{\"12\":1,\"18\":6,\"19\":6,\"20\":6,\"21\":6,\"22\":6,\"58\":1,\"60\":1,\"61\":1,\"73\":1}}],[\"martin\",{\"1\":{\"2\":1}}],[\"mysql\",{\"1\":{\"13\":1,\"18\":2,\"40\":11,\"52\":2,\"122\":4,\"127\":4}}],[\"mysql8\",{\"1\":{\"12\":1}}],[\"mybatisconfig\",{\"1\":{\"131\":1}}],[\"mybatis\",{\"1\":{\"12\":1,\"18\":2,\"58\":2,\"131\":6,\"132\":1}}],[\"微服务要拉取\",{\"1\":{\"51\":1}}],[\"微服务仅仅是一种架构思想\",{\"1\":{\"10\":1}}],[\"微服务之间通过接口进行通信\",{\"1\":{\"3\":1}}],[\"微服务之间通过一些轻量级的的通信机制进行通信\",{\"1\":{\"2\":1}}],[\"微服务架构下的不同微服务之间可以使用不同的语言和存储技术\",{\"1\":{\"13\":1}}],[\"微服务架构的相关概念\",{\"0\":{\"4\":1}}],[\"微服务架构有着显著的优点\",{\"1\":{\"3\":1}}],[\"微服务架构面临的挑战\",{\"0\":{\"3\":1}}],[\"微服务架构应具备如下特性\",{\"1\":{\"2\":1}}],[\"微服务架构风格是一种将一个单体应用程序开发为一组小型服务的方法\",{\"1\":{\"2\":1}}],[\"微服务架构\",{\"1\":{\"2\":1}}],[\"微服务与springcloud\",{\"0\":{\"0\":1}}],[\"2999\",{\"1\":{\"77\":2}}],[\"29<\",{\"1\":{\"18\":1}}],[\"25\",{\"1\":{\"69\":1}}],[\"24<\",{\"1\":{\"18\":1}}],[\"2<\",{\"1\":{\"18\":1}}],[\"209+0000\",{\"1\":{\"111\":1}}],[\"201\",{\"1\":{\"116\":1}}],[\"2018\",{\"1\":{\"56\":1,\"69\":1}}],[\"2014\",{\"1\":{\"56\":1}}],[\"200\",{\"1\":{\"116\":2}}],[\"2002\",{\"1\":{\"56\":1}}],[\"2001\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1}}],[\"2023\",{\"1\":{\"77\":1,\"111\":1}}],[\"20230717084519181\",{\"1\":{\"110\":1}}],[\"20230715211030742\",{\"1\":{\"103\":1}}],[\"20230715102951627\",{\"1\":{\"98\":1}}],[\"20230715142231163\",{\"1\":{\"73\":1}}],[\"20230712190427623\",{\"1\":{\"79\":1}}],[\"20230712124721077\",{\"1\":{\"61\":1}}],[\"20230707100922402\",{\"1\":{\"44\":1}}],[\"20230707094529973\",{\"1\":{\"43\":1}}],[\"20230609211316753\",{\"1\":{\"36\":1}}],[\"20230609210818177\",{\"1\":{\"35\":1}}],[\"20230609205457741\",{\"1\":{\"31\":1}}],[\"20230609164217967\",{\"1\":{\"25\":1}}],[\"2020\",{\"1\":{\"50\":1}}],[\"2021\",{\"1\":{\"10\":2}}],[\"20\",{\"1\":{\"10\":1,\"14\":1,\"15\":1,\"16\":3,\"108\":1,\"154\":3}}],[\"2\",{\"0\":{\"2\":1,\"6\":1,\"13\":1,\"14\":2,\"15\":3,\"16\":2,\"18\":1,\"19\":2,\"20\":2,\"21\":1,\"22\":1,\"25\":1,\"28\":1,\"29\":1,\"30\":2,\"32\":1,\"33\":2,\"34\":1,\"37\":1,\"40\":1,\"43\":1,\"49\":1,\"50\":1,\"51\":2,\"52\":1,\"53\":1,\"54\":1,\"57\":1,\"62\":1,\"63\":1,\"64\":2,\"65\":1,\"66\":1,\"71\":1,\"74\":1,\"78\":1,\"81\":1,\"84\":1,\"89\":1,\"91\":1,\"93\":1,\"96\":1,\"99\":1,\"102\":1,\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"107\":1,\"111\":1,\"114\":1,\"117\":1,\"122\":1,\"125\":1,\"128\":1,\"136\":1,\"142\":1,\"150\":1,\"153\":1,\"154\":2,\"155\":1},\"1\":{\"10\":4,\"16\":1,\"25\":1,\"56\":3,\"71\":1,\"93\":1,\"112\":1,\"122\":1,\"136\":1,\"146\":1,\"152\":1,\"159\":1}}],[\"可根据实际需求进行拓展\",{\"1\":{\"119\":1}}],[\"可使用其\",{\"1\":{\"73\":1}}],[\"可使用如下配置来开启\",{\"1\":{\"44\":1}}],[\"可以是\",{\"1\":{\"153\":1}}],[\"可以打开一个新窗口\",{\"1\":{\"151\":1}}],[\"可以从文件路径中截取\",{\"1\":{\"150\":1}}],[\"可以直接标注校验注解\",{\"1\":{\"138\":1}}],[\"可以定义一个切换数据源的注解\",{\"1\":{\"132\":1}}],[\"可以作为主数据源\",{\"1\":{\"129\":1}}],[\"可以作为日志输出的占位符\",{\"1\":{\"105\":1}}],[\"可以自定义一个业务异常\",{\"1\":{\"118\":1}}],[\"可以自定义日志输出格式\",{\"1\":{\"106\":1}}],[\"可以把拦截\",{\"1\":{\"117\":1}}],[\"可以把它理解为一组包含了服务描述信息\",{\"1\":{\"34\":1}}],[\"可以与\",{\"1\":{\"112\":1}}],[\"可以向用户发送邮件\",{\"1\":{\"99\":1}}],[\"可以执行一些相应的业务逻辑\",{\"1\":{\"97\":1}}],[\"可以实现如下功能\",{\"1\":{\"88\":1}}],[\"可以实现同一uri指向的资源提供不同的展现形式\",{\"1\":{\"78\":1}}],[\"可以添加自定义序列化器和反序列化器\",{\"1\":{\"81\":1}}],[\"可以设置超时时间和异步任务执行器\",{\"1\":{\"78\":1}}],[\"可以设置它所属的集群\",{\"1\":{\"33\":1}}],[\"可以同时存在这两种格式的配置文件\",{\"1\":{\"71\":1}}],[\"可以这样理解\",{\"1\":{\"68\":1}}],[\"可以看到\",{\"1\":{\"68\":1,\"119\":1}}],[\"可以说已经成为\",{\"1\":{\"56\":1}}],[\"可以通过主从复制的方式实现读写分离\",{\"1\":{\"121\":1}}],[\"可以通过此方法实现一些资源清理\",{\"1\":{\"89\":1}}],[\"可以通过此方法对请求域中的模型和视图做出进一步的修改\",{\"1\":{\"89\":1}}],[\"可以通过\",{\"1\":{\"70\":1}}],[\"可以通过配置项\",{\"1\":{\"52\":1}}],[\"可以通过如下配置将服务注册为持久化实例\",{\"1\":{\"45\":1}}],[\"可以通过如下配置将服务注册到搭建的\",{\"1\":{\"43\":1}}],[\"可以通过如下命令\",{\"1\":{\"25\":1}}],[\"可以使得配置标准化\",{\"1\":{\"48\":1}}],[\"可以使用如下方式获取\",{\"1\":{\"96\":1}}],[\"可以使用\",{\"1\":{\"40\":1,\"154\":1}}],[\"可以用于监听\",{\"1\":{\"95\":1}}],[\"可以用地区命名\",{\"1\":{\"43\":1}}],[\"可以用它来区分开发环境\",{\"1\":{\"35\":1}}],[\"可以将数据分散存储到多个数据库中\",{\"1\":{\"121\":1}}],[\"可以将这些前端资源放到\",{\"1\":{\"84\":1}}],[\"可以将重复的配置抽取出来\",{\"1\":{\"54\":1}}],[\"可以将新版本的服务和旧版本的服务归类到不同的组中\",{\"1\":{\"37\":1}}],[\"可以将自定义的属性加入到元数据并在\",{\"1\":{\"34\":1}}],[\"可以在入参验证时\",{\"1\":{\"141\":1}}],[\"可以在不满足条件时抛出异常\",{\"1\":{\"119\":1}}],[\"可以在项目的\",{\"1\":{\"73\":1}}],[\"可以在其\",{\"1\":{\"51\":1}}],[\"可以在控制台查看命名空间的\",{\"1\":{\"36\":1}}],[\"可以在\",{\"1\":{\"34\":1,\"37\":1,\"104\":1}}],[\"可以采用一种\",{\"1\":{\"33\":1}}],[\"可以采用点对点的\",{\"1\":{\"27\":1}}],[\"可以不配置\",{\"1\":{\"30\":1}}],[\"可以很好的兼容\",{\"1\":{\"10\":1}}],[\"可能包含了不同功能\",{\"1\":{\"37\":1}}],[\"可能使用不同的编程语言来实现\",{\"1\":{\"9\":1}}],[\"可能使用了该\",{\"1\":{\"3\":1}}],[\"可能会出现跨域请求的问题\",{\"1\":{\"7\":1}}],[\"可是做不到\",{\"1\":{\"1\":1}}],[\"可维护性\",{\"1\":{\"1\":1}}],[\"你会发现使用框架提供的默认值会让你的项目开发起来效率更快\",{\"1\":{\"59\":1}}],[\"你很想用\",{\"1\":{\"1\":1}}],[\"你也得把上面整个流程走一遍\",{\"1\":{\"1\":1}}],[\"有多种取值\",{\"1\":{\"153\":1}}],[\"有时也和系统整体的色调不搭配\",{\"1\":{\"143\":1}}],[\"有时候需要自定义一个配置文件\",{\"1\":{\"75\":1}}],[\"有异常就要处理\",{\"1\":{\"139\":1}}],[\"有注解还不行\",{\"1\":{\"132\":1}}],[\"有些业务场景可能需要访问不同的数据源\",{\"1\":{\"121\":1}}],[\"有些参数我们需要希望它不是⼀个固定的值\",{\"1\":{\"70\":1}}],[\"有没有一种方法可以对所有控制器抛出的异常\",{\"1\":{\"114\":1}}],[\"有基于\",{\"1\":{\"99\":1}}],[\"有两种方法\",{\"1\":{\"78\":1}}],[\"有如下特性\",{\"1\":{\"57\":1}}],[\"有的用\",{\"1\":{\"48\":2}}],[\"有的时候\",{\"1\":{\"1\":1,\"71\":1}}],[\"有\",{\"1\":{\"46\":1}}],[\"有可能布在了几千台服务器\",{\"1\":{\"9\":1}}],[\"有可能是由不同的团队开发\",{\"1\":{\"9\":1}}],[\"有了网关之后\",{\"1\":{\"7\":1}}],[\"有一个服务需要处理高并发\",{\"1\":{\"1\":1}}],[\"非常强\",{\"1\":{\"1\":1}}],[\"项目搭建者可能会有所调整\",{\"1\":{\"116\":1}}],[\"项目来说并不存在\",{\"1\":{\"84\":1}}],[\"项目中优雅的实现参数校验\",{\"1\":{\"135\":1}}],[\"项目中的\",{\"1\":{\"83\":1}}],[\"项目中不同模块对计算机的性能要求不一样\",{\"1\":{\"1\":1}}],[\"项目时已经使用了\",{\"1\":{\"76\":1}}],[\"项目根目录\",{\"1\":{\"71\":1}}],[\"项目根目录下的config目录\",{\"1\":{\"71\":1}}],[\"项目在启动时\",{\"1\":{\"71\":1}}],[\"项目后\",{\"1\":{\"69\":1}}],[\"项目启动时会扫描项目中的监听器并加载到广播器中\",{\"1\":{\"97\":1}}],[\"项目启动时还会加载名为\",{\"1\":{\"71\":1}}],[\"项目启动时\",{\"1\":{\"66\":1}}],[\"项目启动后\",{\"1\":{\"61\":1,\"77\":1}}],[\"项目创建一个引导类\",{\"1\":{\"61\":1}}],[\"项目所需的依赖\",{\"1\":{\"60\":1}}],[\"项目下载下来\",{\"1\":{\"60\":1}}],[\"项目\",{\"1\":{\"60\":4,\"61\":1,\"159\":1}}],[\"项目的配置文件中添加如下配置\",{\"1\":{\"106\":1}}],[\"项目的配置存在如下问题\",{\"1\":{\"48\":1}}],[\"项目的引导类上标注另外一个注解\",{\"1\":{\"93\":1}}],[\"项目的所有依赖版本\",{\"1\":{\"67\":1}}],[\"项目的入口\",{\"0\":{\"62\":1}}],[\"项目的默认父坐标和\",{\"1\":{\"61\":1}}],[\"项目的\",{\"1\":{\"58\":1,\"61\":1}}],[\"项目变得异常臃肿且庞大\",{\"1\":{\"1\":1}}],[\"都被当前的app对象管理\",{\"1\":{\"159\":1}}],[\"都可以胜任\",{\"1\":{\"157\":1}}],[\"都有默认实现\",{\"1\":{\"92\":1}}],[\"都是用于校验参数的\",{\"1\":{\"140\":1}}],[\"都是不正常的表现\",{\"1\":{\"110\":1}}],[\"都是采用雪花算法生成\",{\"1\":{\"81\":1}}],[\"都是遵循这一思想实现的\",{\"1\":{\"59\":1}}],[\"都加载到\",{\"1\":{\"65\":1}}],[\"都需要花费大量时间\",{\"1\":{\"1\":1}}],[\"都会带来隐藏的缺陷\",{\"1\":{\"1\":1}}],[\"每次的接口调用都需要调用\",{\"1\":{\"132\":1}}],[\"每次修改代码都心惊胆战\",{\"1\":{\"1\":1}}],[\"每天产生一个日志文件等场景\",{\"1\":{\"108\":1}}],[\"每个数据库下都创建一张\",{\"1\":{\"127\":1}}],[\"每个数据库称为一个数据源\",{\"1\":{\"121\":1}}],[\"每个服务都需要使用\",{\"1\":{\"50\":1}}],[\"每个服务都需要进行单独的身份认证\",{\"1\":{\"7\":1}}],[\"每个服务实例的元数据\",{\"1\":{\"34\":1}}],[\"每个服务作为一个独立的业务进行开发\",{\"1\":{\"2\":1}}],[\"每个服务运行在自己的进程中\",{\"1\":{\"2\":1}}],[\"每个微服务可独立运行在自己的进程里\",{\"1\":{\"2\":1}}],[\"每一次的编译构建\",{\"1\":{\"1\":1}}],[\"甚至添加一个简单的功能\",{\"1\":{\"1\":1}}],[\"这两个注解的结合\",{\"1\":{\"122\":1}}],[\"这两个配置文件的本质是一样的\",{\"1\":{\"69\":1}}],[\"这对后端接口的响应格式便有了一定的要求\",{\"1\":{\"116\":1}}],[\"这意味着我们可以在\",{\"1\":{\"108\":1}}],[\"这会覆盖\",{\"1\":{\"104\":1}}],[\"这也是引导类为何需要与项目最内层包同级的原因\",{\"1\":{\"65\":1}}],[\"这样可以提高数据库的读写性能\",{\"1\":{\"121\":1}}],[\"这样可以更好的维护项目\",{\"1\":{\"71\":1}}],[\"这样的异常\",{\"1\":{\"111\":1}}],[\"这样既能使软件保持简单而又不失灵活性\",{\"1\":{\"59\":1}}],[\"这样只有在该分组的服务才能使用这个配置文件\",{\"1\":{\"37\":1}}],[\"这时需要在应用程序中配置多个数据源\",{\"1\":{\"121\":1}}],[\"这时就可以使用拦截器拦截需要\",{\"1\":{\"90\":1}}],[\"这时我们就可以自定义静态资源的存放位置\",{\"1\":{\"85\":1}}],[\"这时通过传统的静态配置或者重新发布的方式去配置\",{\"1\":{\"48\":1}}],[\"这时候就需要把配置文件放到外边\",{\"1\":{\"71\":1}}],[\"这时候\",{\"1\":{\"32\":1}}],[\"这就是\",{\"1\":{\"46\":1}}],[\"这就是雪崩效应\",{\"1\":{\"8\":1}}],[\"这与\",{\"1\":{\"46\":1}}],[\"这个div中的所有内容\",{\"1\":{\"159\":1}}],[\"这个桥梁来进行联系的\",{\"1\":{\"158\":1}}],[\"这个\",{\"1\":{\"111\":1,\"132\":1}}],[\"这个接口即可\",{\"1\":{\"89\":1}}],[\"这个就是用来加载\",{\"1\":{\"75\":1}}],[\"这个注解使用了\",{\"1\":{\"75\":1}}],[\"这个注解也是一个复合注解\",{\"1\":{\"64\":1}}],[\"这个依赖只是为了我们开发方便\",{\"1\":{\"73\":1}}],[\"这个分组\",{\"1\":{\"35\":1}}],[\"这个服务并不是指集群中的单个服务器\",{\"1\":{\"31\":1}}],[\"这一数据结构\",{\"1\":{\"34\":1}}],[\"这种模式实现了\",{\"1\":{\"158\":1}}],[\"这种方式可以让具体业务在不同的日志实现框架之间自由切换\",{\"1\":{\"103\":1}}],[\"这种节点不会被持久化保存在\",{\"1\":{\"33\":1}}],[\"这种通常称为单体应用\",{\"1\":{\"1\":1}}],[\"这是在\",{\"1\":{\"108\":1}}],[\"这是一个点到点调用的方式\",{\"1\":{\"27\":1}}],[\"这是一种\",{\"1\":{\"6\":1}}],[\"这是因为命名为\",{\"1\":{\"108\":1}}],[\"这是因为\",{\"1\":{\"25\":1,\"45\":1,\"68\":1,\"104\":1}}],[\"这里\",{\"1\":{\"155\":1}}],[\"这里单独封装一个\",{\"1\":{\"128\":1}}],[\"这里仅仅演示与\",{\"1\":{\"122\":1}}],[\"这里仅仅给出了部分的状态码\",{\"1\":{\"116\":1}}],[\"这里定义一个统一返回的实体类\",{\"1\":{\"116\":1}}],[\"这里重点看一下\",{\"1\":{\"64\":1}}],[\"这里就不贴图了\",{\"1\":{\"61\":1}}],[\"这里新建了一个命名空间\",{\"1\":{\"45\":1}}],[\"这里的\",{\"1\":{\"43\":1}}],[\"这里需要保证保证端口不连续\",{\"1\":{\"42\":1}}],[\"这里采用在本地机器上启动三个\",{\"1\":{\"42\":1}}],[\"这里所说的实例就是指服务节点\",{\"1\":{\"34\":1}}],[\"这里以阿里的\",{\"1\":{\"122\":1}}],[\"这里以单点的外部数据库\",{\"1\":{\"40\":1}}],[\"这里以\",{\"1\":{\"30\":1,\"43\":1}}],[\"这里以电商项目的三个核心模块\",{\"1\":{\"11\":1}}],[\"这里将\",{\"1\":{\"29\":1}}],[\"这里使用\",{\"1\":{\"13\":1,\"96\":1}}],[\"这些软件模块\",{\"1\":{\"9\":1}}],[\"这些服务共用一个最小型的集中式的管理\",{\"1\":{\"2\":1}}],[\"这些服务围绕业务能力构建摒弃人可通过全自动部署机制独立部署\",{\"1\":{\"2\":1}}],[\"这些将导致整个项目非常复杂\",{\"1\":{\"1\":1}}],[\"混乱地堆砌在一起\",{\"1\":{\"1\":1}}],[\"代码如下\",{\"1\":{\"36\":1,\"77\":1,\"81\":1,\"96\":1,\"128\":1,\"129\":1,\"130\":1,\"132\":1}}],[\"代码质量参差不齐\",{\"1\":{\"1\":1}}],[\"代码库也在飞速地膨胀\",{\"1\":{\"1\":1}}],[\"复杂性高\",{\"1\":{\"1\":1}}],[\"灵活性逐渐降低\",{\"1\":{\"1\":1}}],[\"慢慢地\",{\"1\":{\"1\":1}}],[\"一下六种简单响应头给外部\",{\"1\":{\"155\":1}}],[\"一部分是可以滑动的部分\",{\"1\":{\"144\":1}}],[\"一\",{\"0\":{\"144\":1,\"148\":1,\"157\":1}}],[\"一定是动态数据源\",{\"1\":{\"131\":1}}],[\"一定需要使用\",{\"1\":{\"38\":1}}],[\"一些异常是无法预知的\",{\"1\":{\"118\":1}}],[\"一些开关参数\",{\"1\":{\"71\":1}}],[\"一切异常对于系统来说\",{\"1\":{\"110\":1}}],[\"一切的配置都是为了取值\",{\"1\":{\"72\":1}}],[\"一般会默认使用浏览器打开\",{\"1\":{\"153\":1}}],[\"一般用在动态文件上\",{\"1\":{\"147\":1}}],[\"一般用在静态文件上\",{\"1\":{\"147\":1}}],[\"一般来说\",{\"1\":{\"144\":1}}],[\"一般都会比较详细的去拦截一些常见的异常\",{\"1\":{\"117\":1}}],[\"一般响应格式通常会包含状态码\",{\"1\":{\"116\":1}}],[\"一般以组件名开头\",{\"1\":{\"58\":1}}],[\"一般也是使用这种方式\",{\"1\":{\"53\":1}}],[\"一般项目都会随着需求而不断的变化以及增加\",{\"1\":{\"1\":1}}],[\"一样\",{\"1\":{\"45\":1,\"96\":1}}],[\"一一对应\",{\"1\":{\"42\":1}}],[\"一次请求往往需要涉及到多个服务\",{\"1\":{\"9\":1}}],[\"一个待验证的\",{\"1\":{\"142\":1}}],[\"一个完善的异常处理机制\",{\"1\":{\"110\":1}}],[\"一个命名空间下的一些服务都用到了一些相同的配置\",{\"1\":{\"37\":1}}],[\"一个服务由很多服务实例组成\",{\"1\":{\"33\":1}}],[\"一个系统通常被拆分为多个模块\",{\"1\":{\"27\":1}}],[\"一个更易于构建云原生应用的动态服务发现\",{\"1\":{\"24\":1}}],[\"一个请求通常会涉及到调用几个服务\",{\"1\":{\"8\":1}}],[\"一个网关的基本功能有\",{\"1\":{\"7\":1}}],[\"一个归档包\",{\"1\":{\"1\":1}}],[\"一种进程间通信方式\",{\"1\":{\"6\":1}}],[\"一系列独立运行的微服务共同构建起整个系统\",{\"1\":{\"2\":1}}],[\"一旦你选定了某一个技术栈来开发项目\",{\"1\":{\"1\":1}}],[\"部署都还比较容易且方便\",{\"1\":{\"1\":1}}],[\"测试一下吧\",{\"1\":{\"61\":1}}],[\"测试环境\",{\"1\":{\"38\":1}}],[\"测试\",{\"1\":{\"1\":2,\"36\":1}}],[\"在转码时会将空格替换成\",{\"1\":{\"154\":1}}],[\"在下面的\",{\"1\":{\"142\":1}}],[\"在校验失败时抛出的异常也不同\",{\"1\":{\"138\":1}}],[\"在日常的\",{\"1\":{\"135\":1}}],[\"在日常开发中\",{\"1\":{\"110\":1}}],[\"在前后端分离的项目中通常会使用\",{\"1\":{\"155\":1}}],[\"在前后端分离的项目中大部分的接口基本都是返回\",{\"1\":{\"79\":1}}],[\"在前面配置切换数据源切面的时候就已经通过\",{\"1\":{\"133\":1}}],[\"在目标方法执行后\",{\"1\":{\"132\":1}}],[\"在执行目标方法之前\",{\"1\":{\"132\":1}}],[\"在多线程的情况下如何保证线程隔离呢\",{\"1\":{\"128\":1}}],[\"在多实例集群部署服务时\",{\"1\":{\"27\":1}}],[\"在本地创建两个数据库\",{\"1\":{\"127\":1}}],[\"在用户注册时\",{\"1\":{\"118\":1}}],[\"在此基础上\",{\"1\":{\"116\":1}}],[\"在提升系统稳定性和用户体验等方面是至关重要的\",{\"1\":{\"110\":1}}],[\"在线用户\",{\"1\":{\"96\":1}}],[\"在线用户人数\",{\"1\":{\"96\":1}}],[\"在线人数\",{\"1\":{\"96\":1}}],[\"在页面中获取在线用户信息\",{\"1\":{\"96\":1}}],[\"在页面获取\",{\"1\":{\"96\":1}}],[\"在浏览器发来请求的时候\",{\"1\":{\"96\":1}}],[\"在浏览器中输入\",{\"1\":{\"84\":1}}],[\"在浏览器访问\",{\"1\":{\"25\":1,\"85\":1}}],[\"在分布式场景下\",{\"1\":{\"81\":1}}],[\"在某些场景下\",{\"1\":{\"81\":1}}],[\"在某些特殊场景下需要对返回的\",{\"1\":{\"79\":1}}],[\"在引入\",{\"1\":{\"79\":1}}],[\"在引入其他服务器的\",{\"1\":{\"68\":1}}],[\"在一些高并发的场景下\",{\"1\":{\"121\":1}}],[\"在一个单体应用中\",{\"1\":{\"121\":1}}],[\"在一个\",{\"1\":{\"75\":1}}],[\"在一定的场景下\",{\"1\":{\"7\":1}}],[\"在启动的时候会自动加载\",{\"1\":{\"75\":1}}],[\"在添加或修改\",{\"1\":{\"73\":1}}],[\"在实际开发中\",{\"1\":{\"117\":1,\"118\":1}}],[\"在实际开发过程中\",{\"1\":{\"54\":1}}],[\"在实际业务中\",{\"1\":{\"71\":1}}],[\"在⼀些情况下\",{\"1\":{\"70\":1}}],[\"在这个配置文件进行的修改\",{\"1\":{\"69\":1}}],[\"在这三个层级上都有\",{\"1\":{\"34\":1}}],[\"在使用当中\",{\"1\":{\"158\":1}}],[\"在使用时\",{\"1\":{\"131\":1}}],[\"在使用时只需要抛出该异常并传入具体业务对应的构造参数即可\",{\"1\":{\"118\":1}}],[\"在使用\",{\"1\":{\"69\":1,\"77\":1}}],[\"在交由\",{\"1\":{\"68\":1}}],[\"在之前都是服务器启动起来\",{\"1\":{\"68\":1}}],[\"在低版本的\",{\"1\":{\"66\":1}}],[\"在创建\",{\"1\":{\"67\":1}}],[\"在创建的\",{\"1\":{\"61\":1}}],[\"在创建命名空间时\",{\"1\":{\"36\":1}}],[\"在大部分情况下\",{\"1\":{\"59\":1}}],[\"在大型单体应用中一般会包含的模块非常多\",{\"1\":{\"1\":1}}],[\"在设计时遵从约定优先配置的思想来摆脱\",{\"1\":{\"56\":1}}],[\"在学习时也是推荐优化后的\",{\"1\":{\"56\":1}}],[\"在介绍\",{\"1\":{\"56\":1}}],[\"在什么时间\",{\"1\":{\"48\":1}}],[\"在没有配置中心之前\",{\"1\":{\"48\":1}}],[\"在返回实例时\",{\"1\":{\"46\":1}}],[\"在做好\",{\"1\":{\"42\":1}}],[\"在虚拟机上安装\",{\"1\":{\"40\":1}}],[\"在开发中\",{\"1\":{\"38\":1}}],[\"在灰度发布中\",{\"1\":{\"37\":1}}],[\"在企业级应用系统中\",{\"1\":{\"37\":1}}],[\"在不满足条件时抛出异常illegalargumentexception\",{\"1\":{\"119\":1}}],[\"在不设置的情况下\",{\"1\":{\"36\":1}}],[\"在不同的系统下执行相应的启动脚本即可启动\",{\"1\":{\"25\":1}}],[\"在命名空间之下有一个分组结构\",{\"1\":{\"35\":1}}],[\"在集群这个层级上\",{\"1\":{\"33\":1}}],[\"在每个服务实例启动的时候\",{\"1\":{\"33\":1}}],[\"在服务这个层级上可以配置元数据和服务保护阈值等信息\",{\"1\":{\"32\":1}}],[\"在服务之下\",{\"1\":{\"31\":1}}],[\"在服务是单实例情况下\",{\"1\":{\"27\":1}}],[\"在配置文件中进行配置数据源比较简单\",{\"1\":{\"122\":1}}],[\"在配置上相比\",{\"1\":{\"58\":1}}],[\"在配置\",{\"1\":{\"30\":1}}],[\"在\",{\"0\":{\"52\":1},\"1\":{\"25\":1,\"30\":1,\"35\":1,\"37\":1,\"40\":2,\"53\":2,\"56\":1,\"78\":2,\"84\":1,\"93\":1,\"96\":1,\"106\":1,\"108\":1,\"112\":1,\"122\":1,\"123\":1,\"127\":1,\"131\":3,\"136\":1,\"141\":1,\"142\":1,\"150\":1}}],[\"在微服务架构中\",{\"1\":{\"6\":1,\"8\":1,\"27\":1}}],[\"在单体架构中\",{\"1\":{\"3\":1}}],[\"在项目的实际部署过程中\",{\"1\":{\"44\":1}}],[\"在项目初期\",{\"1\":{\"1\":1}}],[\"在项目中我们通常将需求分为三个主要部分\",{\"1\":{\"1\":1}}],[\"在业务发展初期\",{\"1\":{\"1\":1}}],[\"19\",{\"1\":{\"77\":1}}],[\"192\",{\"1\":{\"42\":3,\"43\":6,\"44\":1,\"45\":1,\"51\":1,\"52\":1,\"54\":1}}],[\"12t06\",{\"1\":{\"111\":1}}],[\"12t10\",{\"1\":{\"77\":1}}],[\"127\",{\"1\":{\"30\":1,\"36\":1,\"43\":2}}],[\"16<\",{\"1\":{\"122\":1}}],[\"16\",{\"1\":{\"69\":1}}],[\"168\",{\"1\":{\"42\":3,\"43\":6,\"44\":1,\"45\":1,\"51\":1,\"52\":1,\"54\":1}}],[\"13<\",{\"1\":{\"61\":1,\"67\":1,\"68\":1}}],[\"10px\",{\"1\":{\"146\":6}}],[\"10mb\",{\"1\":{\"107\":1}}],[\"107\",{\"1\":{\"42\":3,\"43\":6,\"44\":1,\"45\":1,\"51\":1,\"52\":1}}],[\"100\",{\"1\":{\"15\":1,\"16\":1,\"46\":1,\"127\":1}}],[\"17\",{\"1\":{\"40\":1}}],[\"1e606968dfe1\",{\"1\":{\"36\":1}}],[\"183195440\",{\"1\":{\"53\":1}}],[\"18\",{\"1\":{\"18\":1}}],[\"1<\",{\"1\":{\"18\":1,\"131\":1}}],[\"110\",{\"1\":{\"54\":1}}],[\"11\",{\"1\":{\"12\":1,\"111\":1}}],[\"1\",{\"0\":{\"1\":1,\"5\":1,\"12\":1,\"14\":1,\"18\":1,\"24\":1,\"27\":1,\"29\":1,\"32\":1,\"36\":1,\"39\":1,\"42\":1,\"48\":1,\"50\":1,\"56\":1,\"61\":1,\"63\":1,\"70\":1,\"73\":1,\"77\":1,\"80\":1,\"83\":1,\"87\":1,\"88\":2,\"89\":1,\"90\":1,\"92\":2,\"93\":1,\"95\":1,\"98\":1,\"101\":1,\"103\":1,\"110\":1,\"113\":1,\"116\":1,\"121\":1,\"124\":1,\"127\":1,\"135\":1,\"141\":1,\"149\":2,\"150\":1,\"151\":1,\"153\":1},\"1\":{\"10\":5,\"14\":4,\"15\":4,\"16\":3,\"18\":2,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"25\":1,\"30\":1,\"36\":1,\"43\":2,\"56\":2,\"71\":1,\"77\":2,\"93\":1,\"108\":1,\"146\":1,\"150\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
