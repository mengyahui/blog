const e=JSON.parse('{"key":"v-fedd21d8","path":"/back/springboot/007-SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html","title":"007-SpringBoot多数据源配置","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1-何时用到多数据源？","slug":"_1-何时用到多数据源","link":"#_1-何时用到多数据源","children":[]},{"level":2,"title":"2-单一数据源的整合","slug":"_2-单一数据源的整合","link":"#_2-单一数据源的整合","children":[]},{"level":2,"title":"3-AbstractRoutingDataSource","slug":"_3-abstractroutingdatasource","link":"#_3-abstractroutingdatasource","children":[{"level":3,"title":"3.1 determineTargetDataSource()","slug":"_3-1-determinetargetdatasource","link":"#_3-1-determinetargetdatasource","children":[]},{"level":3,"title":"3.2 afterPropertiesSet()","slug":"_3-2-afterpropertiesset","link":"#_3-2-afterpropertiesset","children":[]}]},{"level":2,"title":"4-实现动态数据源","slug":"_4-实现动态数据源","link":"#_4-实现动态数据源","children":[{"level":3,"title":"4.1 环境准备","slug":"_4-1-环境准备","link":"#_4-1-环境准备","children":[]},{"level":3,"title":"4.2 数据源切换如何保证线程隔离？","slug":"_4-2-数据源切换如何保证线程隔离","link":"#_4-2-数据源切换如何保证线程隔离","children":[]},{"level":3,"title":"4.3 创建动态数据源","slug":"_4-3-创建动态数据源","link":"#_4-3-创建动态数据源","children":[]},{"level":3,"title":"4.4 初始化动态数据源","slug":"_4-4-初始化动态数据源","link":"#_4-4-初始化动态数据源","children":[]},{"level":3,"title":"4.5 整合Mybatis","slug":"_4-5-整合mybatis","link":"#_4-5-整合mybatis","children":[]},{"level":3,"title":"4.6 自定义注解切换数据源","slug":"_4-6-自定义注解切换数据源","link":"#_4-6-自定义注解切换数据源","children":[]},{"level":3,"title":"4.7 配置事务管理器","slug":"_4-7-配置事务管理器","link":"#_4-7-配置事务管理器","children":[]}]}],"git":{"createdTime":1690091866000,"updatedTime":1690091866000,"contributors":[{"name":"deer","email":"2772540969@qq.com","commits":1}]},"readingTime":{"minutes":8.01,"words":2404},"filePathRelative":"back/springboot/007-SpringBoot多数据源配置.md","localizedDate":"2023年7月23日","excerpt":"<h1> 007-SpringBoot多数据源配置</h1>\\n<h2> 1-何时用到多数据源？</h2>\\n<p>在一个单体应用中，通常只会操作一个数据库，也只会配置一个数据源，但有时也会遇到需要在项目中操作多个数据库的情况，通常的应用场景如下：</p>\\n<ul>\\n<li>分库分表：当数据量增大，单个数据库无法满足需求时，可以将数据分散存储到多个数据库中，每个数据库称为一个数据源。这样可以提高数据库的读写性能。</li>\\n<li>主从复制：在一些高并发的场景下，可以通过主从复制的方式实现读写分离。主数据库负责写操作，从数据库负责读操作。主从数据库可以配置为不同的数据源。</li>\\n<li>跨数据源的业务需求：有些业务场景可能需要访问不同的数据源，例如多个部门独立管理的系统、多个租户独立的SaaS系统等。这时需要在应用程序中配置多个数据源。</li>\\n</ul>"}');export{e as data};
