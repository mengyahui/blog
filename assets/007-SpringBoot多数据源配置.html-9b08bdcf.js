import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,a as l}from"./app-0938ecde.js";const p={},o=l(`<h1 id="_007-springboot多数据源配置" tabindex="-1"><a class="header-anchor" href="#_007-springboot多数据源配置" aria-hidden="true">#</a> 007-SpringBoot多数据源配置</h1><h2 id="_1-何时用到多数据源" tabindex="-1"><a class="header-anchor" href="#_1-何时用到多数据源" aria-hidden="true">#</a> 1-何时用到多数据源？</h2><p>在一个单体应用中，通常只会操作一个数据库，也只会配置一个数据源，但有时也会遇到需要在项目中操作多个数据库的情况，通常的应用场景如下：</p><ul><li>分库分表：当数据量增大，单个数据库无法满足需求时，可以将数据分散存储到多个数据库中，每个数据库称为一个数据源。这样可以提高数据库的读写性能。</li><li>主从复制：在一些高并发的场景下，可以通过主从复制的方式实现读写分离。主数据库负责写操作，从数据库负责读操作。主从数据库可以配置为不同的数据源。</li><li>跨数据源的业务需求：有些业务场景可能需要访问不同的数据源，例如多个部门独立管理的系统、多个租户独立的SaaS系统等。这时需要在应用程序中配置多个数据源。</li></ul><h2 id="_2-单一数据源的整合" tabindex="-1"><a class="header-anchor" href="#_2-单一数据源的整合" aria-hidden="true">#</a> 2-单一数据源的整合</h2><p>这里以阿里的 druid 连接池为例，需要的依赖坐标如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">com.alibaba</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">druid-spring-boot-starter</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">1.2.16</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阿里的 druid 数据库连接池的功能是十分强大的，如：数据监控、数据库加密等功能，这里仅仅演示与 SpringBoot 整合的过程。</p><p>通常情况下，我们会在 SpringBoot 的全局配置文件（application.yml）中使用如下配置来整合单一数据源：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">spring</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">datasource</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">driver-class-name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">url</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">jdbc:mysql://localhost:3306/db</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">username</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">root</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">password</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">root</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置文件中进行配置数据源比较简单。下面介绍配置数据源的另一种方式：</p><p>在 <code>druid-spring-boot-starter</code> 自动配置类中 <code>DruidDataSourceAutoConfigure</code> 中有如下一段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Bean</span><span style="color:#D4D4D4;">(initMethod = </span><span style="color:#CE9178;">&quot;init&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dataSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">LOGGER</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">info</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Init DruidDataSource&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DruidDataSourceWrapper</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@ConditionalOnMissingBean</code> 和 <code>@Bean</code> 这两个注解的结合，意味着我们可以在 Spring 容器中注入一个 DataSource 类型的 Bean 就可以实现数据源的配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSourceConfig</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dataSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">DruidDataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DruidDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setUrl</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;jdbc:mysql://localhost:3306/db&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setUsername</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPassword</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;root&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDriverClassName</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dataSource;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-abstractroutingdatasource" tabindex="-1"><a class="header-anchor" href="#_3-abstractroutingdatasource" aria-hidden="true">#</a> 3-AbstractRoutingDataSource</h2><p><code>AbstractRoutingDataSource</code> 在 <code>org.springframework.jdbc.datasource.lookup</code> 包下，通过这个类可以实现动态数据源切换，下面是该类的部分源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">abstract</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AbstractRoutingDataSource</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AbstractDataSource</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InitializingBean</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 用于存储要动态切换的datasource</span></span>
<span class="line"><span style="color:#D4D4D4;">	@</span><span style="color:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">targetDataSources</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 默认数据源对象</span></span>
<span class="line"><span style="color:#D4D4D4;">	@</span><span style="color:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">defaultTargetDataSource</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 通过JNDI查找数据源，如果数据源不存在是否回滚到默认数据源，默认：true</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">lenientFallback</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 通过JNDI查找多数据源对象默认实现类</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSourceLookup</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSourceLookup</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">JndiDataSourceLookup</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 数据源集合的解析后的key-value对象</span></span>
<span class="line"><span style="color:#D4D4D4;">	@</span><span style="color:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">resolvedDataSources</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 数据源集合的解析后的key-value对象</span></span>
<span class="line"><span style="color:#D4D4D4;">	@</span><span style="color:#4EC9B0;">Nullable</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">resolvedDefaultDataSource</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-determinetargetdatasource" tabindex="-1"><a class="header-anchor" href="#_3-1-determinetargetdatasource" aria-hidden="true">#</a> 3.1 determineTargetDataSource()</h3><p><code>AbstractRoutingDataSource</code> 中的 <code>determineTargetDataSource()</code> 方法用于获取当前线程中对应的数据源，其源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">protected</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">determineTargetDataSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">Assert</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">notNull</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolvedDataSources</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;DataSource router not initialized&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 获取当前线程对应数据源的标识key</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 该方法为抽象方法，需要客户端重写</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">lookupKey</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">determineCurrentLookupKey</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 从数据源集合中获取数据源对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolvedDataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(lookupKey);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 如果lenientFallback回退属性为true</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (dataSource == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> &amp;&amp; (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">lenientFallback</span><span style="color:#D4D4D4;"> || lookupKey == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 如果数据源不存在，则回退到默认数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">        dataSource = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolvedDefaultDataSource</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 如果数据源不存在，则抛出异常</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (dataSource == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IllegalStateException</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Cannot determine target DataSource for lookup key [&quot;</span><span style="color:#D4D4D4;"> + lookupKey + </span><span style="color:#CE9178;">&quot;]&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> dataSource;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-afterpropertiesset" tabindex="-1"><a class="header-anchor" href="#_3-2-afterpropertiesset" aria-hidden="true">#</a> 3.2 afterPropertiesSet()</h3><p><code>AbstractRoutingDataSource</code> 中的 <code>afterPropertiesSet()</code> 方法，会将 targetDataSources、defaultTargetDataSource 两个数据源属性对象解析为 <code>DataSource</code> 对象，其源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">afterPropertiesSet</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetDataSources</span><span style="color:#D4D4D4;"> == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IllegalArgumentException</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Property &#39;targetDataSources&#39; is required&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolvedDataSources</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">CollectionUtils</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">newHashMap</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetDataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">targetDataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((key, value) </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">lookupKey</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveSpecifiedLookupKey</span><span style="color:#D4D4D4;">(key);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveSpecifiedDataSource</span><span style="color:#D4D4D4;">(value);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolvedDataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(lookupKey, dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">    });</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">defaultTargetDataSource</span><span style="color:#D4D4D4;"> != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">resolvedDefaultDataSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveSpecifiedDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">defaultTargetDataSource</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法调用的 <code>resolveSpecifiedDataSource()</code> 方法，来处理具体的解析业务，源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">protected</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">resolveSpecifiedDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> dataSource) throws IllegalArgumentException {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 如果数据源对象是DataSource的实例对象，直接返回</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (dataSource </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> DataSource) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> (DataSource) dataSource;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 如果是字符串对象，则视其为dataSourceName，则调用JndiDataSourceLookup的getDataSource方法</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (dataSource </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> String) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">dataSourceLookup</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDataSource</span><span style="color:#D4D4D4;">((String) dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IllegalArgumentException</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#CE9178;">&quot;Illegal data source value - only [javax.sql.DataSource] and String supported: &quot;</span><span style="color:#D4D4D4;"> + dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-实现动态数据源" tabindex="-1"><a class="header-anchor" href="#_4-实现动态数据源" aria-hidden="true">#</a> 4-实现动态数据源</h2><h3 id="_4-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_4-1-环境准备" aria-hidden="true">#</a> 4.1 环境准备</h3><p>首先，在本地创建两个数据库 db1 和 db2，每个数据库下都创建一张 <code>user</code> 表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">CREATE</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">TABLE</span><span style="color:#D4D4D4;"> \`</span><span style="color:#DCDCAA;">t_user</span><span style="color:#D4D4D4;">\`  (</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`id\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NOT NULL</span><span style="color:#D4D4D4;"> AUTO_INCREMENT COMMENT </span><span style="color:#CE9178;">&#39;用户主键&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`username\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">50</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> COMMENT </span><span style="color:#CE9178;">&#39;用户名&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`password\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> COMMENT </span><span style="color:#CE9178;">&#39;密码&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">PRIMARY KEY</span><span style="color:#D4D4D4;"> (</span><span style="color:#CE9178;">\`id\`</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">USING</span><span style="color:#D4D4D4;"> BTREE</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在 SpringBoot 的全局配置文件中，配置数据源的相关信息：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">spring</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">datasource</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">druid</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">db1</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">driver-class-name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">url</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">jdbc:mysql://localhost:3306/db1?serverTimezone=Asia/Shanghai</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">username</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">root</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">password</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">root</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">db2</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">driver-class-name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">url</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">jdbc:mysql://localhost:3306/db2?serverTimezone=Asia/Shanghai</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">username</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">root</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">password</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">root</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-数据源切换如何保证线程隔离" tabindex="-1"><a class="header-anchor" href="#_4-2-数据源切换如何保证线程隔离" aria-hidden="true">#</a> 4.2 数据源切换如何保证线程隔离？</h3><p>数据源属于一个公共的资源，在多线程的情况下如何保证线程隔离呢？不能我这边切换了影响其他线程的执行。</p><p>说到线程隔离，自然会想到 <code>ThreadLocal</code> 了，将切换数据源的 KEY （用于从 targetDataSources 中取值）存储在 <code>ThreadLocal</code> 中，执行结束之后清除即可。</p><p>这里单独封装一个 <code>DataSourceHolder</code>，内部使用 <code>ThreadLocal</code> 隔离线程，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSourceHolder</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">//线程 本地环境</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ThreadLocal</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">dataSources</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">InheritableThreadLocal</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 设置数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">setDataSources</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">dataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">set</span><span style="color:#D4D4D4;">(dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 获取数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getDataSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">//清除数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">clearDataSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">dataSources</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">remove</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-创建动态数据源" tabindex="-1"><a class="header-anchor" href="#_4-3-创建动态数据源" aria-hidden="true">#</a> 4.3 创建动态数据源</h3><p>要实现数据源的动态切换，那我们就创建一个动态数据源，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DynamicDataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AbstractRoutingDataSource</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">protected</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">determineCurrentLookupKey</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DynamicDataSource</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">defaultTargetDataSource</span><span style="color:#D4D4D4;">, </span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">targetDataSources</span><span style="color:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 默认的数据源，可以作为主数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">super</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDefaultTargetDataSource</span><span style="color:#D4D4D4;">(defaultTargetDataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">//目标数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">super</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setTargetDataSources</span><span style="color:#D4D4D4;">(targetDataSources);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">//执行afterPropertiesSet方法，完成Datasource对象的解析</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">super</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">afterPropertiesSet</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-初始化动态数据源" tabindex="-1"><a class="header-anchor" href="#_4-4-初始化动态数据源" aria-hidden="true">#</a> 4.4 初始化动态数据源</h3><p>创建动态数据源后，需要对数据源进行初始化，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSourceConfig</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span><span style="color:#D4D4D4;">(name = </span><span style="color:#CE9178;">&quot;hisDataSource&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ConfigurationProperties</span><span style="color:#D4D4D4;">(prefix = </span><span style="color:#CE9178;">&quot;spring.datasource.db1&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getHisDataSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">DruidDataSourceBuilder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span><span style="color:#D4D4D4;">(name = </span><span style="color:#CE9178;">&quot;datasource&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ConfigurationProperties</span><span style="color:#D4D4D4;">(prefix = </span><span style="color:#CE9178;">&quot;spring.datasource.db2&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getDateSource</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">DruidDataSourceBuilder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;targetDataSource&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DynamicDataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">dynamicDataSource</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">            @</span><span style="color:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;hisDataSource&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">hisDataSource</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">            @</span><span style="color:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;datasource&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">targetDataSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">targetDataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;hisDataSource&quot;</span><span style="color:#D4D4D4;">,hisDataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">targetDataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;datasource&quot;</span><span style="color:#D4D4D4;">,dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DynamicDataSource</span><span style="color:#D4D4D4;">(hisDataSource,targetDataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-整合mybatis" tabindex="-1"><a class="header-anchor" href="#_4-5-整合mybatis" aria-hidden="true">#</a> 4.5 整合Mybatis</h3><p><code>AbstractRoutingDataSource</code> 是 spring-jdbc 提供的，我们不需要太多的配置，但实际开发中经常使用的 ORM 框架却是 Mybatis，使用起来略微不同。</p><p>先来看看，spring-jdbc 是如何使用动态数据源的。</p><p>首先，在 Spring 容器中注入 JdbcTemplate：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSourceConfig</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    ......</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// JdbcTemplate 使用的 DataSource 一定是动态数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">JdbcTemplate</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">template</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;dynamicDataSource&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">JdbcTemplate</span><span style="color:#D4D4D4;">(dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，在 UserService 中使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Service</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UserService</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Autowired</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">JdbcTemplate</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">jdbcTemplate</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">insertDB1User</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;hisDataSource&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sql</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;insert into t_user(username,password) values(?,?)&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">jdbcTemplate</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(sql,</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getUsername</span><span style="color:#D4D4D4;">(),</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getPassword</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">insertDB2User</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;datasource&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sql</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;insert into t_user(username,password) values(?,?)&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">jdbcTemplate</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">update</span><span style="color:#D4D4D4;">(sql,</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getUsername</span><span style="color:#D4D4D4;">(),</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getPassword</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍如何在 Mybatis 中实现动态数据源的使用。</p><p>在 SpringBoot 整合 Mybatis 需要导入如下依赖坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.mybatis.spring.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">mybatis-spring-boot-starter</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">2.3.1</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用时，通常只需要在 <code>application.yml</code> 配置文件中进行简单配置即可，如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">mybatis</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">type-aliases-package</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">com.boot.domain</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">mapper-locations</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">classpath:/mapper/**/*.xml</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">configuration</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">map-underscore-to-camel-case</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mybatis 是由 <code>SqlSessionFactory</code> 提供 <code>SqlSession</code> 连接的，如果将动态数据源设置到 <code>SqlSessionFactory</code> 中，是不是就可以实现数据源的动态切换呢？答案是可以的。</p><p>下面是 <code>SqlSessionFactory</code> 的配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MybatisConfig</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SqlSessionFactory</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">sqlSessionFactory</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;dynamicDataSource&quot;</span><span style="color:#D4D4D4;">)</span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dataSource</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Exception</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">SqlSessionFactoryBean</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">factoryBean</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">SqlSessionFactoryBean</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">factoryBean</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDataSource</span><span style="color:#D4D4D4;">(dataSource); </span><span style="color:#6A9955;">// 设置动态数据源</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Resource</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">resource</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">PathMatchingResourcePatternResolver</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">getResources</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;classpath:/mapper/**/*.xml&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">factoryBean</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setMapperLocations</span><span style="color:#D4D4D4;">(resource); </span><span style="color:#6A9955;">// 设置mapper文件路径</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">factoryBean</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setTypeAliasesPackage</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;com.boot.domain&quot;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 设置别名包</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">org</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">apache</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">ibatis</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">session</span><span style="color:#D4D4D4;">.</span><span style="color:#4EC9B0;">Configuration</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">configuration</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> org.</span><span style="color:#9CDCFE;">apache</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">ibatis</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">session</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Configuration</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">configuration</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setMapUnderscoreToCamelCase</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 开启下划线转驼峰</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">factoryBean</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setConfiguration</span><span style="color:#D4D4D4;">(configuration);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">factoryBean</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getObject</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，来看看如何使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Service</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UserService</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Autowired</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DB1UserMapper</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">userMapper1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Autowired</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BD2UserMapper</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">userMapper2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">insertDB1UserByMyBatis</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;hisDataSource&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">userMapper1</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insertDB1User</span><span style="color:#D4D4D4;">(user);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">insertDB2UserByMyBatis</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;datasource&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">userMapper2</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">insertDB2User</span><span style="color:#D4D4D4;">(user);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-自定义注解切换数据源" tabindex="-1"><a class="header-anchor" href="#_4-6-自定义注解切换数据源" aria-hidden="true">#</a> 4.6 自定义注解切换数据源</h3><p>无论是 JdbcTemplate 还是 Mybatis，每次的接口调用都需要调用 <code>DataSourceHolder.setDataSources()</code> 来设置数据源，为了方便操作且更低耦合，可以定义一个切换数据源的注解，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Target</span><span style="color:#D4D4D4;">(value = </span><span style="color:#9CDCFE;">ElementType</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">METHOD</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Retention</span><span style="color:#D4D4D4;">(value = </span><span style="color:#9CDCFE;">RetentionPolicy</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">RUNTIME</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Documented</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> @</span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SwitchDataSource</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 默认切换的数据源KEY</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">DEFAULT_NAME</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;hisDataSource&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 需要切换到数据的KEY</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">value</span><span style="color:#D4D4D4;">() </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> DEFAULT_NAME;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解中只有一个 <code>value</code> 属性，指定了需要切换数据源的 KEY 。有注解还不行，当然还要有切面，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Aspect</span></span>
<span class="line"><span style="color:#6A9955;">//优先级设置到最高</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Order</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Ordered</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">HIGHEST_PRECEDENCE</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">DataSourceAspect</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Pointcut</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;@annotation(com.boot.annotation.SwitchDataSource)&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">pointcut</span><span style="color:#D4D4D4;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Around</span><span style="color:#D4D4D4;">(value = </span><span style="color:#CE9178;">&quot;pointcut()&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">beforeOpt</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ProceedingJoinPoint</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">joinPoint</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Throwable</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Method</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">method</span><span style="color:#D4D4D4;"> = ((MethodSignature) </span><span style="color:#9CDCFE;">joinPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getSignature</span><span style="color:#D4D4D4;">()).</span><span style="color:#DCDCAA;">getMethod</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">SwitchDataSource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">switchSource</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">method</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getAnnotation</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">SwitchDataSource</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setDataSource</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">switchSource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">value</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">joinPoint</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">proceed</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">DataSourceHolder</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">clearDataSource</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>Aspect</code> 很容易理解，在执行目标方法之前，取 <code>@SwitchDataSource</code> 注解中 <code>value</code> 属性设置到<code>ThreadLocal</code> 中；在目标方法执行后，清除掉 <code>ThreadLocal</code> 中的 KEY ，保证了如果不切换数据源，则用默认的数据源。</p><h3 id="_4-7-配置事务管理器" tabindex="-1"><a class="header-anchor" href="#_4-7-配置事务管理器" aria-hidden="true">#</a> 4.7 配置事务管理器</h3><p>Spring 的事务是基于数据源的，数据源变了事务管理器自然也要变，我们需要自定义一个事务管理器，使其管理的数据源是动态数据源：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PlatformTransactionManager</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">platformTransactionManager</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Qualifier</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;dynamicDataSource&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">DataSource</span><span style="color:#D4D4D4;"> dataSource) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">DataSourceTransactionManager</span><span style="color:#D4D4D4;">(dataSource);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切换数据源是基于 AOP 的，而 Spring 的事务也是基于 AOP 的，那么如何保证切换数据源在前面执行呢？</p><p>其实，在前面配置切换数据源切面的时候就已经通过 <code>@Order</code> 注解，将切换数据源的 Aspect 优先级调到了最高。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此种情况仅适用于多数据源下的单库事务操作！！！</p></div>`,72),e=[o];function D(c,r){return a(),n("div",null,e)}const y=s(p,[["render",D],["__file","007-SpringBoot多数据源配置.html.vue"]]);export{y as default};
