import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as r,b as n,d as s,e as l,a as o}from"./app-64f4b723.js";const c={},i=n("h1",{id:"_002-helloworld解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_002-helloworld解析","aria-hidden":"true"},"#"),s(" 002-HelloWorld解析")],-1),D={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},d=o(`<p>除了使用 Spring Initializr 来创建 SpringBoot 项目，还可以创建一个 Maven 项目，然后手动导入 SpringBoot 项目所需的依赖。下面就以这种方式创建一个 HelloWorld 项目。</p><h2 id="_1-helloworld-创建" tabindex="-1"><a class="header-anchor" href="#_1-helloworld-创建" aria-hidden="true">#</a> 1-HelloWorld 创建</h2><p>首先，使用 IDEA 创建一个不使用模板的 Maven 项目</p><figure><img src="https://cdn.jsdelivr.net/gh/mengyahui/image-repository@master/springboot/image-20230712124721077.23yyaugy74io.png" alt="image-20230712124721077" tabindex="0" loading="lazy"><figcaption>image-20230712124721077</figcaption></figure><p>然后，在创建的 HelloWorld 项目的 pom 文件中添加 SpringBoot 项目的默认父坐标和 Web 开发所需的 Starter</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">&lt;!--SpringBoot项目父坐标--&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">parent</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-parent</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">2.7.13</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">parent</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#6A9955;">&lt;!--Web 开发 Starter--&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependencies</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-web</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependencies</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，需要为 HelloWorld 项目创建一个引导类，且该<strong>引导类需要和项目的最里层的包同级</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> com.boot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">SpringBootApplication</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HelloWorldApplication</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">SpringApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">HelloWorldApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">,args);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面编写一个 Controller 测试一下吧</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">package</span><span style="color:#D4D4D4;"> com.boot.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;"> org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HelloController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">GetMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/hello&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">hello</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello World&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),y={href:"http://localhost:8080/hello",target:"_blank",rel:"noopener noreferrer"},g=o(`<h2 id="_2-项目的入口-引导类" tabindex="-1"><a class="header-anchor" href="#_2-项目的入口-引导类" aria-hidden="true">#</a> 2-项目的入口：引导类</h2><h3 id="_2-1-springbootapplication" tabindex="-1"><a class="header-anchor" href="#_2-1-springbootapplication" aria-hidden="true">#</a> 2.1 @SpringBootApplication</h3><p>引导类作为 SpringBoot 工程的入口，需要被 <code>@SpringBootApplication</code> 注解标注，执行该注解所标注的类的 main 方法，就可以启动 Spring 容器。该注解是一个组合注解，主要由 <code>@SpringBootConfiguration</code> 和 <code>@EnableAutoConfiguration</code> 注解组成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">......</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">SpringBootConfiguration</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#D4D4D4;">......</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> @</span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SpringBootApplication</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-enableautoconfiguration" tabindex="-1"><a class="header-anchor" href="#_2-2-enableautoconfiguration" aria-hidden="true">#</a> 2.2 @EnableAutoConfiguration</h3><p>这里重点看一下 <code>@EnableAutoConfiguration</code> 注解，该注解表示开启自动配置功能，这个注解也是一个复合注解，主要由<code>@AutoConfigurationPackage</code> 和 <code>@Import({AutoConfigurationImportSelector.class})</code> 注解组成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">......</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">AutoConfigurationPackage</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Import</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">AutoConfigurationImportSelector</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> @</span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">EnableAutoConfiguration</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ENABLED_OVERRIDE_PROPERTY</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;spring.boot.enableautoconfiguration&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Class</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt;[] </span><span style="color:#DCDCAA;">exclude</span><span style="color:#D4D4D4;">() </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#DCDCAA;">excludeName</span><span style="color:#D4D4D4;">() </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> {};</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-autoconfigurationpackage" tabindex="-1"><a class="header-anchor" href="#_2-3-autoconfigurationpackage" aria-hidden="true">#</a> 2.3 @AutoConfigurationPackage</h3><p>该注解的作用就是将启动类及其所在的 package 作为自动配置的 package 进行管理，也就是说当 SpringBoot应用启动时默认会将引导类所在的 package 作为自动配置的 package</p><p>该注解底层使用 <code>@Import({AutoConfigurationPackages.Registrar.class})</code> 注解向 Spring 容器中导入了 <code>Registrar</code> 类，其中的 <code>registerBeanDefinitions()</code> 方法，就是导入组件实例的具体实现，该方法内</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">registerBeanDefinitions</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">AnnotationMetadata</span><span style="color:#D4D4D4;"> metadata, </span><span style="color:#4EC9B0;">BeanDefinitionRegistry</span><span style="color:#D4D4D4;"> registry) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">AutoConfigurationPackages</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#D4D4D4;">(registry, (</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[])(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">PackageImports</span><span style="color:#D4D4D4;">(metadata)).</span><span style="color:#DCDCAA;">getPackageNames</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">toArray</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]));</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>new PackageImports(metadata)).getPackageNames().toArray(new String[0])</code> 返回的就是 引导类所在的包路径，<code>AutoConfigurationPackages.register</code> 方法会将该包下的所有配置信息，都加载到 Spring容器中。这也是引导类为何需要与项目最内层包同级的原因。</p><h3 id="_2-4-autoconfigurationimportselector" tabindex="-1"><a class="header-anchor" href="#_2-4-autoconfigurationimportselector" aria-hidden="true">#</a> 2.4 AutoConfigurationImportSelector</h3><p>自动配置注解 <code>@EnableAutoConfiguration</code> ，除了有指定自动配置 package 外，还应该具有自动配置的功能，SpringBoot 自动配置的奥秘就藏在 <code>AutoConfigurationImportSelector</code> 类中。</p><p>当 SpringBoot 项目启动时，最终会执行 <code>AutoConfigurationImportSelector</code> 中的 <code>selectImports()</code> 方法，该方法的作用有两个：</p><ol><li><p>加载 <code>spring-boot-autoconfigure</code> 下 <code>META-INF/spring.factories</code> 中定义的 SpringBoot 启动所需的必须配置类。</p></li><li><p>加载<code>spring-boot-autoconfigure</code> 下<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 中SpringBoot 为 J2EE 各个场景提供的默认配置类。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在低版本的 SpringBoot 的 spring-boot-autoconfigure 的 META-INF 下，只有 spring.factories 文件，所有的自动配置类都在这个文件中。</p></div><h2 id="_3-版本管理-spring-boot-starter-parent" tabindex="-1"><a class="header-anchor" href="#_3-版本管理-spring-boot-starter-parent" aria-hidden="true">#</a> 3-版本管理：spring-boot-starter-parent</h2><p>在创建 SpringBoot 工程时需要在 pom.xml 中引入SpringBoot 的父项目。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">parent</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-parent</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">2.7.13</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">parent</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 spring-boot-starter-parent 又继承了 spring-boot-dependencies，spring-boot-dependencies 管理着该 SpringBoot 项目的所有依赖版本。也就是说，我们在引入第三方框架坐标时，并不需要指定版本信息，SpringBoot 已经给出了一套最优的组合。</p><h2 id="_4-辅助功能-内嵌-tomcat" tabindex="-1"><a class="header-anchor" href="#_4-辅助功能-内嵌-tomcat" aria-hidden="true">#</a> 4-辅助功能：内嵌 Tomcat</h2><p>前面的 HelloWorld 并没有配置 Tomcat 居然启动了？</p><p>这是因为 SpringBoot 的 Web 依赖 spring-boot-starter-web 已经内置了一个 Tomcat，其依赖的坐标 ，如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-tomcat</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">2.7.13</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">scope</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">compile</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">scope</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击去，可以看到 Tomcat 的内核坐标</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.apache.tomcat.embed</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">tomcat-embed-core</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">9.0.76</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">version</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">scope</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">compile</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">scope</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">exclusions</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">exclusion</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">tomcat-annotations-api</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.apache.tomcat</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">exclusion</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">exclusions</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在之前都是服务器启动起来，将写好的程序扔到服务器里；现在怎么是把服务器扔到程序里？</p><p>可以这样理解：</p><p>Tomcat 是一个 Java 程序，里面包含很多的 jar 包，其运行也是符合 Java 程序运行原理的，而 Java 程序是靠对象运行的，如果将 Tomcat 的执行过程抽取为一个对象，在交由 Spring 容器管理，就可以实现 &quot;将服务器扔到程序里&quot;</p><p>既然 SpringBoot 应用可以内嵌 Tomcat 服务器，那是不是还可以使用其它服务器呢？答案是肯定的。SpringBoot 内置了如下三种服务器：</p><ol><li>tomcat（默认）：应用面广，负载了若干较重的组件。</li><li>jetty：更轻量级，但负载性能远不及 Tomcat。</li><li>undertow：负载性能比 Tomcat 略胜一筹。</li></ol><p>而更换默认的 Tomcat 服务器也很简单，只需要在 spring-boot-starter-web 中排除 Tomcat 的 Starter 坐标，在引入其他服务器的 Starter 坐标即可。</p><p>下面是将 Tomcat 服务器更换为 Jetty 服务器的例子：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependencies</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-web</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">exclusions</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">&lt;!--排除Tomcat Starter--&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">exclusion</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-tomcat</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">exclusion</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">exclusions</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">&lt;!--引入Jetty Starter--&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-jetty</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependencies</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function u(v,m){const a=e("ExternalLinkIcon");return t(),r("div",null,[i,n("p",null,[s("对于创建 SpringBoot 项目，Spring 官方提供了 Spring Initializr，地址为："),n("a",D,[s("https://start.spring.io/"),l(a)]),s(" ，我们可以将从 Spring Initializr 创建的 SpringBoot 项目下载下来，导入到 IDEA 中。此外，IDEA 中也集成了 Spring Initializr，通常创建项目都是使用 IDEA 中的 Spring Initializr。")]),d,n("p",null,[s("项目启动后，浏览器访问 "),n("a",y,[s("http://localhost:8080/hello"),l(a)]),s(" 即可看到效果，这里就不贴图了。")]),g])}const h=p(c,[["render",u],["__file","002-HelloWorld解析.html.vue"]]);export{h as default};
