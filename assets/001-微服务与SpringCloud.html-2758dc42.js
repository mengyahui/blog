import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as n,b as i,d as a,e as d,a as r}from"./app-a6fac0f7.js";const h={},p=r('<h1 id="_001-微服务与springcloud" tabindex="-1"><a class="header-anchor" href="#_001-微服务与springcloud" aria-hidden="true">#</a> 001-微服务与SpringCloud</h1><h2 id="_1-单体应用架构存在的问题" tabindex="-1"><a class="header-anchor" href="#_1-单体应用架构存在的问题" aria-hidden="true">#</a> 1-单体应用架构存在的问题</h2><p>一个归档包（比如war包）包含的所有功能的应用程序。在项目中我们通常将需求分为三个主要部分：数据库、服务端处理、前端展现。在业务发展初期，由于所有的业务逻辑在一个应用中，开发、测试、部署都还比较容易且方便。这种通常称为单体应用。</p><p>单体应用比较容易部署、测试，在项目初期，单体应用可以很好地稳定运行。然而，一般项目都会随着需求而不断的变化以及增加，越来越多的人加入到项目的开发团队，代码库也在飞速地膨胀。慢慢地，单体应用变得越来越臃肿，可维护性、灵活性逐渐降低，维护成本越来越高。</p><p>下面是对单体应用所面临问题的总结：</p><ol><li><strong>复杂性高</strong></li></ol><p>在大型单体应用中一般会包含的模块非常多、模块的边界也非常模糊、依赖关系不清晰、代码质量参差不齐、混乱地堆砌在一起，这些将导致整个项目非常复杂。每次修改代码都心惊胆战，甚至添加一个简单的功能，或者修改一个 Bug 都会带来隐藏的缺陷。</p><ol start="2"><li><strong>开发速度缓慢</strong></li></ol><p>随着单体应用功能的增多，项目变得异常臃肿且庞大，每一次的编译构建、运行和测试，都需要花费大量时间，即使你可能只要修改某一个参数，你也得把上面整个流程走一遍，相当于每一次的修改都是牵一发而动全身的操作。</p><ol start="3"><li><strong>不易拓展</strong></li></ol><p>项目中不同模块对计算机的性能要求不一样，例如使用 Redis 来保存了大量的热点数据，那么我们希望服务器的内存非常大，另外有一个模块涉及到了图片处理，我们又希望服务器的 CPU 非常强，如果是单体应用部署的话，那么这些条件服务器都要满足。</p><ol start="4"><li><strong>技术栈不易扩展</strong></li></ol><p>单体应用还有一个劣势就是技术栈不易扩展，一旦你选定了某一个技术栈来开发项目，以后很难在技术栈上做切换。有的时候，有一个服务需要处理高并发，你很想用 Go 语言来做，可是做不到，没法引入其他语言。</p><h2 id="_2-什么是微服务" tabindex="-1"><a class="header-anchor" href="#_2-什么是微服务" aria-hidden="true">#</a> 2-什么是微服务？</h2><p>微服务架构（Microservice Architecture）是一种架构理念，业界没有严格统一的定义，但是作为<strong>微服务</strong>这名词的发明人，Martin Fowler 对微服务的定义似乎更具有权威性和指导意义：</p><blockquote><p>微服务架构风格是一种将一个单体应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制（通常用 HTTP 资源 API）。这些服务围绕业务能力构建摒弃人可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。</p></blockquote><p>微服务架构应具备如下特性：</p><ol><li>每个微服务可独立运行在自己的进程里；</li><li>一系列独立运行的微服务共同构建起整个系统；</li><li>每个服务作为一个独立的业务进行开发，只关注某个特定的功能；</li><li>微服务之间通过一些轻量级的的通信机制进行通信，例如通过 RESTful API 进行调用；</li><li>不同的微服务可以使用不同的语言和数据存储技术；</li><li>全自动的部署机制。</li></ol><h2 id="_3-微服务架构面临的挑战" tabindex="-1"><a class="header-anchor" href="#_3-微服务架构面临的挑战" aria-hidden="true">#</a> 3-微服务架构面临的挑战</h2><p>相对单体应用架构来说，微服务架构有着显著的优点。但微服务并非是完美的，至少存在如下挑战：</p><ul><li>运维要求较高：更多的服务意味着更多的运维投入。在单体架构中，只需要保证一个应用的正常运行。而在微服务中，需要保证几十甚至几百个服务的正常运行与协作；</li><li>分布式固有的复杂性：使用微服务构建的是分布式系统。对于一个分布式系统，系统容错、网络延迟、分布式事务等都会带来巨大挑战；</li><li>接口调整成本高：微服务之间通过接口进行通信。如果修改某一个微服务的 API，可能使用了该 API 的微服务都需要做调整。</li><li>重复劳动：很多服务可能都会使用到相同的功能，但这个功能并没有达到分解成一个微服务的程度，从而导致代码重复。</li></ul><h2 id="_4-微服务架构的相关概念" tabindex="-1"><a class="header-anchor" href="#_4-微服务架构的相关概念" aria-hidden="true">#</a> 4-微服务架构的相关概念</h2><p>下面是微服务架构针对需要解决的问题提出的一些相关概念。</p><h4 id="_4-1-服务治理" tabindex="-1"><a class="header-anchor" href="#_4-1-服务治理" aria-hidden="true">#</a> 4.1 服务治理</h4><p>服务治理就是通过注册中心进行服务的自动化管理，其核心是服务的注册与发现。其中服务实例将自身服务信息注册到注册中心就叫做服务注册，而服务实例通过注册中心获取到其中的实例的服务信息，并通过这些信息去请求相关服务的过程就是服务发现。此外，注册中心还应该具备剔除出现问题的服务的功能。</p><h4 id="_4-2-服务调用" tabindex="-1"><a class="header-anchor" href="#_4-2-服务调用" aria-hidden="true">#</a> 4.2 服务调用</h4><p>在微服务架构中，通常存在多个服务之间的远程调用需求。目前主流的远程调用技术有基于 HTTP 请求的 RESTFul接口及基于 TCP 的 RPC 协议。</p><ul><li>REST(Representational State Transfer)：这是一种 HTTP 调用的格式，更标准，更通用，无论哪种语言都支持HTTP 协议。</li><li>RPC（Remote Promote Call）：一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC 框架的主要目标就是让远程服务调用更简单、透明。RPC 框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。</li></ul><h4 id="_4-3-服务网关" tabindex="-1"><a class="header-anchor" href="#_4-3-服务网关" aria-hidden="true">#</a> 4.3 服务网关</h4><p>随着服务的不断增多，不同的服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能会出现如下问题：</p><ol><li>客户端再不同的场景下需要调用不同的 URL 地址，为服务的调用增加了难度。</li><li>在一定的场景下，可能会出现跨域请求的问题。</li><li>每个服务都需要进行单独的身份认证。</li></ol><p>为了解决这些问题，API 网关应运而生。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后，各个 API 服务提供团队可以专注于自己的的业务逻辑处理，而 API 网关更专注于安全、流量、路由等问题。</p><h4 id="_4-4-服务容错" tabindex="-1"><a class="header-anchor" href="#_4-4-服务容错" aria-hidden="true">#</a> 4.4 服务容错</h4><p>在微服务架构中，一个请求通常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。</p><p>虽然我们无法预防雪崩效应的发生，但我们应该尽可能地做好服务容错，服务容错的三个核心思想是：</p><ol><li>不被外界环境影响。</li><li>不被上游请求压垮。</li><li>不被下游请求拖垮。</li></ol><h4 id="_4-5-链路追踪" tabindex="-1"><a class="header-anchor" href="#_4-5-链路追踪" aria-hidden="true">#</a> 4.5 链路追踪</h4><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录。</p><p>所谓链路追踪，就是对一次请求涉及的很多个服务链路进行<strong>日志记录</strong>、<strong>性能监控</strong>。</p><h2 id="_5-springcloud" tabindex="-1"><a class="header-anchor" href="#_5-springcloud" aria-hidden="true">#</a> 5-SpringCloud</h2><p>SpringCloud 和微服务有什么关系？</p><p>微服务仅仅是一种架构思想，而 SpringCloud 是微服务架构的一站式解决方案，基于 SpringBoot 风格的封装，屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、容易部署的分布式系统开发工具包。</p><p>SpringCloud 并没有重复造轮子，而是对现有的技术进行封装和维护，包括 spring-cloud-config、spring-cloud-bus 等近 20 个子项目，其中包含了服务注册与发现、配置中心、服务网关、网关路由、负载均衡、断路器、监控跟踪、分布式消息队列等解决方案。</p><p>SpringCloud Alibaba 是阿里研发的一套微服务架构的落地技术方案，可以很好的兼容 SpringCloud，目前已经列入了 SpringCloud 的子项目，使得微服务架构有了更多的选择。</p>',44),s={href:"https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},c=r("<p>下面给出了一组本人常用的版本参考：</p><table><thead><tr><th>SpringBoot</th><th>SpringCloud</th><th>SpringCloud Alibaba</th><th>Sentinel</th><th>Nacos</th><th>RocketMQ</th><th>Seata</th></tr></thead><tbody><tr><td>2.6.3</td><td>2021.0.1</td><td>2021.0.1.0</td><td>1.8.3</td><td>1.4.2</td><td>4.9.2</td><td>1.4.2</td></tr></tbody></table>",2);function u(_,g){const e=l("ExternalLinkIcon");return o(),n("div",null,[p,i("p",null,[a("SpringCloud Alibaba 的 "),i("a",s,[a("Github 地址"),d(e)]),a("已经给出了详细的 SpringBoot、SpringCloud、SpringCloud Alibaba 及其组件版本的参考。")]),c])}const S=t(h,[["render",u],["__file","001-微服务与SpringCloud.html.vue"]]);export{S as default};
