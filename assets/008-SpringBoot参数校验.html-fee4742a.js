import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as l}from"./app-0938ecde.js";const p={},o=l(`<h2 id="_1-为什么要进行参数校验" tabindex="-1"><a class="header-anchor" href="#_1-为什么要进行参数校验" aria-hidden="true">#</a> 1-为什么要进行参数校验？</h2><p>通常来说，前端在发送请求时也会进行参数校验。但是为了避免用户绕过客户端，使用 HTTP 工具直接向后端请求一些违法数据，服务端的数据校验也是不能忽视的。</p><p>在日常的 Java 后端开发过程中，经常需要对接口的参数进行校验。例如，对于登录接口需要校验用户名和密码是否为空，添加用户时需要验证邮箱、手机号格式是否正确，若仅仅使用 <code>if...else</code> 对接口参数进行校验，不仅十分繁琐，而且代码可读性极差。</p><p>下面就来讲讲如何在 SpringBoot 项目中优雅的实现参数校验。</p><h2 id="_2-spring-validation" tabindex="-1"><a class="header-anchor" href="#_2-spring-validation" aria-hidden="true">#</a> 2-Spring Validation</h2><p>说到 <code>Spring Validation</code> 就不得不提 <code>Hibernate Validation</code>，二者均为 <code> Bean Validation</code> 的具体实现。</p><p><code>JSR-303</code> 是 JavaEE 6 中的一项子规范，又称作 <code>Bean Validation</code>，提供了针对 Java Bean 字段的一些校验注解，如 <code>@NotNull</code>，<code>@Min</code>等。<code>JSR-349</code> 是其升级版本，添加了一些新特性。<code>Hibernate Validator</code> 是对这个规范的实现（与 ORM 框架无关），并在它的基础上增加了一些新的校验注解，如 <code>@Email</code>，<code>@Length</code>，<code>@Range</code> 等等。</p><p><code>Spring Validation</code> 又对 <code>Hibernate Validation</code> 进行了二次封装，并添加了自动校验功能，并将校验信息封装进了特定的类中。</p><p>在 SpringBoot 2.3 以前，<code>Spring Validation</code> 是包含在 <code>spring-boot-starter-web</code> 里的。之后，校验包被独立成了一个 <code>Starter</code> 组件，需要引入如下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-starter-validation</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-常用校验注解" tabindex="-1"><a class="header-anchor" href="#_3-常用校验注解" aria-hidden="true">#</a> 3-常用校验注解</h2><p>下面是常用校验注解：</p><ul><li>Bean Validation 中内置的 constraint（约束） <ul><li>@Null 被注释的元素必须为 null</li><li>@NotNull 被注释的元素必须不为 null</li><li>@AssertTrue 被注释的元素必须为 true</li><li>@AssertFalse 被注释的元素必须为 false</li><li>@Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li>@Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li>@DecimalMin(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li><li>@DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li><li>@Size(max=, min=) 被注释的元素的大小必须在指定的范围内</li><li>@Digits (integer, fraction) 被注释的元素必须是一个数字，其值必须在可接受的范围内</li><li>@Past 被注释的元素必须是一个过去的日期</li><li>@Future 被注释的元素必须是一个将来的日期</li><li>@Pattern(regex=,flag=) 被注释的元素必须符合指定的正则表达式</li></ul></li><li>Hibernate Validator 附加的 constraint <ul><li>@NotBlank(message =) 字符串不能为null,字符串trim()后也不能等于“”</li><li>@Email 被注释的元素必须是电子邮箱地址</li><li>@Length(min=,max=) 被注释的字符串的大小必须在指定的范围内</li><li>@NotEmpty 不能为null，集合、数组、map等size()不能为0；字符串trim()后可以等于“”</li><li>@Range(min=,max=,message=) 被注释的元素必须在合适的范围内</li><li>@URL 被注释的元素必须是一个URL</li></ul></li></ul><h2 id="_4-异常说明" tabindex="-1"><a class="header-anchor" href="#_4-异常说明" aria-hidden="true">#</a> 4-异常说明</h2><p>校验注解标注的位置不同，在校验失败时抛出的异常也不同，下面在一个控制器方法中列举出来了校验注解使用的各种情况：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;user&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Validated</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UserController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">GetMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;login&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">login</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">            @</span><span style="color:#4EC9B0;">NotBlank</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;用户名不能为空&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">username</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">            @</span><span style="color:#4EC9B0;">NotBlank</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;密码不能为空&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">password</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">PostMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;register&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">registerUser</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Validated</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">PostMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;update&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">updateUser</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Validated</span><span style="color:#D4D4D4;"> @</span><span style="color:#4EC9B0;">RequestBody</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>对于简单类型的参数，可以直接标注校验注解，并在控制器上标注 <code>@Validated</code> 或 <code>@Valid</code> 注解。校验失败，会抛出 <code>javax.validation.ConstraintViolationException</code> 异常。</p></li><li><p>对于对象类型的参数，直接在对象参数上标注 <code>@Validated</code> 或 <code>@Valid</code> 即可。校验失败，会抛出 <code>org.springframework.validation.BindException</code> 异常。</p></li><li><p>对于使用 <code>@Validated</code> 或 <code>@Valid</code> 注解标注的请求体（使用 <code>@RequestBody</code> 注解标注）对象参数的校验，如果校验失败，则会抛出 <code>org.springframework.web.bind.MethodArgumentNotValidException</code> 异常。</p></li></ol><h2 id="_5-异常处理" tabindex="-1"><a class="header-anchor" href="#_5-异常处理" aria-hidden="true">#</a> 5-异常处理</h2><p><code>Spring Validation</code> 校验失败会抛出异常，有异常就要处理，通常将异常加入全局异常处理器进行处理。</p><p>下面直接贴出全局异常处理类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RestControllerAdvice</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">GlobalExceptionHandler</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">MethodArgumentNotValidException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">methodArgumentNotValidExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">MethodArgumentNotValidException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">ObjectError</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBindingResult</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getAllErrors</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDefaultMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">BindException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">bindException</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">BindException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">ObjectError</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBindingResult</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getAllErrors</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDefaultMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ConstraintViolationException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">constraintViolationExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ConstraintViolationException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getConstraintViolations</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">stream</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(ConstraintViolation</span><span style="color:#C586C0;">::</span><span style="color:#D4D4D4;">getMessage)</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">collect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Collectors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toList</span><span style="color:#D4D4D4;">()).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(message);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-validated-valid" tabindex="-1"><a class="header-anchor" href="#_6-validated-valid" aria-hidden="true">#</a> 6-@Validated&amp;@Valid</h2><p><code>@Valid</code> 与 <code>@Validated</code> 都是用于校验参数的，其中 <code>@Valid</code> 是 <code>Hibernate Validation</code> 提供的，而 <code>@Validated</code> 注解是 <code>Spring Validation</code> 提供的，二者在使用上略有不同。</p><h3 id="_6-1-分组校验" tabindex="-1"><a class="header-anchor" href="#_6-1-分组校验" aria-hidden="true">#</a> 6.1 分组校验</h3><p><code>@Validated</code>提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制。</p><p>对于插入操作来说，通常不需要携带 id，而对于修改操作来说是需要携带 id 的，就可以根据这两种情况进行分组，相关示例如下：</p><p>首先，定义两个分组 Insert 和 Update：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Insert</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Default</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Update</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Default</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是在实体类需要校验的属性上添加分组了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">NotNull</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;更新用户id不能为空&quot;</span><span style="color:#D4D4D4;">,groups = {</span><span style="color:#9CDCFE;">Update</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Null</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;添加用户不携带id&quot;</span><span style="color:#D4D4D4;">,groups = {</span><span style="color:#9CDCFE;">Insert</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Long</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Controller 中，只需要指定 @Validated 的 value 属性为相应的组名即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Slf4j</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RequestMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/user&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Validated</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UserController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">PostMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/add&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ResponseBody</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">addUser</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Validated</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">Insert</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">}) @</span><span style="color:#4EC9B0;">RequestBody</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;user is {}&quot;</span><span style="color:#D4D4D4;">,user);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;user valid success&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">PostMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;update&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">updateUser</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Validated</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">Update</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">}) @</span><span style="color:#4EC9B0;">RequestBody</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;user is {}&quot;</span><span style="color:#D4D4D4;">,user);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;user valid success&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-嵌套校验" tabindex="-1"><a class="header-anchor" href="#_6-2-嵌套校验" aria-hidden="true">#</a> 6.2 嵌套校验</h3><p><code>@Validated</code>可以用在类、方法和方法参数上。但是不能用在成员属性（字段）上</p><p><code>@Valid</code>可以用在方法、构造函数、方法参数和成员属性（字段）上</p><p>两者是否能用于成员属性（字段）上直接影响能否提供嵌套验证的功能。仅仅 <code>@Valid</code> 支持嵌套校验。</p><p>那么什么是嵌套校验呢？</p><p>一个待验证的 POJO 中还包含了其它待验证的对象，最常见的就是各种 List 集合了。</p><p>在下面的 User 类中，仅仅对 roleList 做了非空校验，并没有校验其中的数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">NotNull</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;更新用户id不能为空&quot;</span><span style="color:#D4D4D4;">,groups = {</span><span style="color:#9CDCFE;">Update</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Null</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;添加用户不携带id&quot;</span><span style="color:#D4D4D4;">,groups = {</span><span style="color:#9CDCFE;">Insert</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Long</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">NotEmpty</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;角色不能为空&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Role</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">roleList</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在成员变量 roleList 上加上 <code>@Valid</code> 注解，则也会对 roleList 中的数据 Role 对象进行校验，当然 Role 类的字段上需要有校验注解。</p><p>假如 Role 类如下所示，且在 roleList 上标注了 <code>@Vaild</code> 注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Role</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Long</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">NotNull</span><span style="color:#D4D4D4;">(message = </span><span style="color:#CE9178;">&quot;角色名称不能为空&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">roleName</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，在 roleList 上添加 <code>@Valid</code> 注解即可实现嵌套验证。</p>`,44),e=[o];function D(c,r){return n(),a("div",null,e)}const d=s(p,[["render",D],["__file","008-SpringBoot参数校验.html.vue"]]);export{d as default};
