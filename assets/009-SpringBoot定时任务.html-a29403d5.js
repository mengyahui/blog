import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as e,b as s,d as o,e as D,a as c}from"./app-e75ceed8.js";const r={},t=c(`<h1 id="_009-springboot定时任务" tabindex="-1"><a class="header-anchor" href="#_009-springboot定时任务" aria-hidden="true">#</a> 009-SpringBoot定时任务</h1><p>在项目开发中经常要使用到定时任务，对于一些没有实时性要求且需要周期性执行的任务，都需要使用定时任务解决。</p><p>在调用第三方接口时，通常需要携带第三方平台的凭证，就比如微信小程序，要想调用其 OpenApi 就必须携带 accessToken，而这个 accessToken 只有两个小时的时效，所以使用定时任务定时获取 微信小程序的 accessToken 是非常有必要的。SpringBoot 框架对定时任务也给出了解决方案。</p><h2 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1-基本使用</h2><p>在 SpringBoot 项目中，仅仅通过注解就可以实现定时任务。</p><h3 id="_1-1-第一步" tabindex="-1"><a class="header-anchor" href="#_1-1-第一步" aria-hidden="true">#</a> 1.1 第一步</h3><p>在 SpringBoot 项目的启动类或配置类上添加 <code>@EnableScheduling</code> 注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">EnableScheduling</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskApplication</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">[] </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">SpringApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">TaskApplication</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">,args);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-第二步" tabindex="-1"><a class="header-anchor" href="#_1-2-第二步" aria-hidden="true">#</a> 1.2 第二步</h3><p>在<strong>目标任务的执行方法</strong>上标注添加了<strong>触发定时任务元数据</strong>的 <code>@Scheduled</code> 注解。目标任务的执行方法不能携带任何参数，且返回值类型为 void。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SchedulerTask</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Scheduled</span><span style="color:#D4D4D4;">(fixRate = </span><span style="color:#B5CEA8;">2000</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">updateAccessToken</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 执行代码</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>触发定时任务的元数据有如下几种：</p><ol><li><strong>fixedDelay / fixedDelayString</strong>：表示从上次调用结束到下次调用开始的固定时间。</li><li><strong>fixedRate / fixedRateString</strong>：表示两次调用之间的固定时间，如：<code>@Scheduled(fixedRate=5000)</code> 表示上次开始无论是否结束 5 秒钟之后会再次执行。<strong>initialDelay / initialDelayString</strong>：表示第一次执行任务时延迟的时间。通常和上面两组元数据搭配使用。</li><li><strong>timeUnit</strong>：指定时间的单位，通常搭配上面三组元数据使用。在不指定的情况下时间单位为毫秒。</li><li><strong>cron</strong>：通过 cron 表达式来设置定时任务的执行时间。下面会具体介绍 cron 表达式。</li></ol><h3 id="_1-3-xxx-和-xxxstring-的区别" tabindex="-1"><a class="header-anchor" href="#_1-3-xxx-和-xxxstring-的区别" aria-hidden="true">#</a> 1.3 xxx 和 xxxString 的区别</h3><p>首先 xxx 和 xxxString 的值都是以毫秒为单位的，也可以使用 timeUnit 来指定时间单位，不同的是 xxxString 支持占位符 <code>\${}</code> 从配置文件中读取时间配置。如：<code>@Scheduled(fixedDelayString= &quot;\${task.fixedTime}&quot;)</code>。</p><h2 id="_2-异步任务" tabindex="-1"><a class="header-anchor" href="#_2-异步任务" aria-hidden="true">#</a> 2-异步任务</h2><p>通过 <code>@Scheduled</code> 注解来实现定时任务还是非常方便的，但如果系统中存在多个定时任务时，这些任务会同步执行，即所有的定时任务每次都是在同一个线程上执行。也就是说，前面定时任务的执行可能会影响到后面任务的执行。</p><p>之所以会出现上面的问题，是因为 Java 的方法调用都是同步的。之前都是通过多线程来处理此类问题，但在 Spring 3.x 后，就内置了 <code>@Async</code> 注解来处理此类问题。被 <code>@Async</code> 注解标注的方法，称之为异步方法；这些方法将会在独立的线程中被执行，调用者无需等待它们的完成，再去继续其它操作。</p><p>SpringBoot 将异步任务的执行抽象为 <code>TaskExecutor</code> 接口，其默认实现为：<code>ThreadPoolTaskExecutor</code>。标注了 <code>@Async</code> 注解的定时任务，会被 <code>ThreadPoolTaskExecutor</code> 处理，其默认的核心线程数是 8，这也是 <code>@Async</code> 注解能处理异步任务的核心。</p><p><code>@Async</code> 注解通过配置多个核心线程数来处理异步任务，那定时任务的 <code>@Scheduled</code> 注解可不可以通过调整核心线程数来解决任务同步执行的问题呢？<strong>当然可以！！！</strong></p><p>SpringBoot 将定时任务的执行，抽象为<code>TaskScheduler</code> 接口，其默认实现为：<code>ThreadPoolTaskScheduler</code>，默认为其依赖的底层线程池 <code>ScheduledExecutorService</code> 只分配了一个线程。</p><p>所以，即使不使用 <code>@Async</code> 注解，而仅仅调整 <code>ThreadPoolTaskScheduler</code> 所依赖线程池的核心线程数量，同样可以实现定时任务的异步执行。同样的，即使添加了 <code>@Async</code> 注解，将 <code>ThreadPoolTaskExecutor</code>依赖的线程池的核心线程数设置为 1，定时任务也只能在同一个线程上执行。</p><p>可以在 application.yml 配置文件中修改定时任务 <code>ThreadPoolTaskScheduler</code> 的参数配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">spring</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">task</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">scheduling</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">pool</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">size</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;"># 定时任务线程池的大小，默认为 1</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">thread-name-prefix</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">Task-Job-</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;"># 线程池的线程名的前缀,默认为 scheduling-</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#569CD6;">shutdown</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">await-termination</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;"># 关闭应用时是否等待定时任务执行完成。默认为false ，建议设置为true</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">await-termination-period</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">60</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;"># 等待任务完成的最大时长，单位为秒。默认为 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以通过向容器中注入一个 <code>ThreadPoolTaskScheduler</code> 的 Bean 来修改定时任务 <code>ThreadPoolTaskScheduler</code> 的参数配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">EnableScheduling</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskConfig</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">taskScheduler</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPoolSize</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setThreadNamePrefix</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Task-&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setWaitForTasksToCompleteOnShutdown</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAwaitTerminationSeconds</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">60</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> scheduler;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-动态执行" tabindex="-1"><a class="header-anchor" href="#_3-动态执行" aria-hidden="true">#</a> 3-动态执行</h2><p>SpringBoot 提供的 <code>@Scheduled</code> 注解实现定时任务虽然很方便，但执行周期是写死在代码中的，若想改变就只能修改代码并重新部署。实在不够灵活，Spring 也考虑到了这一点，提供了一个 <code>SchedulingConfigurer</code> 接口，用于拓展动态定时任务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">FunctionalInterface</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SchedulingConfigurer</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">configureTasks</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ScheduledTaskRegistrar</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskRegistrar</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在重写该接口的 <code>configureTasks</code> 方法中可以添加指定格式的定时任务，就像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">EnableScheduling</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskConfig</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SchedulingConfigurer</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">configureTasks</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ScheduledTaskRegistrar</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskRegistrar</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">taskRegistrar</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addCronTask</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;定时任务&quot;</span><span style="color:#D4D4D4;">), </span><span style="color:#CE9178;">&quot;0/10 * * * * ?&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>addCronTask</code> 方法有很多重载，这里仅仅介绍本例中使用的<code>addCronTask(Runable task, String cron)</code>，该方法的第一个参数为实现了 Runable 接口的目标任务，第二个参数为 cron 表达式。</p><p><code>ThreadPoolTaskScheduler</code> 用于调度定时任务，其执行定时任务的核心方法共有 5 个，这里也仅介绍本例中使用到的 <code>ScheduledFuture&lt;?&gt; schedule(Runnable task, Trigger trigger)</code>，该方法的第一个参数为实现了 Runable 接口的目标任务，第二个参数为触发器实例，可以传入 cron 表达式的触发器实例。</p><p><code>ScheduledFuture</code> 作为 <code>ThreadPoolTaskScheduler</code> 任务调度的返回值，是 <code>ScheduledExecutorService</code> 线程池的调度结果，可使用其 <code>cancel(true)</code> 方法来结束这个定时任务</p><h2 id="_4-案例代码" tabindex="-1"><a class="header-anchor" href="#_4-案例代码" aria-hidden="true">#</a> 4-案例代码</h2><h3 id="_4-1-创建数据库" tabindex="-1"><a class="header-anchor" href="#_4-1-创建数据库" aria-hidden="true">#</a> 4.1 创建数据库</h3><p>既然是动态执行定时任务，那就离不开数据库，代码如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">CREATE</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">TABLE</span><span style="color:#D4D4D4;"> \`</span><span style="color:#DCDCAA;">t_task</span><span style="color:#D4D4D4;">\`  (</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`task_id\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">bigint</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NOT NULL</span><span style="color:#D4D4D4;"> AUTO_INCREMENT COMMENT </span><span style="color:#CE9178;">&#39;定时任务主键&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`name\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">50</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">CHARACTER</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">SET</span><span style="color:#D4D4D4;"> utf8mb4 COMMENT </span><span style="color:#CE9178;">&#39;定时任务名称&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`cron\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">50</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">CHARACTER</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">SET</span><span style="color:#D4D4D4;"> utf8mb4 COMMENT </span><span style="color:#CE9178;">&#39;cron 表达式&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`job_class\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">CHARACTER</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">SET</span><span style="color:#D4D4D4;"> utf8mb4 COMMENT </span><span style="color:#CE9178;">&#39;执行类&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`disabled\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">CHARACTER</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">SET</span><span style="color:#D4D4D4;"> utf8mb4 COMMENT </span><span style="color:#CE9178;">&#39;是否禁用【1-正常，0-禁用】&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`create_time\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">datetime</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> COMMENT </span><span style="color:#CE9178;">&#39;创建时间&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`modify_time\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">datetime</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">DEFAULT</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;"> COMMENT </span><span style="color:#CE9178;">&#39;更新时间&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">\`note\`</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">varchar</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">255</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">CHARACTER</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">SET</span><span style="color:#D4D4D4;"> utf8mb4 COMMENT </span><span style="color:#CE9178;">&#39;任务说明&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">PRIMARY KEY</span><span style="color:#D4D4D4;"> (</span><span style="color:#CE9178;">\`task_id\`</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">USING</span><span style="color:#D4D4D4;"> BTREE</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-创建定时任务包装类" tabindex="-1"><a class="header-anchor" href="#_4-2-创建定时任务包装类" aria-hidden="true">#</a> 4.2 创建定时任务包装类</h3><p>在前面介绍定时任务调度器 <code>ThreadPoolTaskScheduler</code> 时，就已经说明了，目标定时任务必须实现 Runable 接口，结合线程的创建方法，这点不难理解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Slf4j</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">abstract</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AbstractTask</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Runnable</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ScheduledFuture</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">scheduledFuture</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Resource</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskScheduler</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">abstract</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">abstract</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">execute</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 创建定时任务</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createTask</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cron</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            scheduledFuture = </span><span style="color:#9CDCFE;">taskScheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">schedule</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">, </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">CronTrigger</span><span style="color:#D4D4D4;">(cron));</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">Exception</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;创建定时任务【{}】失败&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 取消定时任务</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">cancel</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (scheduledFuture != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">scheduledFuture</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">cancel</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">info</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;取消执行【{}】任务&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">Exception</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;取消执行【{}】任务失败&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">run</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">execute</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-实现-taskservice" tabindex="-1"><a class="header-anchor" href="#_4-3-实现-taskservice" aria-hidden="true">#</a> 4.3 实现 TaskService</h3><p>这里采用类的全路径来获取实现了 <code>AbstractTask</code> 的目标任务实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Service</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskServiceImpl</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskService</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Resource</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ApplicationContext</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Resource</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskMapper</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskMapper</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">findAllTask</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskMapper</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">list</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createTask</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">AbstractTask</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;"> = </span></span>
<span class="line"><span style="color:#D4D4D4;">                (AbstractTask) </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBean</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Class</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getJobClass</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCron</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">taskMapper</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">addTask</span><span style="color:#D4D4D4;">(task);</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">Exception</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">updateTask</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">AbstractTask</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;"> = </span></span>
<span class="line"><span style="color:#D4D4D4;">                (AbstractTask) </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBean</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Class</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getJobClass</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">cancel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCron</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">taskMapper</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">updateTask</span><span style="color:#D4D4D4;">(task);</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">ClassNotFoundException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">deleteTask</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">AbstractTask</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;"> = </span></span>
<span class="line"><span style="color:#D4D4D4;">                (AbstractTask) </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBean</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Class</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getJobClass</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">cancel</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">taskMapper</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">deleteTask</span><span style="color:#D4D4D4;">(task);</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">ClassNotFoundException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">executeTask</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">AbstractTask</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;"> = </span></span>
<span class="line"><span style="color:#D4D4D4;">                (AbstractTask) </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBean</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Class</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getJobClass</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">execute</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">ClassNotFoundException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-注册任务" tabindex="-1"><a class="header-anchor" href="#_4-4-注册任务" aria-hidden="true">#</a> 4.4 注册任务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Configuration</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">EnableScheduling</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskConfig</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">SchedulingConfigurer</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Resource</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TaskService</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskService</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Resource</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ApplicationContext</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">configureTasks</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ScheduledTaskRegistrar</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">taskRegistrar</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">allTask</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">taskService</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">findAllTask</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">allTask</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">(task </span><span style="color:#569CD6;">-&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#4EC9B0;">AbstractTask</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;"> = </span></span>
<span class="line"><span style="color:#D4D4D4;">                    (AbstractTask) </span><span style="color:#9CDCFE;">context</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBean</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Class</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">forName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getJobClass</span><span style="color:#D4D4D4;">()));</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">job</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createTask</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">task</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCron</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">            } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">ClassNotFoundException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">printStackTrace</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            }</span></span>
<span class="line"><span style="color:#D4D4D4;">        });</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Bean</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">taskScheduler</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ThreadPoolTaskScheduler</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setPoolSize</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setThreadNamePrefix</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Task-&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setWaitForTasksToCompleteOnShutdown</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">scheduler</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setAwaitTerminationSeconds</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">60</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> scheduler;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-cron" tabindex="-1"><a class="header-anchor" href="#_5-cron" aria-hidden="true">#</a> 5-cron</h2><h3 id="_5-1-域数" tabindex="-1"><a class="header-anchor" href="#_5-1-域数" aria-hidden="true">#</a> 5.1 域数</h3><p>cron 表达式有 6域、7域之分，不同域之间以空格分隔。</p><table><thead><tr><th>域数</th><th>每域的含义</th></tr></thead><tbody><tr><td>6 域</td><td>秒、分、时、日期、月份、星期</td></tr><tr><td>7 域</td><td>秒、分、时、日期、月份、星期、年</td></tr></tbody></table><p>在大部分情况下都会省略年这一位，使用 6 位的 cron 表达式。</p><blockquote><p>Linux 中的 crontab 表达式只有 5 域，分别为：分、时、日期、月份、星期</p></blockquote><h3 id="_5-2-特殊字符" tabindex="-1"><a class="header-anchor" href="#_5-2-特殊字符" aria-hidden="true">#</a> 5.2 特殊字符</h3><p>cron 表达式中的每一域都支持一定数量的特殊字符，每个特殊字符有其特殊含义。</p><table><thead><tr><th>特殊字符</th><th>使用域</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>所有域</td><td>在月域中，<code>*</code>表示每个月；在星期域中，<code>*</code>表示星期的每一天。</td></tr><tr><td><code>,</code></td><td>所有域</td><td>在分钟域中，<code>5,20</code>表示分别在 5 分钟和 20 分钟触发一次。</td></tr><tr><td><code>-</code></td><td>所有域</td><td>在分钟域中，<code>5-20</code>表示从 5 分钟到 20 分钟之间每隔一分钟触发一次。</td></tr><tr><td><code>/</code></td><td>所有域</td><td>在分钟域中，<code>0/15</code>表示从第0分钟开始，每15分钟触发一次。</td></tr><tr><td><code>?</code></td><td>日期、星期</td><td>当日期或星期其中之一确定以后，为了避免冲突，需要将另一位的值设为<code>?</code></td></tr><tr><td><code>L</code></td><td>日期、星期</td><td>单词 Last 的首字母，某月或某星期的最后一天触发，仅日期和星期支持该字符。</td></tr><tr><td><code>W</code></td><td>日期</td><td>除周末以外距离指定日期最近的有效工作日触发，且不会跨过当前月份。</td></tr><tr><td><code>#</code></td><td>星期</td><td>在星期域中，<code>4#2</code>表示某月的第二个星期四触发。</td></tr></tbody></table><h3 id="_5-3-cron-在线生成器" tabindex="-1"><a class="header-anchor" href="#_5-3-cron-在线生成器" aria-hidden="true">#</a> 5.3 cron 在线生成器</h3>`,56),i={href:"http://cron.ciding.cc/",target:"_blank",rel:"noopener noreferrer"};function y(d,C){const n=l("ExternalLinkIcon");return p(),e("div",null,[t,s("p",null,[s("a",i,[o("http://cron.ciding.cc/"),D(n)])])])}const b=a(r,[["render",y],["__file","009-SpringBoot定时任务.html.vue"]]);export{b as default};
