import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as r,c as t,b as n,d as s,e as l,a as p}from"./app-64f4b723.js";const c={},D=p(`<h1 id="_003-springboot配置文件" tabindex="-1"><a class="header-anchor" href="#_003-springboot配置文件" aria-hidden="true">#</a> 003-SpringBoot配置文件</h1><p>在使用 Spring Initializr 构建完 SpringBoot 项目后，会在 resources 目录下生成一个默认的全局配置文件 <code>application.properties</code>，在这个配置文件进行的修改，会影响 SpringBoot 底层的自动配置。</p><p>SpringBoot 的配置文件名是固定的，必须是 <code>application.properties</code>，也可以是 <code>application.yml</code>，这两个配置文件的本质是一样的，只是语法不同。相对于 <code>properties</code> 来讲，<code>YML</code> 更加年轻，层级也更加分明。</p><p>下面是 <code>application.yml</code> 配置文件语法的具体示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">user</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">25</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">zhangsan</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">active</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">created-date</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">2018/03/31 16:54:30</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">address</span><span style="color:#D4D4D4;">: {</span><span style="color:#569CD6;">k1</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">v1</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">k2</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">v2</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">hobbies</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    - </span><span style="color:#CE9178;">one</span></span>
<span class="line"><span style="color:#D4D4D4;">    - </span><span style="color:#CE9178;">two</span></span>
<span class="line"><span style="color:#D4D4D4;">    - </span><span style="color:#CE9178;">three</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>YML 是一种新式的格式，层级鲜明，个人比较喜欢使用的一种格式，注意如下：</p><ol><li><p><strong>字符串可以不加引号，若加双引号则输出特殊字符，若不加或加单引号则转义特殊字符</strong></p></li><li><p><strong>数组类型，短横线后面要有空格；对象类型，冒号后面要有空格</strong></p></li><li><p><strong>YAML是以空格缩进的程度来控制层级关系，但不能用 tab 键代替空格，大小写敏感</strong></p></li></ol><h2 id="_1-配置随机值" tabindex="-1"><a class="header-anchor" href="#_1-配置随机值" aria-hidden="true">#</a> 1-配置随机值</h2><p>在⼀些情况下，有些参数我们需要希望它不是⼀个固定的值，⽐如密钥、服务端⼝等。SpringBoot 内部提供了一个 <code>random.*</code> 属性，专门用于生成随机值，可以通过 <code>\${random.*}</code> 来使用，下面是对应属性的描述：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>random.int</td><td>随机产生正负的整数</td></tr><tr><td>random.int(max)</td><td>随机产生 [0, max) 区间的整数</td></tr><tr><td>random.int(min,max)</td><td>随机产生 [min, max) 区间的整数</td></tr><tr><td>random.long</td><td>随机产生正负的长整数</td></tr><tr><td>random.long(max)</td><td>随机产生 [0, max) 区间的长整数</td></tr><tr><td>random.long(min,max)</td><td>随机产生 [min, max) 区间的长整数</td></tr><tr><td>random.uuid</td><td>产生 UUID 字符串（含‘-‘字符）</td></tr><tr><td>random.*</td><td><code>*</code> 表示除上面列举之外的其它字符，用于随机产生 32 位字符串</td></tr></tbody></table><h2 id="_2-配置文件优先级" tabindex="-1"><a class="header-anchor" href="#_2-配置文件优先级" aria-hidden="true">#</a> 2-配置文件优先级</h2><p>理论上讲 SpringBoot 可以同时存在这两种格式的配置文件，但如果 properties 与 yml 配置文件中出现了相同的配置，那么会以 properties 配置文件中的配置为主。</p><p>在实际业务中，通常只会采取一种统一的配置文件格式，这样可以更好的维护项目</p><p>SpringBoot 项目在启动时，不仅仅加载 resources 目录下的配置文件，以下位置的配置也会被加载：</p><table><thead><tr><th>路径</th><th>说明</th><th>优先级</th></tr></thead><tbody><tr><td>./config</td><td>项目根目录下的config目录</td><td>1</td></tr><tr><td>./</td><td>项目根目录</td><td>2</td></tr><tr><td>classpath:/config</td><td>资源目录下的 config 目录</td><td>3</td></tr><tr><td>classpath:/</td><td>资源目录的根目录</td><td>4</td></tr></tbody></table><p>有的时候，配置信息是我们无法在开发时就能确定的，比如数据库配置，加密密钥配置等。这时候就需要把配置文件放到外边，让用户自定义配置部署。</p><p>只需要将配置文件放到 SpringBoot 打包的 jar 同级目录下或 config 目录下，程序启动时就会自动读取该配置文件</p>`,17),i={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"提示",-1),y={href:"http://application.xxx",target:"_blank",rel:"noopener noreferrer"},u={href:"http://bootstrap.xxx",target:"_blank",rel:"noopener noreferrer"},v=p(`<h2 id="_3-如何从配置文件中取值" tabindex="-1"><a class="header-anchor" href="#_3-如何从配置文件中取值" aria-hidden="true">#</a> 3-如何从配置文件中取值？</h2><p>一切的配置都是为了取值，SpringBoot 也是提供了几种取值的方式，下面一一介绍。</p><h3 id="_3-1-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_3-1-configurationproperties" aria-hidden="true">#</a> 3.1 @ConfigurationProperties</h3><p><code>@ConfigurationProperties</code> 注解标注在实体类上，用于读取一组配置，可使用其 prefix 属性指定配置文件中属性的前缀，如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">ConfigurationProperties</span><span style="color:#D4D4D4;">(prefix = </span><span style="color:#CE9178;">&quot;profile&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Profile</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">desc</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，IDEA 中应该会出现如下提示：</p><figure><img src="https://cdn.jsdelivr.net/gh/mengyahui/image-repository@master/springboot/image-20230715142231163.199w34b77sps.png" alt="image-20230715142231163" tabindex="0" loading="lazy"><figcaption>image-20230715142231163</figcaption></figure><p>什么意思呢？</p><p>其实 SpringBoot 底层为各种场景的配置都提供了一个配置元数据文件，供 IDE 使用。在添加或修改 application.yml 配置文件属性时进行提示。</p><p>而我们自定义的属性是不具备自动提示的功能的，如果你想使用此功能，可以在项目的 pom 文件中添加如下依赖坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-configuration-processor</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">optional</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">true</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">optional</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">dependency</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个依赖只是为了我们开发方便，和实际的业务无关，所以不需要出现在项目打包后的 jar 包中，因此，我们可以通过如下插件在项目打包时，排除掉这个依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">build</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">plugins</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">plugin</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-maven-plugin</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">configuration</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">excludes</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">exclude</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">org.springframework.boot</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">groupId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                        </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">spring-boot-configuration-processor</span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">artifactId</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">exclude</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">excludes</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">configuration</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">plugin</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">plugins</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">build</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-value" tabindex="-1"><a class="header-anchor" href="#_3-2-value" aria-hidden="true">#</a> 3.2 @Value</h3><p><code>@Value</code> 注解可以读取单个配置项，示例代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RestController</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HelloController</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Value</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;\${profile.name}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">GetMapping</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;/hello&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">hello</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> name;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-如何从自定义配置文件中取值" tabindex="-1"><a class="header-anchor" href="#_4-如何从自定义配置文件中取值" aria-hidden="true">#</a> 4-如何从自定义配置文件中取值？</h2>`,17),C={href:"http://application.xxx",target:"_blank",rel:"noopener noreferrer"},m={href:"http://bootsrap.xxx",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"@PropertySource",-1),g=p(`<p>只需要在配置类上标注 <code>@PropertySource</code> 并指定你自定义的配置文件即可完成.</p><p>加入 resources 目录下有一个 java-info.properties 文件，内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">java</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">version</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">11</span></span>
<span class="line"><span style="color:#9CDCFE;">java</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">framework</span><span style="color:#D4D4D4;">=</span><span style="color:#4EC9B0;">SpringBoot</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在一个 JavaBean 中可以通过如下代码读取 user.properties 文件中的配置信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">PropertySource</span><span style="color:#D4D4D4;">(value = </span><span style="color:#CE9178;">&quot;classpath:user.properties&quot;</span><span style="color:#D4D4D4;">,encoding = </span><span style="color:#CE9178;">&quot;UTF-8&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">JavaInfo</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Value</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;\${java.version}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">version</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Value</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;\${java.framework}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">framework</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@PropertySource</code> 注解只是用于加载自定义配置文件的配置信息，读取配置信息还是需要配合 <code>@Value</code> 或 <code>@ConfigurationProperties</code> 注解来使用。</p><p>此外，<code>@PropertySource</code> 注解是不支持加载 YML 文件的，怎么解决呢？</p><p><code>@PropertySource</code> 注解有一个属性 factory ，默认值是 <code>PropertySourceFactory.class</code> ，这个就是用来加载 properties 格式的配置文件，我们可以自定义一个用来加载 YML 格式的配置文件，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">YMLPropertyFactory</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PropertySourceFactory</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PropertySource</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">createPropertySource</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">EncodedResource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">resource</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IOException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Properties</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">propertiesFromYaml</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">loadYamlIntoProperties</span><span style="color:#D4D4D4;">(resource);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">sourceName</span><span style="color:#D4D4D4;"> = name != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;"> name </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">resource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getResource</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getFilename</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">assert</span><span style="color:#D4D4D4;"> sourceName != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">PropertiesPropertySource</span><span style="color:#D4D4D4;">(sourceName, propertiesFromYaml);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Properties</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">loadYamlIntoProperties</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">EncodedResource</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">resource</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">throws</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">FileNotFoundException</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">YamlPropertiesFactoryBean</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">factory</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">YamlPropertiesFactoryBean</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">factory</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">setResources</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resource</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getResource</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#9CDCFE;">factory</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">afterPropertiesSet</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">factory</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getObject</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        } </span><span style="color:#C586C0;">catch</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">IllegalStateException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#6A9955;">// for ignoreResourceNotFound</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#4EC9B0;">Throwable</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">cause</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCause</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (cause </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> FileNotFoundException)</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> (FileNotFoundException) </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCause</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> e;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，只需要将 factory 属性值指定为 YMLPropertyFactory 即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Component</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">PropertySource</span><span style="color:#D4D4D4;">(value = </span><span style="color:#CE9178;">&quot;classpath:user.properties&quot;</span><span style="color:#D4D4D4;">,factory=</span><span style="color:#9CDCFE;">YMLPropertyFactory</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">JavaInfo</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Value</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;\${java.version}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">version</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Value</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;\${java.framework}&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">framework</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function E(h,x){const a=e("ExternalLinkIcon");return r(),t("div",null,[D,n("div",i,[d,n("p",null,[s("除了 "),n("a",y,[s("application.xxx"),l(a)]),s(" 类型的配置文件，SpringBoot 项目启动时还会加载名为 "),n("a",u,[s("bootstrap.xxx"),l(a)]),s(" 的配置文件。bootstarp 文件用于配置系统级别的参数，如：程序的端口号、配置中心地址等；而 application 文件则是用于配置应用级别的参数，如：日志级别、一些开关参数。")])]),v,n("p",null,[s("SpringBoot 在启动的时候会自动加载 "),n("a",C,[s("application.xxx"),l(a)]),s(" 和 "),n("a",m,[s("bootsrap.xxx"),l(a)]),s(" ，但是为了区分，有时候需要自定义一个配置文件，那么如何从自定义的配置文件中取值呢？此时就需要配合 "),b,s(" 这个注解使用了")]),g])}const _=o(c,[["render",E],["__file","003-SpringBoot配置文件.html.vue"]]);export{_ as default};
