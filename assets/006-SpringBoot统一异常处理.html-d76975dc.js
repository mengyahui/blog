import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as l}from"./app-56a9580f.js";const p={},o=l(`<h2 id="_1-关于异常的理解" tabindex="-1"><a class="header-anchor" href="#_1-关于异常的理解" aria-hidden="true">#</a> 1-关于异常的理解</h2><p>首先应该明确一点，一切异常对于系统来说，都是不正常的表现。尽管有时由于业务处理的需要我们会主动抛出一些异常，但也不意味对这些异常可以不管不顾，需要有一个地方对抛出的异常进行处理。</p><p>在日常开发中，一个完善的异常处理机制，在提升系统稳定性和用户体验等方面是至关重要的。但我们不能认为完善异常处理机制是系统的核心，而是要反思系统架构设计是否合理、系统逻辑设计是否合理等。而不是指望完善异常处理来给系统缺陷擦屁股。</p><p>对异常按阶段进行分类，大体可以分成：进入<code>Controller</code>前的异常和 <code>Service</code> 层异常</p><figure><img src="https://cdn.jsdelivr.net/gh/mengyahui/image-repository@master/springboot/image-20230717084519181.d0iaujsr6ew.png" alt="image-20230717084519181" tabindex="0" loading="lazy"><figcaption>image-20230717084519181</figcaption></figure><h2 id="_2-springboot默认异常处理机制" tabindex="-1"><a class="header-anchor" href="#_2-springboot默认异常处理机制" aria-hidden="true">#</a> 2-SpringBoot默认异常处理机制</h2><p>SpringBoot 提供了默认的异常处理机制：默认提供了程序出错的结果映射路径 <code>/error</code>。这个 <code>/error</code> 请求会在 <code>BasicErrorController</code> 中处理，其内部是通过判断请求头中的 Accept 的内容是否为<code>text/html</code> 来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容Accept:text/html）还是客户端接口的调用，以此来决定返回页面视图还是 JSON 消息内容。</p><p>对于 404 来说，默认返回的 Json 消息内容如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;timestamp&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;2023-05-12T06:11:45.209+0000&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;status&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">404</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;error&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Not Found&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;message&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;No message available&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;path&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;/index.html&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，这样的异常 Json 数据对前端来说是很不友好的，如果是浏览器请求的调用更是会返回一个默认的 <code>Whitelabel Error Page</code> 页面。</p><h2 id="_3-统一异常处理" tabindex="-1"><a class="header-anchor" href="#_3-统一异常处理" aria-hidden="true">#</a> 3-统一异常处理</h2><p>Spring 在 3.2 版本增加了一个注解 <code>@ControllerAdvice</code>，可以与 <code>@ExceptionHandler</code>、<code>@InitBinder</code>、<code>@ModelAttribute</code> 等注解注解配套使用。不过跟异常处理相关的只有注解 <code>@ExceptionHandler</code>，从字面上看，就是异常处理器的意思。</p><h3 id="_3-1-exceptionhandler" tabindex="-1"><a class="header-anchor" href="#_3-1-exceptionhandler" aria-hidden="true">#</a> 3.1 @ExceptionHandler</h3><p><code>@ExceptionHandler</code> 注解标注在 Controller 的方法上，用于拦截该 Controller 中被 @RequestMapping 注解标注的 handler 抛出的异常，并进行处理，如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">({</span><span style="color:#9CDCFE;">RuntimeException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">MethodArgumentNotValidException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">})</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;String,Object&gt; </span><span style="color:#DCDCAA;">exceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Exception</span><span style="color:#D4D4D4;"> e) {</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">   </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (e </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> RuntimeException) {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;code&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">501</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;message&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;运行时异常&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">   } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (e </span><span style="color:#569CD6;">instanceof</span><span style="color:#D4D4D4;"> MethodArgumentNotValidException) {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;code&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">502</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;message&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;参数校验异常&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">   } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;code&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">500</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">       </span><span style="color:#9CDCFE;">result</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;message&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;未知异常&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">   }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> result;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 UserController 中存在上面的异常处理方法，则 UserController 中的所有 handler 抛出的 <code>RuntimeException </code>和 <code>MethodArgumentNotValidException</code> 异常都会被该异常处理方法处理。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li><code>@ExceptionHandler</code> 注解的 value 属性，用于指定需要处理异常的 class，且只有在当前控制器中抛出的异常才会被处理。</li><li>被 <code>@ExceptionHandler</code> 注解标注的异常处理方法，返回值类型和当前控制器中标识了<code>@RequestMapping</code> 等注解的方法是统一的。</li></ol></div><h3 id="_3-2-controlleradvice" tabindex="-1"><a class="header-anchor" href="#_3-2-controlleradvice" aria-hidden="true">#</a> 3.2 @ControllerAdvice</h3><p><code>@ExceptionHandler</code> 注解虽然可以处理异常，但只能处理其所在控制器抛出的异常。对于其他控制器的异常 <code>@ExceptionHandler</code> 也是无能为力。</p><p>有没有一种方法可以对所有控制器抛出的异常，进行捕获并处理呢？</p><p><code>@ControllerAdvice</code> 注解就能实现这一功能，该注解就是用于给 Controller 控制器添加统一的操作或处理，配合 <code>@ExceptionHandler</code> 注解就可以实现全局的异常处理。</p><h2 id="_4-全局异常处理器" tabindex="-1"><a class="header-anchor" href="#_4-全局异常处理器" aria-hidden="true">#</a> 4-全局异常处理器</h2><h3 id="_4-1-统一响应格式" tabindex="-1"><a class="header-anchor" href="#_4-1-统一响应格式" aria-hidden="true">#</a> 4.1 统一响应格式</h3><p>越来越多的项目采用前后端分离的开发模式，这对后端接口的响应格式便有了一定的要求。通常，我们会采用JSON 格式作为前后端交换数据格式，从而减少沟通成本等。</p><p>一般响应格式通常会包含状态码、状态描述（或错误提示信息）、业务数据等信息。在此基础上，不同的架构师、项目搭建者可能会有所调整。但从整体上来说，基本上都是大同小异，但至少包含如下三个属性：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;code&quot;</span><span style="color:#D4D4D4;">:</span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;message&quot;</span><span style="color:#D4D4D4;">:</span><span style="color:#CE9178;">&quot;操作成功&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;data&quot;</span><span style="color:#D4D4D4;">:{}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 code 和 message 通常使用枚举来定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Getter</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">enum</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">ResponseEnum</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 成功</span></span>
<span class="line"><span style="color:#D4D4D4;">    SUCCESS(</span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;操作成功&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 失败</span></span>
<span class="line"><span style="color:#D4D4D4;">    FAILED(</span><span style="color:#B5CEA8;">201</span><span style="color:#D4D4D4;">,</span><span style="color:#CE9178;">&quot;操作失败&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 登录注册相关 6001-7000</span></span>
<span class="line"><span style="color:#D4D4D4;">    NEED_LOGIN(</span><span style="color:#B5CEA8;">6001</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;需要登录后操作&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    USERNAME_EXIST(</span><span style="color:#B5CEA8;">6002</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;用户名已存在&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    PHONE_NUMBER_EXIST(</span><span style="color:#B5CEA8;">6003</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;手机号已存在&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    USERNAME_NOT_NULL(</span><span style="color:#B5CEA8;">6004</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;用户名不能为空&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    NICKNAME_NOT_NULL(</span><span style="color:#B5CEA8;">6005</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;昵称不能为空&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    PASSWORD_NOT_NULL(</span><span style="color:#B5CEA8;">6006</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;密码不能为空&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    EMAIL_EXIST(</span><span style="color:#B5CEA8;">6007</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;邮箱已存在&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    EMAIL_NOT_NULL(</span><span style="color:#B5CEA8;">6008</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;邮箱不能为空&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    NICKNAME_EXIST(</span><span style="color:#B5CEA8;">6009</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;昵称已存在&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    LOGIN_ERROR(</span><span style="color:#B5CEA8;">6010</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;用户名或密码错误&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 系统相关 7001-8000</span></span>
<span class="line"><span style="color:#D4D4D4;">    NO_OPERATOR_AUTH(</span><span style="color:#B5CEA8;">7001</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;无权限操作&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    SYSTEM_ERROR(</span><span style="color:#B5CEA8;">7002</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;出现错误啦！&quot;</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">    FILE_TYPE_ERROR(</span><span style="color:#B5CEA8;">507</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;文件类型错误&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">ResponseEnum</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;"> = code;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> = message;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里仅仅给出了部分的状态码，更多的状态码可根据实际业务需求定义。</p><p>为了方便响应数据的返回，这里定义一个统一返回的实体类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Data</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Accessors</span><span style="color:#D4D4D4;">(chain = </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Serializable</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;&gt;(code,message,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ResponseEnum</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCode</span><span style="color:#D4D4D4;">(),</span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">success</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ResponseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">SUCCESS</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">build</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ResponseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">FAILED</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-全局异常处理器" tabindex="-1"><a class="header-anchor" href="#_4-2-全局异常处理器" aria-hidden="true">#</a> 4.2 全局异常处理器</h3><p>当然异常是很多的，在实际开发中，一般都会比较详细的去拦截一些常见的异常，拦截 <code>Exception</code> 虽然可以一劳永逸，但是不利于我们去排查或者定位问题。实际项目中，可以把拦截 <code>Exception</code>异常写在<strong>全局异常处理器</strong>最下面，如果都没有找到，最后再拦截一下 <code>Exception</code>异常，保证输出信息友好。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">RestControllerAdvice</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Slf4j</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">GlobalExceptionHandler</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 请求体参数校验异常</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">MethodArgumentNotValidException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">methodArgumentNotValidExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">MethodArgumentNotValidException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">ObjectError</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBindingResult</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getAllErrors</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;参数校验异常:{}&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDefaultMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDefaultMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 数据绑定异常</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">BindException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">bindException</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">BindException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">ObjectError</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBindingResult</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">getAllErrors</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;数据绑定异常:{}&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDefaultMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">objectError</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getDefaultMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 参数校验异常</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ConstraintViolationException</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">constraintViolationExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ConstraintViolationException</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getConstraintViolations</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">stream</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">map</span><span style="color:#D4D4D4;">(ConstraintViolation</span><span style="color:#C586C0;">::</span><span style="color:#D4D4D4;">getMessage)</span></span>
<span class="line"><span style="color:#D4D4D4;">                .</span><span style="color:#DCDCAA;">collect</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Collectors</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">toList</span><span style="color:#D4D4D4;">()).</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;参数校验异常:{}&quot;</span><span style="color:#D4D4D4;">,message);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(message);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 未知异常</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">ExceptionHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Exception</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">class</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">exceptionAllHandler</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Exception</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">log</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;未知异常:{}&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">R</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">fail</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMessage</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-自定义异常" tabindex="-1"><a class="header-anchor" href="#_4-3-自定义异常" aria-hidden="true">#</a> 4.3 自定义异常</h3><p>在实际开发中，一些异常是无法预知的，像请求超时、文件上传格式不对等等。可以自定义一个业务异常，当出现业务异常时，抛出这个自定义异常即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Getter</span></span>
<span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Setter</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BaseException</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">RuntimeException</span><span style="color:#D4D4D4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">BaseException</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">ResponseEnum</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCode</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getMessage</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">BaseException</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Integer</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;"> = code;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;"> = message;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面自定义了一个基本异常，在使用时只需要抛出该异常并传入具体业务对应的构造参数即可。例如，在用户注册时，若用户传入的用户名已被注册，则抛出自定义异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#C586C0;">?</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#DCDCAA;">registerUser</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> user) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">List</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">userList</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">userMapper</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">selectByName</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">user</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getUsername</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">userList</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">size</span><span style="color:#D4D4D4;">() &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">BaseException</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ResponseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">USERNAME_EXIST</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    ......</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，不要忘了将自定义异常加入全局异常处理器中。</p><h2 id="_5-使用assert替换throw-exception" tabindex="-1"><a class="header-anchor" href="#_5-使用assert替换throw-exception" aria-hidden="true">#</a> 5-使用Assert替换throw Exception</h2><p>Spring 中的 <code>org.springframework.util.Assert</code> ，是一个用于验证参数或状态的工具类，它提供了一系列的静态方法，可以在不满足条件时抛出异常。</p><p>下面是 <code>Assert.notNull()</code> 的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">notNull</span><span style="color:#D4D4D4;">(@</span><span style="color:#4EC9B0;">Nullable</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> object, </span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> message) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (object == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">IllegalArgumentException</span><span style="color:#D4D4D4;">(message);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 <code>Assert.notNull()</code> 其实就是帮我们把 <code>if...{}</code> 语句封装了一下，在不满足条件时抛出异常<code>IllegalArgumentException</code> 。虽然很简单，但不可否认的是很大程度上提升了我们的编码体验。</p><p>业务逻辑出现的异常基本都是对应特定的场景，比如根据用户名获取用户信息，查询结果为 null，此时抛出的异常可能为 <code>UserNotFoundException</code> ，并且有特定的异常码（如：7001）和异常信息（如：该用户不存在）。</p><p>我们能不能仿照 <code>Assert</code> ，也写一个断言类，当不满足条件时抛出我们自定义的异常？当然可以！！！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Assert</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">assertNotNull</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (obj == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">BaseException</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">ResponseEnum</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">FAILED</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getCode</span><span style="color:#D4D4D4;">(),message);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">assertNotNull</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Object</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">,</span><span style="color:#4EC9B0;">ResponseEnum</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">responseEnum</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (obj == </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">throw</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">BaseException</span><span style="color:#D4D4D4;">(responseEnum);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的断言类只提供了判断对象不为 null 的静态方法，可根据实际需求进行拓展。</p>`,49),e=[o];function D(c,r){return n(),a("div",null,e)}const y=s(p,[["render",D],["__file","006-SpringBoot统一异常处理.html.vue"]]);export{y as default};
